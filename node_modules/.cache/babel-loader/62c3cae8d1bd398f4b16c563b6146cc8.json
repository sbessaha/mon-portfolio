{"ast":null,"code":"// Utilities\nimport { computed, isRef } from 'vue';\nimport { destructComputed, isCssColor } from \"../util/index.mjs\"; // Types\n// Composables\n\nexport function useColor(colors) {\n  return destructComputed(() => {\n    const classes = [];\n    const styles = {};\n\n    if (colors.value.background) {\n      if (isCssColor(colors.value.background)) {\n        styles.backgroundColor = colors.value.background;\n      } else {\n        classes.push(`bg-${colors.value.background}`);\n      }\n    }\n\n    if (colors.value.text) {\n      if (isCssColor(colors.value.text)) {\n        styles.color = colors.value.text;\n        styles.caretColor = colors.value.text;\n      } else {\n        classes.push(`text-${colors.value.text}`);\n      }\n    }\n\n    return {\n      colorClasses: classes,\n      colorStyles: styles\n    };\n  });\n}\nexport function useTextColor(props, name) {\n  const colors = computed(() => ({\n    text: isRef(props) ? props.value : name ? props[name] : null\n  }));\n  const {\n    colorClasses: textColorClasses,\n    colorStyles: textColorStyles\n  } = useColor(colors);\n  return {\n    textColorClasses,\n    textColorStyles\n  };\n}\nexport function useBackgroundColor(props, name) {\n  const colors = computed(() => ({\n    background: isRef(props) ? props.value : name ? props[name] : null\n  }));\n  const {\n    colorClasses: backgroundColorClasses,\n    colorStyles: backgroundColorStyles\n  } = useColor(colors);\n  return {\n    backgroundColorClasses,\n    backgroundColorStyles\n  };\n}","map":{"version":3,"mappings":"AAAA;AACA,SAASA,QAAT,EAAmBC,KAAnB,QAAgC,KAAhC;SACSC,kBAAkBC,kB,qBAE3B;AAeA;;AACA,OAAO,SAASC,QAAT,CAAmBC,MAAnB,EAAgF;EACrF,OAAOH,gBAAgB,CAAC,MAAM;IAC5B,MAAMI,OAAiB,GAAG,EAA1B;IACA,MAAMC,MAAqB,GAAG,EAA9B;;IAEA,IAAIF,MAAM,CAACG,KAAPH,CAAaI,UAAjB,EAA6B;MAC3B,IAAIN,UAAU,CAACE,MAAM,CAACG,KAAPH,CAAaI,UAAd,CAAd,EAAyC;QACvCF,MAAM,CAACG,eAAPH,GAAyBF,MAAM,CAACG,KAAPH,CAAaI,UAAtCF;MADF,OAEO;QACLD,OAAO,CAACK,IAARL,CAAc,MAAKD,MAAM,CAACG,KAAPH,CAAaI,UAAW,EAA3CH;MACD;IACF;;IAED,IAAID,MAAM,CAACG,KAAPH,CAAaO,IAAjB,EAAuB;MACrB,IAAIT,UAAU,CAACE,MAAM,CAACG,KAAPH,CAAaO,IAAd,CAAd,EAAmC;QACjCL,MAAM,CAACM,KAAPN,GAAeF,MAAM,CAACG,KAAPH,CAAaO,IAA5BL;QACAA,MAAM,CAACO,UAAPP,GAAoBF,MAAM,CAACG,KAAPH,CAAaO,IAAjCL;MAFF,OAGO;QACLD,OAAO,CAACK,IAARL,CAAc,QAAOD,MAAM,CAACG,KAAPH,CAAaO,IAAK,EAAvCN;MACD;IACF;;IAED,OAAO;MAAES,YAAY,EAAET,OAAhB;MAAyBU,WAAW,EAAET;IAAtC,CAAP;EArBqB,EAAvB;AAuBD;AAID,OAAO,SAASU,YAAT,CACLC,KADK,EAELC,IAFK,EAGU;EACf,MAAMd,MAAM,GAAGL,QAAQ,CAAC,OAAO;IAC7BY,IAAI,EAAEX,KAAK,CAACiB,KAAD,CAALjB,GAAeiB,KAAK,CAACV,KAArBP,GAA8BkB,IAAI,GAAGD,KAAK,CAACC,IAAD,CAAR,GAAiB;EAD5B,CAAP,CAAD,CAAvB;EAIA,MAAM;IACJJ,YAAY,EAAEK,gBADV;IAEJJ,WAAW,EAAEK;EAFT,IAGFjB,QAAQ,CAACC,MAAD,CAHZ;EAKA,OAAO;IAAEe,gBAAF;IAAoBC;EAApB,CAAP;AACD;AAID,OAAO,SAASC,kBAAT,CACLJ,KADK,EAELC,IAFK,EAGgB;EACrB,MAAMd,MAAM,GAAGL,QAAQ,CAAC,OAAO;IAC7BS,UAAU,EAAER,KAAK,CAACiB,KAAD,CAALjB,GAAeiB,KAAK,CAACV,KAArBP,GAA8BkB,IAAI,GAAGD,KAAK,CAACC,IAAD,CAAR,GAAiB;EADlC,CAAP,CAAD,CAAvB;EAIA,MAAM;IACJJ,YAAY,EAAEQ,sBADV;IAEJP,WAAW,EAAEQ;EAFT,IAGFpB,QAAQ,CAACC,MAAD,CAHZ;EAKA,OAAO;IAAEkB,sBAAF;IAA0BC;EAA1B,CAAP;AACD","names":["computed","isRef","destructComputed","isCssColor","useColor","colors","classes","styles","value","background","backgroundColor","push","text","color","caretColor","colorClasses","colorStyles","useTextColor","props","name","textColorClasses","textColorStyles","useBackgroundColor","backgroundColorClasses","backgroundColorStyles"],"sources":["../../src/composables/color.ts"],"sourcesContent":["// Utilities\nimport { computed, isRef } from 'vue'\nimport { destructComputed, isCssColor } from '@/util'\n\n// Types\nimport type { CSSProperties, Ref } from 'vue'\n\ntype ColorValue = string | false | null | undefined\n\nexport interface TextColorData {\n  textColorClasses: Ref<string[]>\n  textColorStyles: Ref<CSSProperties>\n}\n\nexport interface BackgroundColorData {\n  backgroundColorClasses: Ref<string[]>\n  backgroundColorStyles: Ref<CSSProperties>\n}\n\n// Composables\nexport function useColor (colors: Ref<{ background?: ColorValue, text?: ColorValue }>) {\n  return destructComputed(() => {\n    const classes: string[] = []\n    const styles: CSSProperties = {}\n\n    if (colors.value.background) {\n      if (isCssColor(colors.value.background)) {\n        styles.backgroundColor = colors.value.background\n      } else {\n        classes.push(`bg-${colors.value.background}`)\n      }\n    }\n\n    if (colors.value.text) {\n      if (isCssColor(colors.value.text)) {\n        styles.color = colors.value.text\n        styles.caretColor = colors.value.text\n      } else {\n        classes.push(`text-${colors.value.text}`)\n      }\n    }\n\n    return { colorClasses: classes, colorStyles: styles }\n  })\n}\n\nexport function useTextColor (color: Ref<ColorValue>): TextColorData\nexport function useTextColor <T extends Record<K, ColorValue>, K extends string> (props: T, name: K): TextColorData\nexport function useTextColor <T extends Record<K, ColorValue>, K extends string> (\n  props: T | Ref<ColorValue>,\n  name?: K\n): TextColorData {\n  const colors = computed(() => ({\n    text: isRef(props) ? props.value : (name ? props[name] : null),\n  }))\n\n  const {\n    colorClasses: textColorClasses,\n    colorStyles: textColorStyles,\n  } = useColor(colors)\n\n  return { textColorClasses, textColorStyles }\n}\n\nexport function useBackgroundColor (color: Ref<ColorValue>): BackgroundColorData\nexport function useBackgroundColor <T extends Record<K, ColorValue>, K extends string> (props: T, name: K): BackgroundColorData\nexport function useBackgroundColor <T extends Record<K, ColorValue>, K extends string> (\n  props: T | Ref<ColorValue>,\n  name?: K\n): BackgroundColorData {\n  const colors = computed(() => ({\n    background: isRef(props) ? props.value : (name ? props[name] : null),\n  }))\n\n  const {\n    colorClasses: backgroundColorClasses,\n    colorStyles: backgroundColorStyles,\n  } = useColor(colors)\n\n  return { backgroundColorClasses, backgroundColorStyles }\n}\n"]},"metadata":{},"sourceType":"module"}