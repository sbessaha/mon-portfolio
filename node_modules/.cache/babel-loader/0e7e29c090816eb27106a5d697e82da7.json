{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n// Utilities\nimport { APCAcontrast } from \"./color/APCA.mjs\";\nimport { consoleWarn } from \"./console.mjs\";\nimport { chunk, has, padEnd } from \"./helpers.mjs\";\nimport * as CIELAB from \"./color/transformCIELAB.mjs\";\nimport * as sRGB from \"./color/transformSRGB.mjs\"; // Types\n\nexport function isCssColor(color) {\n  return !!color && /^(#|var\\(--|(rgb|hsl)a?\\()/.test(color);\n}\nexport function isParsableColor(color) {\n  return isCssColor(color) && !/^((rgb|hsl)a?\\()?var\\(--/.test(color);\n}\nconst cssColorRe = /^(?<fn>(?:rgb|hsl)a?)\\((?<values>.+)\\)/;\nconst mappers = {\n  rgb: (r, g, b, a) => ({\n    r,\n    g,\n    b,\n    a\n  }),\n  rgba: (r, g, b, a) => ({\n    r,\n    g,\n    b,\n    a\n  }),\n  hsl: (h, s, l, a) => HSLtoRGB({\n    h,\n    s,\n    l,\n    a\n  }),\n  hsla: (h, s, l, a) => HSLtoRGB({\n    h,\n    s,\n    l,\n    a\n  }),\n  hsv: (h, s, v, a) => HSVtoRGB({\n    h,\n    s,\n    v,\n    a\n  }),\n  hsva: (h, s, v, a) => HSVtoRGB({\n    h,\n    s,\n    v,\n    a\n  })\n};\nexport function parseColor(color) {\n  if (typeof color === 'number') {\n    if (isNaN(color) || color < 0 || color > 0xFFFFFF) {\n      // int can't have opacity\n      consoleWarn(`'${color}' is not a valid hex color`);\n    }\n\n    return {\n      r: (color & 0xFF0000) >> 16,\n      g: (color & 0xFF00) >> 8,\n      b: color & 0xFF\n    };\n  } else if (typeof color === 'string' && cssColorRe.test(color)) {\n    const {\n      groups\n    } = color.match(cssColorRe);\n    const {\n      fn,\n      values\n    } = groups;\n    const realValues = values.split(/,\\s*/).map(v => {\n      if (v.endsWith('%') && ['hsl', 'hsla', 'hsv', 'hsva'].includes(fn)) {\n        return parseFloat(v) / 100;\n      } else {\n        return parseFloat(v);\n      }\n    });\n    return mappers[fn](...realValues);\n  } else if (typeof color === 'string') {\n    let hex = color.startsWith('#') ? color.slice(1) : color;\n\n    if ([3, 4].includes(hex.length)) {\n      hex = hex.split('').map(char => char + char).join('');\n    } else if (![6, 8].includes(hex.length)) {\n      consoleWarn(`'${color}' is not a valid hex(a) color`);\n    }\n\n    const int = parseInt(hex, 16);\n\n    if (isNaN(int) || int < 0 || int > 0xFFFFFFFF) {\n      consoleWarn(`'${color}' is not a valid hex(a) color`);\n    }\n\n    return HexToRGB(hex);\n  } else if (typeof color === 'object') {\n    if (has(color, ['r', 'g', 'b'])) {\n      return color;\n    } else if (has(color, ['h', 's', 'l'])) {\n      return HSVtoRGB(HSLtoHSV(color));\n    } else if (has(color, ['h', 's', 'v'])) {\n      return HSVtoRGB(color);\n    }\n  }\n\n  throw new TypeError(`Invalid color: ${color == null ? color : String(color) || color.constructor.name}\\nExpected #hex, #hexa, rgb(), rgba(), hsl(), hsla(), object or number`);\n}\nexport function RGBToInt(color) {\n  return (color.r << 16) + (color.g << 8) + color.b;\n}\nexport function classToHex(color, colors, currentTheme) {\n  const [colorName, colorModifier] = color.toString().trim().replace('-', '').split(' ', 2);\n  let hexColor = '';\n\n  if (colorName && colorName in colors) {\n    if (colorModifier && colorModifier in colors[colorName]) {\n      hexColor = colors[colorName][colorModifier];\n    } else if ('base' in colors[colorName]) {\n      hexColor = colors[colorName].base;\n    }\n  } else if (colorName && colorName in currentTheme) {\n    hexColor = currentTheme[colorName];\n  }\n\n  return hexColor;\n}\n/** Converts HSVA to RGBA. Based on formula from https://en.wikipedia.org/wiki/HSL_and_HSV */\n\nexport function HSVtoRGB(hsva) {\n  const {\n    h,\n    s,\n    v,\n    a\n  } = hsva;\n\n  const f = n => {\n    const k = (n + h / 60) % 6;\n    return v - v * s * Math.max(Math.min(k, 4 - k, 1), 0);\n  };\n\n  const rgb = [f(5), f(3), f(1)].map(v => Math.round(v * 255));\n  return {\n    r: rgb[0],\n    g: rgb[1],\n    b: rgb[2],\n    a\n  };\n}\nexport function HSLtoRGB(hsla) {\n  return HSVtoRGB(HSLtoHSV(hsla));\n}\n/** Converts RGBA to HSVA. Based on formula from https://en.wikipedia.org/wiki/HSL_and_HSV */\n\nexport function RGBtoHSV(rgba) {\n  if (!rgba) return {\n    h: 0,\n    s: 1,\n    v: 1,\n    a: 1\n  };\n  const r = rgba.r / 255;\n  const g = rgba.g / 255;\n  const b = rgba.b / 255;\n  const max = Math.max(r, g, b);\n  const min = Math.min(r, g, b);\n  let h = 0;\n\n  if (max !== min) {\n    if (max === r) {\n      h = 60 * (0 + (g - b) / (max - min));\n    } else if (max === g) {\n      h = 60 * (2 + (b - r) / (max - min));\n    } else if (max === b) {\n      h = 60 * (4 + (r - g) / (max - min));\n    }\n  }\n\n  if (h < 0) h = h + 360;\n  const s = max === 0 ? 0 : (max - min) / max;\n  const hsv = [h, s, max];\n  return {\n    h: hsv[0],\n    s: hsv[1],\n    v: hsv[2],\n    a: rgba.a\n  };\n}\nexport function HSVtoHSL(hsva) {\n  const {\n    h,\n    s,\n    v,\n    a\n  } = hsva;\n  const l = v - v * s / 2;\n  const sprime = l === 1 || l === 0 ? 0 : (v - l) / Math.min(l, 1 - l);\n  return {\n    h,\n    s: sprime,\n    l,\n    a\n  };\n}\nexport function HSLtoHSV(hsl) {\n  const {\n    h,\n    s,\n    l,\n    a\n  } = hsl;\n  const v = l + s * Math.min(l, 1 - l);\n  const sprime = v === 0 ? 0 : 2 - 2 * l / v;\n  return {\n    h,\n    s: sprime,\n    v,\n    a\n  };\n}\nexport function RGBtoCSS(_ref) {\n  let {\n    r,\n    g,\n    b,\n    a\n  } = _ref;\n  return a === undefined ? `rgb(${r}, ${g}, ${b})` : `rgba(${r}, ${g}, ${b}, ${a})`;\n}\nexport function HSVtoCSS(hsva) {\n  return RGBtoCSS(HSVtoRGB(hsva));\n}\n\nfunction toHex(v) {\n  const h = Math.round(v).toString(16);\n  return ('00'.substr(0, 2 - h.length) + h).toUpperCase();\n}\n\nexport function RGBtoHex(_ref2) {\n  let {\n    r,\n    g,\n    b,\n    a\n  } = _ref2;\n  return `#${[toHex(r), toHex(g), toHex(b), a !== undefined ? toHex(Math.round(a * 255)) : ''].join('')}`;\n}\nexport function HexToRGB(hex) {\n  hex = parseHex(hex);\n  let [r, g, b, a] = chunk(hex, 2).map(c => parseInt(c, 16));\n  a = a === undefined ? a : a / 255;\n  return {\n    r,\n    g,\n    b,\n    a\n  };\n}\nexport function HexToHSV(hex) {\n  const rgb = HexToRGB(hex);\n  return RGBtoHSV(rgb);\n}\nexport function HSVtoHex(hsva) {\n  return RGBtoHex(HSVtoRGB(hsva));\n}\nexport function parseHex(hex) {\n  if (hex.startsWith('#')) {\n    hex = hex.slice(1);\n  }\n\n  hex = hex.replace(/([^0-9a-f])/gi, 'F');\n\n  if (hex.length === 3 || hex.length === 4) {\n    hex = hex.split('').map(x => x + x).join('');\n  }\n\n  if (hex.length !== 6) {\n    hex = padEnd(padEnd(hex, 6), 8, 'F');\n  }\n\n  return hex;\n}\nexport function parseGradient(gradient, colors, currentTheme) {\n  return gradient.replace(/([a-z]+(\\s[a-z]+-[1-5])?)(?=$|,)/gi, x => {\n    return classToHex(x, colors, currentTheme) || x;\n  }).replace(/(rgba\\()#[0-9a-f]+(?=,)/gi, x => {\n    return 'rgba(' + Object.values(HexToRGB(parseHex(x.replace(/rgba\\(/, '')))).slice(0, 3).join(',');\n  });\n}\nexport function lighten(value, amount) {\n  const lab = CIELAB.fromXYZ(sRGB.toXYZ(value));\n  lab[0] = lab[0] + amount * 10;\n  return sRGB.fromXYZ(CIELAB.toXYZ(lab));\n}\nexport function darken(value, amount) {\n  const lab = CIELAB.fromXYZ(sRGB.toXYZ(value));\n  lab[0] = lab[0] - amount * 10;\n  return sRGB.fromXYZ(CIELAB.toXYZ(lab));\n}\n/**\n * Calculate the relative luminance of a given color\n * @see https://www.w3.org/TR/WCAG20/#relativeluminancedef\n */\n\nexport function getLuma(color) {\n  const rgb = parseColor(color);\n  return sRGB.toXYZ(rgb)[1];\n}\n/**\n * Returns the contrast ratio (1-21) between two colors.\n * @see https://www.w3.org/TR/WCAG20/#contrast-ratiodef\n */\n\nexport function getContrast(first, second) {\n  const l1 = getLuma(first);\n  const l2 = getLuma(second);\n  const light = Math.max(l1, l2);\n  const dark = Math.min(l1, l2);\n  return (light + 0.05) / (dark + 0.05);\n}\nexport function getForeground(color) {\n  const blackContrast = Math.abs(APCAcontrast(parseColor(0), parseColor(color)));\n  const whiteContrast = Math.abs(APCAcontrast(parseColor(0xffffff), parseColor(color))); // TODO: warn about poor color selections\n  // const contrastAsText = Math.abs(APCAcontrast(colorVal, colorToInt(theme.colors.background)))\n  // const minContrast = Math.max(blackContrast, whiteContrast)\n  // if (minContrast < 60) {\n  //   consoleInfo(`${key} theme color ${color} has poor contrast (${minContrast.toFixed()}%)`)\n  // } else if (contrastAsText < 60 && !['background', 'surface'].includes(color)) {\n  //   consoleInfo(`${key} theme color ${color} has poor contrast as text (${contrastAsText.toFixed()}%)`)\n  // }\n  // Prefer white text if both have an acceptable contrast ratio\n\n  return whiteContrast > Math.min(blackContrast, 50) ? '#fff' : '#000';\n}","map":{"version":3,"mappings":"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","names":["APCAcontrast","consoleWarn","chunk","has","padEnd","CIELAB","sRGB","isCssColor","color","test","isParsableColor","cssColorRe","mappers","rgb","r","g","b","a","rgba","hsl","h","s","l","HSLtoRGB","hsla","hsv","v","HSVtoRGB","hsva","parseColor","isNaN","groups","match","fn","values","realValues","split","map","endsWith","includes","parseFloat","hex","startsWith","slice","length","char","join","int","parseInt","HexToRGB","HSLtoHSV","TypeError","String","constructor","name","RGBToInt","classToHex","colors","currentTheme","colorName","colorModifier","toString","trim","replace","hexColor","base","f","n","k","Math","max","min","round","RGBtoHSV","HSVtoHSL","sprime","RGBtoCSS","_ref","undefined","HSVtoCSS","toHex","substr","toUpperCase","RGBtoHex","_ref2","parseHex","c","HexToHSV","HSVtoHex","x","parseGradient","gradient","Object","lighten","value","amount","lab","fromXYZ","toXYZ","darken","getLuma","getContrast","first","second","l1","l2","light","dark","getForeground","blackContrast","abs","whiteContrast"],"sources":["../../src/util/colorUtils.ts"],"sourcesContent":["// Utilities\nimport { APCAcontrast } from './color/APCA'\nimport { consoleWarn } from './console'\nimport { chunk, has, padEnd } from './helpers'\nimport * as CIELAB from '@/util/color/transformCIELAB'\nimport * as sRGB from '@/util/color/transformSRGB'\n\n// Types\nimport type { Colors } from '@/composables/theme'\n\nexport type XYZ = [number, number, number]\nexport type LAB = [number, number, number]\nexport type HSV = { h: number, s: number, v: number, a?: number }\nexport type RGB = { r: number, g: number, b: number, a?: number }\nexport type HSL = { h: number, s: number, l: number, a?: number }\nexport type Hex = string & { __hexBrand: never }\nexport type Color = string | number | HSV | RGB | HSL\n\nexport function isCssColor (color?: string | null | false): boolean {\n  return !!color && /^(#|var\\(--|(rgb|hsl)a?\\()/.test(color)\n}\n\nexport function isParsableColor (color: string): boolean {\n  return isCssColor(color) && !/^((rgb|hsl)a?\\()?var\\(--/.test(color)\n}\n\nconst cssColorRe = /^(?<fn>(?:rgb|hsl)a?)\\((?<values>.+)\\)/\nconst mappers = {\n  rgb: (r: number, g: number, b: number, a?: number) => ({ r, g, b, a }),\n  rgba: (r: number, g: number, b: number, a?: number) => ({ r, g, b, a }),\n  hsl: (h: number, s: number, l: number, a?: number) => HSLtoRGB({ h, s, l, a }),\n  hsla: (h: number, s: number, l: number, a?: number) => HSLtoRGB({ h, s, l, a }),\n  hsv: (h: number, s: number, v: number, a?: number) => HSVtoRGB({ h, s, v, a }),\n  hsva: (h: number, s: number, v: number, a?: number) => HSVtoRGB({ h, s, v, a }),\n}\n\nexport function parseColor (color: Color): RGB {\n  if (typeof color === 'number') {\n    if (isNaN(color) || color < 0 || color > 0xFFFFFF) { // int can't have opacity\n      consoleWarn(`'${color}' is not a valid hex color`)\n    }\n\n    return {\n      r: (color & 0xFF0000) >> 16,\n      g: (color & 0xFF00) >> 8,\n      b: (color & 0xFF),\n    }\n  } else if (typeof color === 'string' && cssColorRe.test(color)) {\n    const { groups } = color.match(cssColorRe)!\n    const { fn, values } = groups as { fn: keyof typeof mappers, values: string }\n    const realValues = values.split(/,\\s*/)\n      .map(v => {\n        if (v.endsWith('%') && ['hsl', 'hsla', 'hsv', 'hsva'].includes(fn)) {\n          return parseFloat(v) / 100\n        } else {\n          return parseFloat(v)\n        }\n      }) as [number, number, number, number?]\n\n    return mappers[fn](...realValues)\n  } else if (typeof color === 'string') {\n    let hex = color.startsWith('#') ? color.slice(1) : color\n\n    if ([3, 4].includes(hex.length)) {\n      hex = hex.split('').map(char => char + char).join('')\n    } else if (![6, 8].includes(hex.length)) {\n      consoleWarn(`'${color}' is not a valid hex(a) color`)\n    }\n\n    const int = parseInt(hex, 16)\n    if (isNaN(int) || int < 0 || int > 0xFFFFFFFF) {\n      consoleWarn(`'${color}' is not a valid hex(a) color`)\n    }\n\n    return HexToRGB(hex as Hex)\n  } else if (typeof color === 'object') {\n    if (has(color, ['r', 'g', 'b'])) {\n      return color\n    } else if (has(color, ['h', 's', 'l'])) {\n      return HSVtoRGB(HSLtoHSV(color))\n    } else if (has(color, ['h', 's', 'v'])) {\n      return HSVtoRGB(color)\n    }\n  }\n\n  throw new TypeError(`Invalid color: ${color == null ? color : (String(color) || (color as any).constructor.name)}\\nExpected #hex, #hexa, rgb(), rgba(), hsl(), hsla(), object or number`)\n}\n\nexport function RGBToInt (color: RGB) {\n  return (color.r << 16) + (color.g << 8) + color.b\n}\n\nexport function classToHex (\n  color: string,\n  colors: Record<string, Record<string, string>>,\n  currentTheme: Partial<Colors>,\n): string {\n  const [colorName, colorModifier] = color\n    .toString().trim().replace('-', '').split(' ', 2) as (string | undefined)[]\n\n  let hexColor = ''\n  if (colorName && colorName in colors) {\n    if (colorModifier && colorModifier in colors[colorName]) {\n      hexColor = colors[colorName][colorModifier]\n    } else if ('base' in colors[colorName]) {\n      hexColor = colors[colorName].base\n    }\n  } else if (colorName && colorName in currentTheme) {\n    hexColor = currentTheme[colorName] as string\n  }\n\n  return hexColor\n}\n\n/** Converts HSVA to RGBA. Based on formula from https://en.wikipedia.org/wiki/HSL_and_HSV */\nexport function HSVtoRGB (hsva: HSV): RGB {\n  const { h, s, v, a } = hsva\n  const f = (n: number) => {\n    const k = (n + (h / 60)) % 6\n    return v - v * s * Math.max(Math.min(k, 4 - k, 1), 0)\n  }\n\n  const rgb = [f(5), f(3), f(1)].map(v => Math.round(v * 255))\n\n  return { r: rgb[0], g: rgb[1], b: rgb[2], a }\n}\n\nexport function HSLtoRGB (hsla: HSL): RGB {\n  return HSVtoRGB(HSLtoHSV(hsla))\n}\n\n/** Converts RGBA to HSVA. Based on formula from https://en.wikipedia.org/wiki/HSL_and_HSV */\nexport function RGBtoHSV (rgba: RGB): HSV {\n  if (!rgba) return { h: 0, s: 1, v: 1, a: 1 }\n\n  const r = rgba.r / 255\n  const g = rgba.g / 255\n  const b = rgba.b / 255\n  const max = Math.max(r, g, b)\n  const min = Math.min(r, g, b)\n\n  let h = 0\n\n  if (max !== min) {\n    if (max === r) {\n      h = 60 * (0 + ((g - b) / (max - min)))\n    } else if (max === g) {\n      h = 60 * (2 + ((b - r) / (max - min)))\n    } else if (max === b) {\n      h = 60 * (4 + ((r - g) / (max - min)))\n    }\n  }\n\n  if (h < 0) h = h + 360\n\n  const s = max === 0 ? 0 : (max - min) / max\n  const hsv = [h, s, max]\n\n  return { h: hsv[0], s: hsv[1], v: hsv[2], a: rgba.a }\n}\n\nexport function HSVtoHSL (hsva: HSV): HSL {\n  const { h, s, v, a } = hsva\n\n  const l = v - (v * s / 2)\n\n  const sprime = l === 1 || l === 0 ? 0 : (v - l) / Math.min(l, 1 - l)\n\n  return { h, s: sprime, l, a }\n}\n\nexport function HSLtoHSV (hsl: HSL): HSV {\n  const { h, s, l, a } = hsl\n\n  const v = l + s * Math.min(l, 1 - l)\n\n  const sprime = v === 0 ? 0 : 2 - (2 * l / v)\n\n  return { h, s: sprime, v, a }\n}\n\nexport function RGBtoCSS ({ r, g, b, a }: RGB): string {\n  return a === undefined ? `rgb(${r}, ${g}, ${b})` : `rgba(${r}, ${g}, ${b}, ${a})`\n}\n\nexport function HSVtoCSS (hsva: HSV): string {\n  return RGBtoCSS(HSVtoRGB(hsva))\n}\n\nfunction toHex (v: number) {\n  const h = Math.round(v).toString(16)\n  return ('00'.substr(0, 2 - h.length) + h).toUpperCase()\n}\n\nexport function RGBtoHex ({ r, g, b, a }: RGB): Hex {\n  return `#${[\n    toHex(r),\n    toHex(g),\n    toHex(b),\n    a !== undefined ? toHex(Math.round(a * 255)) : '',\n  ].join('')}` as Hex\n}\n\nexport function HexToRGB (hex: Hex): RGB {\n  hex = parseHex(hex)\n  let [r, g, b, a] = chunk(hex, 2).map((c: string) => parseInt(c, 16))\n  a = a === undefined ? a : (a / 255)\n\n  return { r, g, b, a }\n}\n\nexport function HexToHSV (hex: Hex): HSV {\n  const rgb = HexToRGB(hex)\n  return RGBtoHSV(rgb)\n}\n\nexport function HSVtoHex (hsva: HSV): Hex {\n  return RGBtoHex(HSVtoRGB(hsva))\n}\n\nexport function parseHex (hex: string): Hex {\n  if (hex.startsWith('#')) {\n    hex = hex.slice(1)\n  }\n\n  hex = hex.replace(/([^0-9a-f])/gi, 'F')\n\n  if (hex.length === 3 || hex.length === 4) {\n    hex = hex.split('').map(x => x + x).join('')\n  }\n\n  if (hex.length !== 6) {\n    hex = padEnd(padEnd(hex, 6), 8, 'F')\n  }\n\n  return hex as Hex\n}\n\nexport function parseGradient (\n  gradient: string,\n  colors: Record<string, Record<string, string>>,\n  currentTheme: Partial<Colors>,\n) {\n  return gradient.replace(/([a-z]+(\\s[a-z]+-[1-5])?)(?=$|,)/gi, x => {\n    return classToHex(x, colors, currentTheme) || x\n  }).replace(/(rgba\\()#[0-9a-f]+(?=,)/gi, x => {\n    return 'rgba(' + Object.values(HexToRGB(parseHex(x.replace(/rgba\\(/, '')))).slice(0, 3).join(',')\n  })\n}\n\nexport function lighten (value: RGB, amount: number): RGB {\n  const lab = CIELAB.fromXYZ(sRGB.toXYZ(value))\n  lab[0] = lab[0] + amount * 10\n\n  return sRGB.fromXYZ(CIELAB.toXYZ(lab))\n}\n\nexport function darken (value: RGB, amount: number): RGB {\n  const lab = CIELAB.fromXYZ(sRGB.toXYZ(value))\n  lab[0] = lab[0] - amount * 10\n\n  return sRGB.fromXYZ(CIELAB.toXYZ(lab))\n}\n\n/**\n * Calculate the relative luminance of a given color\n * @see https://www.w3.org/TR/WCAG20/#relativeluminancedef\n */\nexport function getLuma (color: Color) {\n  const rgb = parseColor(color)\n\n  return sRGB.toXYZ(rgb)[1]\n}\n\n/**\n * Returns the contrast ratio (1-21) between two colors.\n * @see https://www.w3.org/TR/WCAG20/#contrast-ratiodef\n */\nexport function getContrast (first: Color, second: Color) {\n  const l1 = getLuma(first)\n  const l2 = getLuma(second)\n\n  const light = Math.max(l1, l2)\n  const dark = Math.min(l1, l2)\n\n  return (light + 0.05) / (dark + 0.05)\n}\n\nexport function getForeground (color: Color) {\n  const blackContrast = Math.abs(APCAcontrast(parseColor(0), parseColor(color)))\n  const whiteContrast = Math.abs(APCAcontrast(parseColor(0xffffff), parseColor(color)))\n\n  // TODO: warn about poor color selections\n  // const contrastAsText = Math.abs(APCAcontrast(colorVal, colorToInt(theme.colors.background)))\n  // const minContrast = Math.max(blackContrast, whiteContrast)\n  // if (minContrast < 60) {\n  //   consoleInfo(`${key} theme color ${color} has poor contrast (${minContrast.toFixed()}%)`)\n  // } else if (contrastAsText < 60 && !['background', 'surface'].includes(color)) {\n  //   consoleInfo(`${key} theme color ${color} has poor contrast as text (${contrastAsText.toFixed()}%)`)\n  // }\n\n  // Prefer white text if both have an acceptable contrast ratio\n  return whiteContrast > Math.min(blackContrast, 50) ? '#fff' : '#000'\n}\n"]},"metadata":{},"sourceType":"module"}