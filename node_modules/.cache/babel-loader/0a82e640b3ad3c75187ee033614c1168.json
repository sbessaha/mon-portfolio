{"ast":null,"code":"import { createVNode as _createVNode } from \"vue\"; // Styles\n\nimport \"./VMessages.css\"; // Components\n\nimport { VSlideYTransition } from \"../transitions/index.mjs\"; // Composables\n\nimport { useTextColor } from \"../../composables/color.mjs\";\nimport { makeComponentProps } from \"../../composables/component.mjs\";\nimport { makeTransitionProps, MaybeTransition } from \"../../composables/transition.mjs\"; // Utilities\n\nimport { computed } from 'vue';\nimport { genericComponent, propsFactory, useRender, wrapInArray } from \"../../util/index.mjs\"; // Types\n\nexport const makeVMessagesProps = propsFactory({\n  active: Boolean,\n  color: String,\n  messages: {\n    type: [Array, String],\n    default: () => []\n  },\n  ...makeComponentProps(),\n  ...makeTransitionProps({\n    transition: {\n      component: VSlideYTransition,\n      leaveAbsolute: true,\n      group: true\n    }\n  })\n}, 'VMessages');\nexport const VMessages = genericComponent()({\n  name: 'VMessages',\n  props: makeVMessagesProps(),\n\n  setup(props, _ref) {\n    let {\n      slots\n    } = _ref;\n    const messages = computed(() => wrapInArray(props.messages));\n    const {\n      textColorClasses,\n      textColorStyles\n    } = useTextColor(computed(() => props.color));\n    useRender(() => _createVNode(MaybeTransition, {\n      \"transition\": props.transition,\n      \"tag\": \"div\",\n      \"class\": ['v-messages', textColorClasses.value, props.class],\n      \"style\": [textColorStyles.value, props.style]\n    }, {\n      default: () => [props.active && messages.value.map((message, i) => _createVNode(\"div\", {\n        \"class\": \"v-messages__message\",\n        \"key\": `${i}-${messages.value}`\n      }, [slots.message ? slots.message({\n        message\n      }) : message]))]\n    }));\n    return {};\n  }\n\n});","map":{"version":3,"mappings":"mDAAA;;AACA,yB,CAEA;;AAAA,SACSA,iBADT,QAC0B,0BAD1B,C,CAGA;;AAAA,SACSC,YADT,QACqB,6BADrB;AACqB,SACZC,kBADY,QACM,iCADN;AACM,SAClBC,mBADkB,EACGC,eADH,QACkB,kCADlB,C,CAG3B;;AACA,SAASC,QAAT,QAAyB,KAAzB;AAA8B,SACrBC,gBADqB,EACHC,YADG,EACWC,SADX,EACsBC,WADtB,QACiC,sBADjC,C,CAG9B;;AAWA,OAAO,MAAMC,kBAAkB,GAAGH,YAAY,CAAC;EAC7CI,MAAM,EAAEC,OADqC;EAE7CC,KAAK,EAAEC,MAFsC;EAG7CC,QAAQ,EAAE;IACRC,IAAI,EAAE,CAACC,KAAD,EAAQH,MAAR,CADE;IAERI,OAAO,EAAEA,MAAO;EAFR,CAHmC;EAQ7C,GAAGhB,kBAAkB,EARwB;EAS7C,GAAGC,mBAAmB,CAAC;IACrBgB,UAAU,EAAE;MACVC,SAAS,EAAEpB,iBADD;MAEVqB,aAAa,EAAE,IAFL;MAGVC,KAAK,EAAE;IAHG;EADS,CAAD;AATuB,CAAD,EAgB3C,WAhB2C,CAAvC;AAkBP,OAAO,MAAMC,SAAS,GAAGjB,gBAAgB,GAAmB;EAC1DkB,IAAI,EAAE,WADoD;EAG1DC,KAAK,EAAEf,kBAAkB,EAHiC;;EAK1DgB,KAAKA,CAAED,KAAFC,EAAOC,IAAPD,EAAoB;IAAA,IAAX;MAAEE;IAAF,IAASD,IAAE;IACvB,MAAMZ,QAAQ,GAAGV,QAAQ,CAAC,MAAMI,WAAW,CAACgB,KAAK,CAACV,QAAP,CAAlB,CAAzB;IACA,MAAM;MAAEc,gBAAF;MAAoBC;IAApB,IAAwC7B,YAAY,CAACI,QAAQ,CAAC,MAAMoB,KAAK,CAACZ,KAAb,CAAT,CAA1D;IAEAL,SAAS,CAAC;MAAA,cAEOiB,KAAK,CAACN,UAFb;MAEuB,YAFvB;MAEuB,SAEtB,CACL,YADK,EAELU,gBAAgB,CAACE,KAFZ,EAGLN,KAAK,CAACO,KAHD,CAJD;MAQL,SACM,CACLF,eAAe,CAACC,KADX,EAELN,KAAK,CAACQ,KAFD;IATD,GAYL;MAAAf,gBAECO,KAAK,CAACd,MAANc,IACAV,QAAQ,CAACgB,KAAThB,CAAemB,GAAfnB,CAAmB,CAACoB,OAAD,EAAUC,CAAV,KAAWC;QAAA;QAAA,OAGpB,GAAGD,CAAC,IAAIrB,QAAQ,CAACgB,KAAK;MAHF,GAGI,CAE5BH,KAAK,CAACO,OAANP,GAAgBA,KAAK,CAACO,OAANP,CAAc;QAAEO;MAAF,CAAdP,CAAhBA,GAA6CO,OAFjB,CAHJ,CAA9BpB,CAHD;IAAA,CAZK,CAAD,CAATP;IA2BA,OAAO,EAAP;EACF;;AArC0D,CAAnB,CAAlC","names":["VSlideYTransition","useTextColor","makeComponentProps","makeTransitionProps","MaybeTransition","computed","genericComponent","propsFactory","useRender","wrapInArray","makeVMessagesProps","active","Boolean","color","String","messages","type","Array","default","transition","component","leaveAbsolute","group","VMessages","name","props","setup","_ref","slots","textColorClasses","textColorStyles","value","class","style","map","message","i","_createVNode"],"sources":["../../../src/components/VMessages/VMessages.tsx"],"sourcesContent":["// Styles\nimport './VMessages.sass'\n\n// Components\nimport { VSlideYTransition } from '@/components/transitions'\n\n// Composables\nimport { useTextColor } from '@/composables/color'\nimport { makeComponentProps } from '@/composables/component'\nimport { makeTransitionProps, MaybeTransition } from '@/composables/transition'\n\n// Utilities\nimport { computed } from 'vue'\nimport { genericComponent, propsFactory, useRender, wrapInArray } from '@/util'\n\n// Types\nimport type { Component, PropType } from 'vue'\n\nexport type VMessageSlot = {\n  message: string\n}\n\nexport type VMessagesSlots = {\n  message: VMessageSlot\n}\n\nexport const makeVMessagesProps = propsFactory({\n  active: Boolean,\n  color: String,\n  messages: {\n    type: [Array, String] as PropType<string | readonly string[]>,\n    default: () => ([]),\n  },\n\n  ...makeComponentProps(),\n  ...makeTransitionProps({\n    transition: {\n      component: VSlideYTransition as Component,\n      leaveAbsolute: true,\n      group: true,\n    },\n  }),\n}, 'VMessages')\n\nexport const VMessages = genericComponent<VMessagesSlots>()({\n  name: 'VMessages',\n\n  props: makeVMessagesProps(),\n\n  setup (props, { slots }) {\n    const messages = computed(() => wrapInArray(props.messages))\n    const { textColorClasses, textColorStyles } = useTextColor(computed(() => props.color))\n\n    useRender(() => (\n      <MaybeTransition\n        transition={ props.transition }\n        tag=\"div\"\n        class={[\n          'v-messages',\n          textColorClasses.value,\n          props.class,\n        ]}\n        style={[\n          textColorStyles.value,\n          props.style,\n        ]}\n      >\n        { props.active && (\n          messages.value.map((message, i) => (\n            <div\n              class=\"v-messages__message\"\n              key={ `${i}-${messages.value}` }\n            >\n              { slots.message ? slots.message({ message }) : message }\n            </div>\n          ))\n        )}\n      </MaybeTransition>\n    ))\n\n    return {}\n  },\n})\n\nexport type VMessages = InstanceType<typeof VMessages>\n"]},"metadata":{},"sourceType":"module"}