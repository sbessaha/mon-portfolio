{"ast":null,"code":"import { createVNode as _createVNode } from \"vue\"; // Styles\n\nimport \"./VIcon.css\"; // Composables\n\nimport { useTextColor } from \"../../composables/color.mjs\";\nimport { makeComponentProps } from \"../../composables/component.mjs\";\nimport { IconValue, useIcon } from \"../../composables/icons.mjs\";\nimport { makeSizeProps, useSize } from \"../../composables/size.mjs\";\nimport { makeTagProps } from \"../../composables/tag.mjs\";\nimport { makeThemeProps, provideTheme } from \"../../composables/theme.mjs\"; // Utilities\n\nimport { computed, ref, Text, toRef } from 'vue';\nimport { convertToUnit, flattenFragments, genericComponent, propsFactory, useRender } from \"../../util/index.mjs\";\nexport const makeVIconProps = propsFactory({\n  color: String,\n  disabled: Boolean,\n  start: Boolean,\n  end: Boolean,\n  icon: IconValue,\n  ...makeComponentProps(),\n  ...makeSizeProps(),\n  ...makeTagProps({\n    tag: 'i'\n  }),\n  ...makeThemeProps()\n}, 'VIcon');\nexport const VIcon = genericComponent()({\n  name: 'VIcon',\n  props: makeVIconProps(),\n\n  setup(props, _ref) {\n    let {\n      attrs,\n      slots\n    } = _ref;\n    const slotIcon = ref();\n    const {\n      themeClasses\n    } = provideTheme(props);\n    const {\n      iconData\n    } = useIcon(computed(() => slotIcon.value || props.icon));\n    const {\n      sizeClasses\n    } = useSize(props);\n    const {\n      textColorClasses,\n      textColorStyles\n    } = useTextColor(toRef(props, 'color'));\n    useRender(() => {\n      const slotValue = slots.default?.();\n\n      if (slotValue) {\n        slotIcon.value = flattenFragments(slotValue).filter(node => node.type === Text && node.children && typeof node.children === 'string')[0]?.children;\n      }\n\n      const hasClick = !!(attrs.onClick || attrs.onClickOnce);\n      return _createVNode(iconData.value.component, {\n        \"tag\": props.tag,\n        \"icon\": iconData.value.icon,\n        \"class\": ['v-icon', 'notranslate', themeClasses.value, sizeClasses.value, textColorClasses.value, {\n          'v-icon--clickable': hasClick,\n          'v-icon--disabled': props.disabled,\n          'v-icon--start': props.start,\n          'v-icon--end': props.end\n        }, props.class],\n        \"style\": [!sizeClasses.value ? {\n          fontSize: convertToUnit(props.size),\n          height: convertToUnit(props.size),\n          width: convertToUnit(props.size)\n        } : undefined, textColorStyles.value, props.style],\n        \"role\": hasClick ? 'button' : undefined,\n        \"aria-hidden\": !hasClick,\n        \"tabindex\": hasClick ? props.disabled ? -1 : 0 : undefined\n      }, {\n        default: () => [slotValue]\n      });\n    });\n    return {};\n  }\n\n});","map":{"version":3,"mappings":"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","names":["useTextColor","makeComponentProps","IconValue","useIcon","makeSizeProps","useSize","makeTagProps","makeThemeProps","provideTheme","computed","ref","Text","toRef","convertToUnit","flattenFragments","genericComponent","propsFactory","useRender","makeVIconProps","color","String","disabled","Boolean","start","end","icon","tag","VIcon","name","props","setup","_ref","attrs","slots","slotIcon","themeClasses","iconData","value","sizeClasses","textColorClasses","textColorStyles","slotValue","default","filter","node","type","children","hasClick","onClick","onClickOnce","class","fontSize","size","height","width","undefined","style"],"sources":["../../../src/components/VIcon/VIcon.tsx"],"sourcesContent":["// Styles\nimport './VIcon.sass'\n\n// Composables\nimport { useTextColor } from '@/composables/color'\nimport { makeComponentProps } from '@/composables/component'\nimport { IconValue, useIcon } from '@/composables/icons'\nimport { makeSizeProps, useSize } from '@/composables/size'\nimport { makeTagProps } from '@/composables/tag'\nimport { makeThemeProps, provideTheme } from '@/composables/theme'\n\n// Utilities\nimport { computed, ref, Text, toRef } from 'vue'\nimport { convertToUnit, flattenFragments, genericComponent, propsFactory, useRender } from '@/util'\n\nexport const makeVIconProps = propsFactory({\n  color: String,\n  disabled: Boolean,\n  start: Boolean,\n  end: Boolean,\n  icon: IconValue,\n\n  ...makeComponentProps(),\n  ...makeSizeProps(),\n  ...makeTagProps({ tag: 'i' }),\n  ...makeThemeProps(),\n}, 'VIcon')\n\nexport const VIcon = genericComponent()({\n  name: 'VIcon',\n\n  props: makeVIconProps(),\n\n  setup (props, { attrs, slots }) {\n    const slotIcon = ref<string>()\n\n    const { themeClasses } = provideTheme(props)\n    const { iconData } = useIcon(computed(() => slotIcon.value || props.icon))\n    const { sizeClasses } = useSize(props)\n    const { textColorClasses, textColorStyles } = useTextColor(toRef(props, 'color'))\n\n    useRender(() => {\n      const slotValue = slots.default?.()\n      if (slotValue) {\n        slotIcon.value = flattenFragments(slotValue).filter(node =>\n          node.type === Text && node.children && typeof node.children === 'string'\n        )[0]?.children as string\n      }\n      const hasClick = !!(attrs.onClick || attrs.onClickOnce)\n\n      return (\n        <iconData.value.component\n          tag={ props.tag }\n          icon={ iconData.value.icon }\n          class={[\n            'v-icon',\n            'notranslate',\n            themeClasses.value,\n            sizeClasses.value,\n            textColorClasses.value,\n            {\n              'v-icon--clickable': hasClick,\n              'v-icon--disabled': props.disabled,\n              'v-icon--start': props.start,\n              'v-icon--end': props.end,\n            },\n            props.class,\n          ]}\n          style={[\n            !sizeClasses.value ? ({\n              fontSize: convertToUnit(props.size),\n              height: convertToUnit(props.size),\n              width: convertToUnit(props.size),\n            }) : undefined,\n            textColorStyles.value,\n            props.style,\n          ]}\n          role={ hasClick ? 'button' : undefined }\n          aria-hidden={ !hasClick }\n          tabindex={ hasClick ? props.disabled ? -1 : 0 : undefined }\n        >\n          { slotValue }\n        </iconData.value.component>\n      )\n    })\n\n    return {}\n  },\n})\n\nexport type VIcon = InstanceType<typeof VIcon>\n"]},"metadata":{},"sourceType":"module"}