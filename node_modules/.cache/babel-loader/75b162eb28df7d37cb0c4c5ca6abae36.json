{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport { createVNode as _createVNode } from \"vue\"; // Styles\n\nimport \"./VSliderTrack.css\"; // Components\n\nimport { VSliderSymbol } from \"./slider.mjs\"; // Composables\n\nimport { useBackgroundColor } from \"../../composables/color.mjs\";\nimport { useRounded } from \"../../composables/rounded.mjs\"; // Utilities\n\nimport { computed, inject } from 'vue';\nimport { convertToUnit, defineComponent, useRender } from \"../../util/index.mjs\";\nexport const VSliderTrack = defineComponent({\n  name: 'VSliderTrack',\n  props: {\n    start: {\n      type: Number,\n      required: true\n    },\n    stop: {\n      type: Number,\n      required: true\n    }\n  },\n  emits: {},\n\n  setup(props, _ref) {\n    let {\n      slots\n    } = _ref;\n    const slider = inject(VSliderSymbol);\n    if (!slider) throw new Error('[Vuetify] v-slider-track must be inside v-slider or v-range-slider');\n    const {\n      color,\n      horizontalDirection,\n      parsedTicks,\n      rounded,\n      showTicks,\n      tickSize,\n      trackColor,\n      trackFillColor,\n      trackSize,\n      vertical\n    } = slider;\n    const {\n      roundedClasses\n    } = useRounded(rounded);\n    const {\n      backgroundColorClasses: trackFillColorClasses,\n      backgroundColorStyles: trackFillColorStyles\n    } = useBackgroundColor(trackFillColor);\n    const {\n      backgroundColorClasses: trackColorClasses,\n      backgroundColorStyles: trackColorStyles\n    } = useBackgroundColor(trackColor);\n    const startDir = computed(() => `inset-${vertical.value ? 'block-end' : 'inline-start'}`);\n    const endDir = computed(() => vertical.value ? 'height' : 'width');\n    const backgroundStyles = computed(() => {\n      return {\n        [startDir.value]: '0%',\n        [endDir.value]: '100%'\n      };\n    });\n    const trackFillWidth = computed(() => props.stop - props.start);\n    const trackFillStyles = computed(() => {\n      return {\n        [startDir.value]: convertToUnit(props.start, '%'),\n        [endDir.value]: convertToUnit(trackFillWidth.value, '%')\n      };\n    });\n    const computedTicks = computed(() => {\n      const ticks = vertical.value ? parsedTicks.value.slice().reverse() : parsedTicks.value;\n      return ticks.map((tick, index) => {\n        var _slots$tickLabel;\n\n        const directionProperty = vertical.value ? 'bottom' : 'margin-inline-start';\n        const directionValue = tick.position > 0 && tick.position < 100 ? convertToUnit(tick.position, '%') : undefined;\n        return _createVNode(\"div\", {\n          \"key\": tick.value,\n          \"class\": ['v-slider-track__tick', {\n            'v-slider-track__tick--filled': tick.position >= props.start && tick.position <= props.stop\n          }],\n          \"style\": {\n            [directionProperty]: directionValue\n          }\n        }, [(tick.label || slots['tick-label']) && _createVNode(\"div\", {\n          \"class\": \"v-slider-track__tick-label\"\n        }, [((_slots$tickLabel = slots['tick-label']) == null ? void 0 : _slots$tickLabel.call(slots, {\n          tick,\n          index\n        })) ?? tick.label])]);\n      });\n    });\n    useRender(() => {\n      return _createVNode(\"div\", {\n        \"class\": ['v-slider-track', roundedClasses.value],\n        \"style\": {\n          '--v-slider-track-size': convertToUnit(trackSize.value),\n          '--v-slider-tick-size': convertToUnit(tickSize.value),\n          direction: !vertical.value ? horizontalDirection.value : undefined\n        }\n      }, [_createVNode(\"div\", {\n        \"class\": ['v-slider-track__background', trackColorClasses.value, {\n          'v-slider-track__background--opacity': !!color.value || !trackFillColor.value\n        }],\n        \"style\": { ...backgroundStyles.value,\n          ...trackColorStyles.value\n        }\n      }, null), _createVNode(\"div\", {\n        \"class\": ['v-slider-track__fill', trackFillColorClasses.value],\n        \"style\": { ...trackFillStyles.value,\n          ...trackFillColorStyles.value\n        }\n      }, null), showTicks.value && _createVNode(\"div\", {\n        \"class\": ['v-slider-track__ticks', {\n          'v-slider-track__ticks--always-show': showTicks.value === 'always'\n        }]\n      }, [computedTicks.value])]);\n    });\n    return {};\n  }\n\n});","map":{"version":3,"mappings":"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","names":["VSliderSymbol","useBackgroundColor","useRounded","computed","inject","convertToUnit","defineComponent","useRender","VSliderTrack","name","props","start","type","Number","required","stop","emits","setup","slots","_ref","slider","Error","color","horizontalDirection","parsedTicks","rounded","showTicks","tickSize","trackColor","trackFillColor","trackSize","vertical","roundedClasses","backgroundColorClasses","trackFillColorClasses","backgroundColorStyles","trackFillColorStyles","trackColorClasses","trackColorStyles","startDir","value","endDir","backgroundStyles","trackFillWidth","trackFillStyles","computedTicks","ticks","slice","reverse","map","tick","index","directionProperty","directionValue","position","undefined","label","direction"],"sources":["../../../src/components/VSlider/VSliderTrack.tsx"],"sourcesContent":["// Styles\nimport './VSliderTrack.sass'\n\n// Components\nimport { VSliderSymbol } from './slider'\n\n// Composables\nimport { useBackgroundColor } from '@/composables/color'\nimport { useRounded } from '@/composables/rounded'\n\n// Utilities\nimport { computed, inject } from 'vue'\nimport { convertToUnit, defineComponent, useRender } from '@/util'\n\nexport const VSliderTrack = defineComponent({\n  name: 'VSliderTrack',\n\n  props: {\n    start: {\n      type: Number,\n      required: true,\n    },\n    stop: {\n      type: Number,\n      required: true,\n    },\n  },\n\n  emits: {},\n\n  setup (props, { slots }) {\n    const slider = inject(VSliderSymbol)\n\n    if (!slider) throw new Error('[Vuetify] v-slider-track must be inside v-slider or v-range-slider')\n\n    const {\n      color,\n      horizontalDirection,\n      parsedTicks,\n      rounded,\n      showTicks,\n      tickSize,\n      trackColor,\n      trackFillColor,\n      trackSize,\n      vertical,\n    } = slider\n\n    const { roundedClasses } = useRounded(rounded)\n\n    const {\n      backgroundColorClasses: trackFillColorClasses,\n      backgroundColorStyles: trackFillColorStyles,\n    } = useBackgroundColor(trackFillColor)\n\n    const {\n      backgroundColorClasses: trackColorClasses,\n      backgroundColorStyles: trackColorStyles,\n    } = useBackgroundColor(trackColor)\n\n    const startDir = computed(() => `inset-${vertical.value ? 'block-end' : 'inline-start'}`)\n    const endDir = computed(() => vertical.value ? 'height' : 'width')\n\n    const backgroundStyles = computed(() => {\n      return {\n        [startDir.value]: '0%',\n        [endDir.value]: '100%',\n      }\n    })\n\n    const trackFillWidth = computed(() => props.stop - props.start)\n\n    const trackFillStyles = computed(() => {\n      return {\n        [startDir.value]: convertToUnit(props.start, '%'),\n        [endDir.value]: convertToUnit(trackFillWidth.value, '%'),\n      }\n    })\n\n    const computedTicks = computed(() => {\n      const ticks = vertical.value ? parsedTicks.value.slice().reverse() : parsedTicks.value\n\n      return ticks.map((tick, index) => {\n        const directionProperty = vertical.value ? 'bottom' : 'margin-inline-start'\n        const directionValue = (tick.position > 0 && tick.position < 100) ? convertToUnit(tick.position, '%') : undefined\n        return (\n          <div\n            key={ tick.value }\n            class={[\n              'v-slider-track__tick',\n              {\n                'v-slider-track__tick--filled': tick.position >= props.start && tick.position <= props.stop,\n              },\n            ]}\n            style={{ [directionProperty]: directionValue }}\n          >\n            {\n              (tick.label || slots['tick-label']) && (\n                <div class=\"v-slider-track__tick-label\">\n                  { slots['tick-label']?.({ tick, index }) ?? tick.label }\n                </div>\n              )\n            }\n          </div>\n        )\n      })\n    })\n\n    useRender(() => {\n      return (\n        <div\n          class={[\n            'v-slider-track',\n            roundedClasses.value,\n          ]}\n          style={{\n            '--v-slider-track-size': convertToUnit(trackSize.value),\n            '--v-slider-tick-size': convertToUnit(tickSize.value),\n            direction: !vertical.value ? horizontalDirection.value : undefined,\n          }}\n        >\n          <div\n            class={[\n              'v-slider-track__background',\n              trackColorClasses.value,\n              {\n                'v-slider-track__background--opacity': !!color.value || !trackFillColor.value,\n              },\n            ]}\n            style={{\n              ...backgroundStyles.value,\n              ...trackColorStyles.value,\n            }}\n          />\n          <div\n            class={[\n              'v-slider-track__fill',\n              trackFillColorClasses.value,\n            ]}\n            style={{\n              ...trackFillStyles.value,\n              ...trackFillColorStyles.value,\n            }}\n          />\n\n          { showTicks.value && (\n            <div\n              class={[\n                'v-slider-track__ticks',\n                {\n                  'v-slider-track__ticks--always-show': showTicks.value === 'always',\n                },\n              ]}\n            >\n              { computedTicks.value }\n            </div>\n          ) }\n        </div>\n      )\n    })\n\n    return {}\n  },\n})\n\nexport type VSliderTrack = InstanceType<typeof VSliderTrack>\n"]},"metadata":{},"sourceType":"module"}