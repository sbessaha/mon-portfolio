{"ast":null,"code":"// Utilities\nimport { computed, inject, provide, ref, watch } from 'vue';\nimport { useProxiedModel } from \"./proxiedModel.mjs\";\nimport { consoleWarn, propsFactory } from \"../util/index.mjs\"; // Types\n\nexport const FormKey = Symbol.for('vuetify:form');\nexport const makeFormProps = propsFactory({\n  disabled: Boolean,\n  fastFail: Boolean,\n  lazyValidation: Boolean,\n  readonly: Boolean,\n  modelValue: {\n    type: Boolean,\n    default: null\n  }\n});\nexport function createForm(props) {\n  const model = useProxiedModel(props, 'modelValue');\n  const isDisabled = computed(() => props.disabled);\n  const isReadonly = computed(() => props.readonly);\n  const isValidating = ref(false);\n  const items = ref([]);\n  const errors = ref([]);\n\n  async function validate() {\n    const results = [];\n    let valid = true;\n    errors.value = [];\n    isValidating.value = true;\n\n    for (const item of items.value) {\n      const itemErrorMessages = await item.validate();\n\n      if (itemErrorMessages.length > 0) {\n        valid = false;\n        results.push({\n          id: item.id,\n          errorMessages: itemErrorMessages\n        });\n      }\n\n      if (!valid && props.fastFail) break;\n    }\n\n    errors.value = results;\n    isValidating.value = false;\n    return {\n      valid,\n      errors: errors.value\n    };\n  }\n\n  function reset() {\n    items.value.forEach(item => item.reset());\n    model.value = null;\n  }\n\n  function resetValidation() {\n    items.value.forEach(item => item.resetValidation());\n    errors.value = [];\n    model.value = null;\n  }\n\n  watch(items, () => {\n    let valid = 0;\n    let invalid = 0;\n    const results = [];\n\n    for (const item of items.value) {\n      if (item.isValid === false) {\n        invalid++;\n        results.push({\n          id: item.id,\n          errorMessages: item.errorMessages\n        });\n      } else if (item.isValid === true) valid++;\n    }\n\n    errors.value = results;\n    model.value = invalid > 0 ? false : valid === items.value.length ? true : null;\n  }, {\n    deep: true\n  });\n  provide(FormKey, {\n    register: _ref => {\n      let {\n        id,\n        validate,\n        reset,\n        resetValidation\n      } = _ref;\n\n      if (items.value.some(item => item.id === id)) {\n        consoleWarn(`Duplicate input name \"${id}\"`);\n      }\n\n      items.value.push({\n        id,\n        validate,\n        reset,\n        resetValidation,\n        isValid: null,\n        errorMessages: []\n      });\n    },\n    unregister: id => {\n      items.value = items.value.filter(item => {\n        return item.id !== id;\n      });\n    },\n    update: (id, isValid, errorMessages) => {\n      const found = items.value.find(item => item.id === id);\n      if (!found) return;\n      found.isValid = isValid;\n      found.errorMessages = errorMessages;\n    },\n    isDisabled,\n    isReadonly,\n    isValidating,\n    items\n  });\n  return {\n    errors,\n    isDisabled,\n    isReadonly,\n    isValidating,\n    items,\n    validate,\n    reset,\n    resetValidation\n  };\n}\nexport function useForm() {\n  return inject(FormKey, null);\n}","map":{"version":3,"mappings":"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","names":["computed","inject","provide","ref","watch","useProxiedModel","consoleWarn","propsFactory","FormKey","Symbol","for","makeFormProps","disabled","Boolean","fastFail","lazyValidation","readonly","modelValue","type","default","createForm","props","model","isDisabled","isReadonly","isValidating","items","errors","validate","results","valid","value","item","itemErrorMessages","length","push","id","errorMessages","reset","forEach","resetValidation","invalid","isValid","deep","register","_ref","some","unregister","filter","update","found","find","useForm"],"sources":["../../src/composables/form.ts"],"sourcesContent":["// Utilities\nimport { computed, inject, provide, ref, watch } from 'vue'\nimport { useProxiedModel } from '@/composables/proxiedModel'\nimport { consoleWarn, propsFactory } from '@/util'\n\n// Types\nimport type { ComputedRef, InjectionKey, PropType, Ref } from 'vue'\n\nexport interface FormProvide {\n  register: (item: {\n    id: number | string\n    validate: () => Promise<string[]>\n    reset: () => void\n    resetValidation: () => void\n  }) => void\n  unregister: (id: number | string) => void\n  update: (id: number | string, isValid: boolean | null, errorMessages: string[]) => void\n  items: Ref<FormField[]>\n  isDisabled: ComputedRef<boolean>\n  isReadonly: ComputedRef<boolean>\n  isValidating: Ref<boolean>\n}\n\ninterface FormField {\n  id: number | string\n  validate: () => Promise<string[]>\n  reset: () => void\n  resetValidation: () => void\n  isValid: boolean | null\n  errorMessages: string[]\n}\n\ninterface FieldValidationResult {\n  id: number | string\n  errorMessages: string[]\n}\n\ninterface FormValidationResult {\n  valid: boolean\n  errors: FieldValidationResult[]\n}\n\nexport interface SubmitEventPromise extends SubmitEvent, Promise<FormValidationResult> {}\n\nexport const FormKey: InjectionKey<FormProvide> = Symbol.for('vuetify:form')\n\nexport interface FormProps {\n  disabled: boolean\n  fastFail: boolean\n  lazyValidation: boolean\n  readonly: boolean\n  modelValue: boolean | null\n  'onUpdate:modelValue': ((val: boolean | null) => void) | undefined\n}\n\nexport const makeFormProps = propsFactory({\n  disabled: Boolean,\n  fastFail: Boolean,\n  lazyValidation: Boolean,\n  readonly: Boolean,\n  modelValue: {\n    type: Boolean as PropType<boolean | null>,\n    default: null,\n  },\n})\n\nexport function createForm (props: FormProps) {\n  const model = useProxiedModel(props, 'modelValue')\n\n  const isDisabled = computed(() => props.disabled)\n  const isReadonly = computed(() => props.readonly)\n  const isValidating = ref(false)\n  const items = ref<FormField[]>([])\n  const errors = ref<FieldValidationResult[]>([])\n\n  async function validate () {\n    const results = []\n    let valid = true\n\n    errors.value = []\n    isValidating.value = true\n\n    for (const item of items.value) {\n      const itemErrorMessages = await item.validate()\n\n      if (itemErrorMessages.length > 0) {\n        valid = false\n\n        results.push({\n          id: item.id,\n          errorMessages: itemErrorMessages,\n        })\n      }\n\n      if (!valid && props.fastFail) break\n    }\n\n    errors.value = results\n    isValidating.value = false\n\n    return { valid, errors: errors.value }\n  }\n\n  function reset () {\n    items.value.forEach(item => item.reset())\n    model.value = null\n  }\n\n  function resetValidation () {\n    items.value.forEach(item => item.resetValidation())\n    errors.value = []\n    model.value = null\n  }\n\n  watch(items, () => {\n    let valid = 0\n    let invalid = 0\n    const results = []\n\n    for (const item of items.value) {\n      if (item.isValid === false) {\n        invalid++\n        results.push({\n          id: item.id,\n          errorMessages: item.errorMessages,\n        })\n      } else if (item.isValid === true) valid++\n    }\n\n    errors.value = results\n    model.value =\n      invalid > 0 ? false\n      : valid === items.value.length ? true\n      : null\n  }, { deep: true })\n\n  provide(FormKey, {\n    register: ({ id, validate, reset, resetValidation }) => {\n      if (items.value.some(item => item.id === id)) {\n        consoleWarn(`Duplicate input name \"${id}\"`)\n      }\n\n      items.value.push({\n        id,\n        validate,\n        reset,\n        resetValidation,\n        isValid: null,\n        errorMessages: [],\n      })\n    },\n    unregister: id => {\n      items.value = items.value.filter(item => {\n        return item.id !== id\n      })\n    },\n    update: (id, isValid, errorMessages) => {\n      const found = items.value.find(item => item.id === id)\n\n      if (!found) return\n\n      found.isValid = isValid\n      found.errorMessages = errorMessages\n    },\n    isDisabled,\n    isReadonly,\n    isValidating,\n    items,\n  })\n\n  return {\n    errors,\n    isDisabled,\n    isReadonly,\n    isValidating,\n    items,\n    validate,\n    reset,\n    resetValidation,\n  }\n}\n\nexport function useForm () {\n  return inject(FormKey, null)\n}\n"]},"metadata":{},"sourceType":"module"}