{"ast":null,"code":"/* eslint-disable sonarjs/no-identical-functions */\n// Utilities\nimport { toRaw } from 'vue';\nimport { wrapInArray } from \"../../util/index.mjs\";\nexport const independentActiveStrategy = mandatory => {\n  const strategy = {\n    activate: _ref => {\n      let {\n        id,\n        value,\n        activated\n      } = _ref;\n      id = toRaw(id); // When mandatory and we're trying to deselect when id\n      // is the only currently selected item then do nothing\n\n      if (mandatory && !value && activated.size === 1 && activated.has(id)) return activated;\n\n      if (value) {\n        activated.add(id);\n      } else {\n        activated.delete(id);\n      }\n\n      return activated;\n    },\n    in: (v, children, parents) => {\n      let set = new Set();\n\n      if (v != null) {\n        for (const id of wrapInArray(v)) {\n          set = strategy.activate({\n            id,\n            value: true,\n            activated: new Set(set),\n            children,\n            parents\n          });\n        }\n      }\n\n      return set;\n    },\n    out: v => {\n      return Array.from(v);\n    }\n  };\n  return strategy;\n};\nexport const independentSingleActiveStrategy = mandatory => {\n  const parentStrategy = independentActiveStrategy(mandatory);\n  const strategy = {\n    activate: _ref2 => {\n      let {\n        activated,\n        id,\n        ...rest\n      } = _ref2;\n      id = toRaw(id);\n      const singleSelected = activated.has(id) ? new Set([id]) : new Set();\n      return parentStrategy.activate({ ...rest,\n        id,\n        activated: singleSelected\n      });\n    },\n    in: (v, children, parents) => {\n      let set = new Set();\n\n      if (v != null) {\n        const arr = wrapInArray(v);\n\n        if (arr.length) {\n          set = parentStrategy.in(arr.slice(0, 1), children, parents);\n        }\n      }\n\n      return set;\n    },\n    out: (v, children, parents) => {\n      return parentStrategy.out(v, children, parents);\n    }\n  };\n  return strategy;\n};\nexport const leafActiveStrategy = mandatory => {\n  const parentStrategy = independentActiveStrategy(mandatory);\n  const strategy = {\n    activate: _ref3 => {\n      let {\n        id,\n        activated,\n        children,\n        ...rest\n      } = _ref3;\n      id = toRaw(id);\n      if (children.has(id)) return activated;\n      return parentStrategy.activate({\n        id,\n        activated,\n        children,\n        ...rest\n      });\n    },\n    in: parentStrategy.in,\n    out: parentStrategy.out\n  };\n  return strategy;\n};\nexport const leafSingleActiveStrategy = mandatory => {\n  const parentStrategy = independentSingleActiveStrategy(mandatory);\n  const strategy = {\n    activate: _ref4 => {\n      let {\n        id,\n        activated,\n        children,\n        ...rest\n      } = _ref4;\n      id = toRaw(id);\n      if (children.has(id)) return activated;\n      return parentStrategy.activate({\n        id,\n        activated,\n        children,\n        ...rest\n      });\n    },\n    in: parentStrategy.in,\n    out: parentStrategy.out\n  };\n  return strategy;\n};","map":{"version":3,"mappings":"AAAA;AACA;AACA,SAASA,KAAT,QAAsB,KAAtB;AAA2B,SAClBC,WADkB,QACP,sBADO;AA8B3B,OAAO,MAAMC,yBAAyB,GAAIC,SAAmB,IAAqB;EAChF,MAAMC,QAAwB,GAAG;IAC/BC,QAAQ,EAAEC,QAA8B;MAAA,IAA7B;QAAEC,EAAF;QAAMC,KAAN;QAAaC;MAAb,IAAwBH,IAAK;MACtCC,EAAE,GAAGP,KAAK,CAACO,EAAD,CAAVA,CADsC,CAGtC;MACA;;MACA,IAAIJ,SAAS,IAAI,CAACK,KAAdL,IAAuBM,SAAS,CAACC,IAAVD,KAAmB,CAA1CN,IAA+CM,SAAS,CAACE,GAAVF,CAAcF,EAAdE,CAAnD,EAAsE,OAAOA,SAAP;;MAEtE,IAAID,KAAJ,EAAW;QACTC,SAAS,CAACG,GAAVH,CAAcF,EAAdE;MACD,CAFD,MAEO;QACLA,SAAS,CAACI,MAAVJ,CAAiBF,EAAjBE;MACF;;MAEA,OAAOA,SAAP;IACD,CAf8B;IAgB/BK,EAAE,EAAEA,CAACC,CAADD,EAAIE,QAAJF,EAAcG,OAAdH,KAA0B;MAC5B,IAAII,GAAG,GAAG,IAAIC,GAAJ,EAAV;;MAEA,IAAIJ,CAAC,IAAI,IAAT,EAAe;QACb,KAAK,MAAMR,EAAX,IAAiBN,WAAW,CAACc,CAAD,CAA5B,EAAiC;UAC/BG,GAAG,GAAGd,QAAQ,CAACC,QAATD,CAAkB;YACtBG,EADsB;YAEtBC,KAAK,EAAE,IAFe;YAGtBC,SAAS,EAAE,IAAIU,GAAJ,CAAQD,GAAR,CAHW;YAItBF,QAJsB;YAKtBC;UALsB,CAAlBb,CAANc;QAOF;MACF;;MAEA,OAAOA,GAAP;IACD,CAhC8B;IAiC/BE,GAAG,EAAEL,CAAC,IAAI;MACR,OAAOM,KAAK,CAACC,IAAND,CAAWN,CAAXM,CAAP;IACF;EAnC+B,CAAjC;EAsCA,OAAOjB,QAAP;AACD,CAxCM;AA0CP,OAAO,MAAMmB,+BAA+B,GAAIpB,SAAmB,IAAqB;EACtF,MAAMqB,cAAc,GAAGtB,yBAAyB,CAACC,SAAD,CAAhD;EAEA,MAAMC,QAAwB,GAAG;IAC/BC,QAAQ,EAAEoB,SAAgC;MAAA,IAA/B;QAAEhB,SAAF;QAAaF,EAAb;QAAiB,GAAGmB;MAApB,IAA0BD,KAAK;MACxClB,EAAE,GAAGP,KAAK,CAACO,EAAD,CAAVA;MACA,MAAMoB,cAAc,GAAGlB,SAAS,CAACE,GAAVF,CAAcF,EAAdE,IAAoB,IAAIU,GAAJ,CAAQ,CAACZ,EAAD,CAAR,CAApBE,GAAoC,IAAIU,GAAJ,EAA3D;MACA,OAAOK,cAAc,CAACnB,QAAfmB,CAAwB,EAAE,GAAGE,IAAL;QAAWnB,EAAX;QAAeE,SAAS,EAAEkB;MAA1B,CAAxBH,CAAP;IACD,CAL8B;IAM/BV,EAAE,EAAEA,CAACC,CAADD,EAAIE,QAAJF,EAAcG,OAAdH,KAA0B;MAC5B,IAAII,GAAG,GAAG,IAAIC,GAAJ,EAAV;;MAEA,IAAIJ,CAAC,IAAI,IAAT,EAAe;QACb,MAAMa,GAAG,GAAG3B,WAAW,CAACc,CAAD,CAAvB;;QACA,IAAIa,GAAG,CAACC,MAAR,EAAgB;UACdX,GAAG,GAAGM,cAAc,CAACV,EAAfU,CAAkBI,GAAG,CAACE,KAAJF,CAAU,CAAVA,EAAa,CAAbA,CAAlBJ,EAAmCR,QAAnCQ,EAA6CP,OAA7CO,CAANN;QACF;MACF;;MAEA,OAAOA,GAAP;IACD,CAjB8B;IAkB/BE,GAAG,EAAEA,CAACL,CAADK,EAAIJ,QAAJI,EAAcH,OAAdG,KAA0B;MAC7B,OAAOI,cAAc,CAACJ,GAAfI,CAAmBT,CAAnBS,EAAsBR,QAAtBQ,EAAgCP,OAAhCO,CAAP;IACF;EApB+B,CAAjC;EAuBA,OAAOpB,QAAP;AACD,CA3BM;AA6BP,OAAO,MAAM2B,kBAAkB,GAAI5B,SAAmB,IAAqB;EACzE,MAAMqB,cAAc,GAAGtB,yBAAyB,CAACC,SAAD,CAAhD;EAEA,MAAMC,QAAwB,GAAG;IAC/BC,QAAQ,EAAE2B,SAA0C;MAAA,IAAzC;QAAEzB,EAAF;QAAME,SAAN;QAAiBO,QAAjB;QAA2B,GAAGU;MAA9B,IAAoCM,KAAK;MAClDzB,EAAE,GAAGP,KAAK,CAACO,EAAD,CAAVA;MACA,IAAIS,QAAQ,CAACL,GAATK,CAAaT,EAAbS,CAAJ,EAAsB,OAAOP,SAAP;MAEtB,OAAOe,cAAc,CAACnB,QAAfmB,CAAwB;QAAEjB,EAAF;QAAME,SAAN;QAAiBO,QAAjB;QAA2B,GAAGU;MAA9B,CAAxBF,CAAP;IACD,CAN8B;IAO/BV,EAAE,EAAEU,cAAc,CAACV,EAPY;IAQ/BM,GAAG,EAAEI,cAAc,CAACJ;EARW,CAAjC;EAWA,OAAOhB,QAAP;AACD,CAfM;AAiBP,OAAO,MAAM6B,wBAAwB,GAAI9B,SAAmB,IAAqB;EAC/E,MAAMqB,cAAc,GAAGD,+BAA+B,CAACpB,SAAD,CAAtD;EAEA,MAAMC,QAAwB,GAAG;IAC/BC,QAAQ,EAAE6B,SAA0C;MAAA,IAAzC;QAAE3B,EAAF;QAAME,SAAN;QAAiBO,QAAjB;QAA2B,GAAGU;MAA9B,IAAoCQ,KAAK;MAClD3B,EAAE,GAAGP,KAAK,CAACO,EAAD,CAAVA;MACA,IAAIS,QAAQ,CAACL,GAATK,CAAaT,EAAbS,CAAJ,EAAsB,OAAOP,SAAP;MAEtB,OAAOe,cAAc,CAACnB,QAAfmB,CAAwB;QAAEjB,EAAF;QAAME,SAAN;QAAiBO,QAAjB;QAA2B,GAAGU;MAA9B,CAAxBF,CAAP;IACD,CAN8B;IAO/BV,EAAE,EAAEU,cAAc,CAACV,EAPY;IAQ/BM,GAAG,EAAEI,cAAc,CAACJ;EARW,CAAjC;EAWA,OAAOhB,QAAP;AACD,CAfM","names":["toRaw","wrapInArray","independentActiveStrategy","mandatory","strategy","activate","_ref","id","value","activated","size","has","add","delete","in","v","children","parents","set","Set","out","Array","from","independentSingleActiveStrategy","parentStrategy","_ref2","rest","singleSelected","arr","length","slice","leafActiveStrategy","_ref3","leafSingleActiveStrategy","_ref4"],"sources":["../../../src/composables/nested/activeStrategies.ts"],"sourcesContent":["/* eslint-disable sonarjs/no-identical-functions */\n// Utilities\nimport { toRaw } from 'vue'\nimport { wrapInArray } from '@/util'\n\nexport type ActiveStrategyFn = (data: {\n  id: unknown\n  value: boolean\n  activated: Set<unknown>\n  children: Map<unknown, unknown[]>\n  parents: Map<unknown, unknown>\n  event?: Event\n}) => Set<unknown>\n\nexport type ActiveStrategyTransformInFn = (\n  v: unknown | undefined,\n  children: Map<unknown, unknown[]>,\n  parents: Map<unknown, unknown>,\n) => Set<unknown>\n\nexport type ActiveStrategyTransformOutFn = (\n  v: Set<unknown>,\n  children: Map<unknown, unknown[]>,\n  parents: Map<unknown, unknown>,\n) => unknown\n\nexport type ActiveStrategy = {\n  activate: ActiveStrategyFn\n  in: ActiveStrategyTransformInFn\n  out: ActiveStrategyTransformOutFn\n}\n\nexport const independentActiveStrategy = (mandatory?: boolean): ActiveStrategy => {\n  const strategy: ActiveStrategy = {\n    activate: ({ id, value, activated }) => {\n      id = toRaw(id)\n\n      // When mandatory and we're trying to deselect when id\n      // is the only currently selected item then do nothing\n      if (mandatory && !value && activated.size === 1 && activated.has(id)) return activated\n\n      if (value) {\n        activated.add(id)\n      } else {\n        activated.delete(id)\n      }\n\n      return activated\n    },\n    in: (v, children, parents) => {\n      let set = new Set()\n\n      if (v != null) {\n        for (const id of wrapInArray(v)) {\n          set = strategy.activate({\n            id,\n            value: true,\n            activated: new Set(set),\n            children,\n            parents,\n          })\n        }\n      }\n\n      return set\n    },\n    out: v => {\n      return Array.from(v)\n    },\n  }\n\n  return strategy\n}\n\nexport const independentSingleActiveStrategy = (mandatory?: boolean): ActiveStrategy => {\n  const parentStrategy = independentActiveStrategy(mandatory)\n\n  const strategy: ActiveStrategy = {\n    activate: ({ activated, id, ...rest }) => {\n      id = toRaw(id)\n      const singleSelected = activated.has(id) ? new Set([id]) : new Set()\n      return parentStrategy.activate({ ...rest, id, activated: singleSelected })\n    },\n    in: (v, children, parents) => {\n      let set = new Set()\n\n      if (v != null) {\n        const arr = wrapInArray(v)\n        if (arr.length) {\n          set = parentStrategy.in(arr.slice(0, 1), children, parents)\n        }\n      }\n\n      return set\n    },\n    out: (v, children, parents) => {\n      return parentStrategy.out(v, children, parents)\n    },\n  }\n\n  return strategy\n}\n\nexport const leafActiveStrategy = (mandatory?: boolean): ActiveStrategy => {\n  const parentStrategy = independentActiveStrategy(mandatory)\n\n  const strategy: ActiveStrategy = {\n    activate: ({ id, activated, children, ...rest }) => {\n      id = toRaw(id)\n      if (children.has(id)) return activated\n\n      return parentStrategy.activate({ id, activated, children, ...rest })\n    },\n    in: parentStrategy.in,\n    out: parentStrategy.out,\n  }\n\n  return strategy\n}\n\nexport const leafSingleActiveStrategy = (mandatory?: boolean): ActiveStrategy => {\n  const parentStrategy = independentSingleActiveStrategy(mandatory)\n\n  const strategy: ActiveStrategy = {\n    activate: ({ id, activated, children, ...rest }) => {\n      id = toRaw(id)\n      if (children.has(id)) return activated\n\n      return parentStrategy.activate({ id, activated, children, ...rest })\n    },\n    in: parentStrategy.in,\n    out: parentStrategy.out,\n  }\n\n  return strategy\n}\n"]},"metadata":{},"sourceType":"module"}