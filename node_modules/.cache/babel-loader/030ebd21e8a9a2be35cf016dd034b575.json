{"ast":null,"code":"// Utilities\nimport { computed, isRef } from 'vue';\nimport { getCurrentInstanceName, propsFactory } from \"../util/index.mjs\"; // Types\n// Composables\n\nexport const makeRoundedProps = propsFactory({\n  rounded: {\n    type: [Boolean, Number, String],\n    default: undefined\n  },\n  tile: Boolean\n}, 'rounded');\nexport function useRounded(props) {\n  let name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : getCurrentInstanceName();\n  const roundedClasses = computed(() => {\n    const rounded = isRef(props) ? props.value : props.rounded;\n    const tile = isRef(props) ? props.value : props.tile;\n    const classes = [];\n\n    if (rounded === true || rounded === '') {\n      classes.push(`${name}--rounded`);\n    } else if (typeof rounded === 'string' || rounded === 0) {\n      for (const value of String(rounded).split(' ')) {\n        classes.push(`rounded-${value}`);\n      }\n    } else if (tile || rounded === false) {\n      classes.push('rounded-0');\n    }\n\n    return classes;\n  });\n  return {\n    roundedClasses\n  };\n}","map":{"version":3,"mappings":"AAAA;AACA,SAASA,QAAT,EAAmBC,KAAnB,QAAgC,KAAhC;AAAqC,SAC5BC,sBAD4B,EACJC,YADI,QACQ,mBADR,C,CAGrC;AAcA;;AACA,OAAO,MAAMC,gBAAgB,GAAGD,YAAY,CAAC;EAC3CE,OAAO,EAAE;IACPC,IAAI,EAAE,CAACC,OAAD,EAAUC,MAAV,EAAkBC,MAAlB,CADC;IAEPC,OAAO,EAAEC;EAFF,CADkC;EAK3CC,IAAI,EAAEL;AALqC,CAAD,EAMzC,SANyC,CAArC;AAQP,OAAO,SAASM,UAAT,CACLC,KADK,EAGQ;EAAA,IADbC,IAAI,uEAAGb,sBAAsB,EAChB;EACb,MAAMc,cAAc,GAAGhB,QAAQ,CAAC,MAAM;IACpC,MAAMK,OAAO,GAAGJ,KAAK,CAACa,KAAD,CAALb,GAAea,KAAK,CAACG,KAArBhB,GAA6Ba,KAAK,CAACT,OAAnD;IACA,MAAMO,IAAI,GAAGX,KAAK,CAACa,KAAD,CAALb,GAAea,KAAK,CAACG,KAArBhB,GAA6Ba,KAAK,CAACF,IAAhD;IACA,MAAMM,OAAiB,GAAG,EAA1B;;IAEA,IAAIb,OAAO,KAAK,IAAZA,IAAoBA,OAAO,KAAK,EAApC,EAAwC;MACtCa,OAAO,CAACC,IAARD,CAAa,GAAGH,IAAI,WAApBG;IACD,CAFD,MAEO,IACL,OAAOb,OAAP,KAAmB,QAAnB,IACAA,OAAO,KAAK,CAFP,EAGL;MACA,KAAK,MAAMY,KAAX,IAAoBR,MAAM,CAACJ,OAAD,CAANI,CAAgBW,KAAhBX,CAAsB,GAAtBA,CAApB,EAAgD;QAC9CS,OAAO,CAACC,IAARD,CAAa,WAAWD,KAAK,EAA7BC;MACF;IACD,CAPM,MAOA,IAAIN,IAAI,IAAIP,OAAO,KAAK,KAAxB,EAA+B;MACpCa,OAAO,CAACC,IAARD,CAAa,WAAbA;IACF;;IAEA,OAAOA,OAAP;EACD,CAnB8B,CAA/B;EAqBA,OAAO;IAAEF;EAAF,CAAP;AACF","names":["computed","isRef","getCurrentInstanceName","propsFactory","makeRoundedProps","rounded","type","Boolean","Number","String","default","undefined","tile","useRounded","props","name","roundedClasses","value","classes","push","split"],"sources":["../../src/composables/rounded.ts"],"sourcesContent":["// Utilities\nimport { computed, isRef } from 'vue'\nimport { getCurrentInstanceName, propsFactory } from '@/util'\n\n// Types\nimport type { Ref } from 'vue'\n\ntype RoundedValue = boolean | string | number | null | undefined\n\nexport interface RoundedProps {\n  rounded?: RoundedValue\n  tile?: boolean\n}\n\ntype RoundedData = {\n  roundedClasses: Ref<string[]>\n}\n\n// Composables\nexport const makeRoundedProps = propsFactory({\n  rounded: {\n    type: [Boolean, Number, String],\n    default: undefined,\n  },\n  tile: Boolean,\n}, 'rounded')\n\nexport function useRounded (\n  props: RoundedProps | Ref<RoundedValue>,\n  name = getCurrentInstanceName(),\n): RoundedData {\n  const roundedClasses = computed(() => {\n    const rounded = isRef(props) ? props.value : props.rounded\n    const tile = isRef(props) ? props.value : props.tile\n    const classes: string[] = []\n\n    if (rounded === true || rounded === '') {\n      classes.push(`${name}--rounded`)\n    } else if (\n      typeof rounded === 'string' ||\n      rounded === 0\n    ) {\n      for (const value of String(rounded).split(' ')) {\n        classes.push(`rounded-${value}`)\n      }\n    } else if (tile || rounded === false) {\n      classes.push('rounded-0')\n    }\n\n    return classes\n  })\n\n  return { roundedClasses }\n}\n"]},"metadata":{},"sourceType":"module"}