{"ast":null,"code":"// Utilities\nimport { SUPPORTS_INTERSECTION } from \"../../util/index.mjs\"; // Types\n\nfunction mounted(el, binding) {\n  if (!SUPPORTS_INTERSECTION) return;\n  const modifiers = binding.modifiers || {};\n  const value = binding.value;\n  const {\n    handler,\n    options\n  } = typeof value === 'object' ? value : {\n    handler: value,\n    options: {}\n  };\n  const observer = new IntersectionObserver(function () {\n    let entries = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let observer = arguments.length > 1 ? arguments[1] : undefined;\n\n    const _observe = el._observe?.[binding.instance.$.uid];\n\n    if (!_observe) return; // Just in case, should never fire\n\n    const isIntersecting = entries.some(entry => entry.isIntersecting); // If is not quiet or has already been\n    // initted, invoke the user callback\n\n    if (handler && (!modifiers.quiet || _observe.init) && (!modifiers.once || isIntersecting || _observe.init)) {\n      handler(isIntersecting, entries, observer);\n    }\n\n    if (isIntersecting && modifiers.once) unmounted(el, binding);else _observe.init = true;\n  }, options);\n  el._observe = Object(el._observe);\n  el._observe[binding.instance.$.uid] = {\n    init: false,\n    observer\n  };\n  observer.observe(el);\n}\n\nfunction unmounted(el, binding) {\n  const observe = el._observe?.[binding.instance.$.uid];\n  if (!observe) return;\n  observe.observer.unobserve(el);\n  delete el._observe[binding.instance.$.uid];\n}\n\nexport const Intersect = {\n  mounted,\n  unmounted\n};\nexport default Intersect;","map":{"version":3,"mappings":"AAAA;AAAA,SACSA,qBADT,QAC8B,sBAD9B,C,CAGA;;AAmBA,SAASC,OAAT,CAAkBC,EAAlB,EAAmCC,OAAnC,EAAqE;EACnE,IAAI,CAACH,qBAAL,EAA4B;EAE5B,MAAMI,SAAS,GAAGD,OAAO,CAACC,SAARD,IAAqB,EAAvC;EACA,MAAME,KAAK,GAAGF,OAAO,CAACE,KAAtB;EACA,MAAM;IAAEC,OAAF;IAAWC;EAAX,IAAuB,OAAOF,KAAP,KAAiB,QAAjB,GACzBA,KADyB,GAEzB;IAAEC,OAAO,EAAED,KAAX;IAAkBE,OAAO,EAAE;EAA3B,CAFJ;EAIA,MAAMC,QAAQ,GAAG,IAAIC,oBAAJ,CAAyB,YAGrC;IAAA,IAFHC,OAAoC,uEAAG,EAEpC;IAFsC,IACzCF,QAA8B,kDADW;;IAGzC,MAAMG,QAAQ,GAAGT,EAAE,CAACS,QAAHT,GAAcC,OAAO,CAACS,QAART,CAAkBU,CAAlBV,CAAoBW,GAAlCZ,CAAjB;;IACA,IAAI,CAACS,QAAL,EAAe,OAFZ,CAEmB;;IAEtB,MAAMI,cAAc,GAAGL,OAAO,CAACM,IAARN,CAAaO,KAAK,IAAIA,KAAK,CAACF,cAA5BL,CAAvB,CAJG,CAMH;IACA;;IACA,IACEJ,OAAO,KACL,CAACF,SAAS,CAACc,KAAX,IACAP,QAAQ,CAACQ,IAFJ,CAAPb,KAIE,CAACF,SAAS,CAACgB,IAAX,IACAL,cADA,IAEAJ,QAAQ,CAACQ,IANXb,CADF,EASE;MACAA,OAAO,CAACS,cAAD,EAAiBL,OAAjB,EAA0BF,QAA1B,CAAPF;IACF;;IAEA,IAAIS,cAAc,IAAIX,SAAS,CAACgB,IAAhC,EAAsCC,SAAS,CAACnB,EAAD,EAAKC,OAAL,CAATkB,CAAtC,KACKV,QAAQ,CAACQ,IAATR,GAAgB,IAAhBA;EACN,CA1BgB,EA0BdJ,OA1Bc,CAAjB;EA4BAL,EAAE,CAACS,QAAHT,GAAcoB,MAAM,CAACpB,EAAE,CAACS,QAAJ,CAApBT;EACAA,EAAE,CAACS,QAAHT,CAAaC,OAAO,CAACS,QAART,CAAkBU,CAAlBV,CAAoBW,GAAjCZ,IAAwC;IAAEiB,IAAI,EAAE,KAAR;IAAeX;EAAf,CAAxCN;EAEAM,QAAQ,CAACe,OAATf,CAAiBN,EAAjBM;AACF;;AAEA,SAASa,SAAT,CAAoBnB,EAApB,EAAqCC,OAArC,EAAuE;EACrE,MAAMoB,OAAO,GAAGrB,EAAE,CAACS,QAAHT,GAAcC,OAAO,CAACS,QAART,CAAkBU,CAAlBV,CAAoBW,GAAlCZ,CAAhB;EACA,IAAI,CAACqB,OAAL,EAAc;EAEdA,OAAO,CAACf,QAARe,CAAiBC,SAAjBD,CAA2BrB,EAA3BqB;EACA,OAAOrB,EAAE,CAACS,QAAHT,CAAaC,OAAO,CAACS,QAART,CAAkBU,CAAlBV,CAAoBW,GAAjCZ,CAAP;AACF;;AAEA,OAAO,MAAMuB,SAAS,GAAG;EACvBxB,OADuB;EAEvBoB;AAFuB,CAAlB;AAKP,eAAeI,SAAf","names":["SUPPORTS_INTERSECTION","mounted","el","binding","modifiers","value","handler","options","observer","IntersectionObserver","entries","_observe","instance","$","uid","isIntersecting","some","entry","quiet","init","once","unmounted","Object","observe","unobserve","Intersect"],"sources":["../../../src/directives/intersect/index.ts"],"sourcesContent":["// Utilities\nimport { SUPPORTS_INTERSECTION } from '@/util'\n\n// Types\nimport type {\n  DirectiveBinding,\n} from 'vue'\n\ntype ObserveHandler = (\n  isIntersecting: boolean,\n  entries: IntersectionObserverEntry[],\n  observer: IntersectionObserver,\n) => void\n\nexport interface ObserveDirectiveBinding extends Omit<DirectiveBinding, 'modifiers' | 'value'> {\n  value?: ObserveHandler | { handler: ObserveHandler, options?: IntersectionObserverInit }\n  modifiers: {\n    once?: boolean\n    quiet?: boolean\n  }\n}\n\nfunction mounted (el: HTMLElement, binding: ObserveDirectiveBinding) {\n  if (!SUPPORTS_INTERSECTION) return\n\n  const modifiers = binding.modifiers || {}\n  const value = binding.value\n  const { handler, options } = typeof value === 'object'\n    ? value\n    : { handler: value, options: {} }\n\n  const observer = new IntersectionObserver((\n    entries: IntersectionObserverEntry[] = [],\n    observer: IntersectionObserver\n  ) => {\n    const _observe = el._observe?.[binding.instance!.$.uid]\n    if (!_observe) return // Just in case, should never fire\n\n    const isIntersecting = entries.some(entry => entry.isIntersecting)\n\n    // If is not quiet or has already been\n    // initted, invoke the user callback\n    if (\n      handler && (\n        !modifiers.quiet ||\n        _observe.init\n      ) && (\n        !modifiers.once ||\n        isIntersecting ||\n        _observe.init\n      )\n    ) {\n      handler(isIntersecting, entries, observer)\n    }\n\n    if (isIntersecting && modifiers.once) unmounted(el, binding)\n    else _observe.init = true\n  }, options)\n\n  el._observe = Object(el._observe)\n  el._observe![binding.instance!.$.uid] = { init: false, observer }\n\n  observer.observe(el)\n}\n\nfunction unmounted (el: HTMLElement, binding: ObserveDirectiveBinding) {\n  const observe = el._observe?.[binding.instance!.$.uid]\n  if (!observe) return\n\n  observe.observer.unobserve(el)\n  delete el._observe![binding.instance!.$.uid]\n}\n\nexport const Intersect = {\n  mounted,\n  unmounted,\n}\n\nexport default Intersect\n"]},"metadata":{},"sourceType":"module"}