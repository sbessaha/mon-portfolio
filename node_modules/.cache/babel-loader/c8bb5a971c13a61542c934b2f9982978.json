{"ast":null,"code":"// Utilities\nimport { clamp } from \"../helpers.mjs\"; // Types\n// For converting XYZ to sRGB\n\nconst srgbForwardMatrix = [[3.2406, -1.5372, -0.4986], [-0.9689, 1.8758, 0.0415], [0.0557, -0.2040, 1.0570]]; // Forward gamma adjust\n\nconst srgbForwardTransform = C => C <= 0.0031308 ? C * 12.92 : 1.055 * C ** (1 / 2.4) - 0.055; // For converting sRGB to XYZ\n\n\nconst srgbReverseMatrix = [[0.4124, 0.3576, 0.1805], [0.2126, 0.7152, 0.0722], [0.0193, 0.1192, 0.9505]]; // Reverse gamma adjust\n\nconst srgbReverseTransform = C => C <= 0.04045 ? C / 12.92 : ((C + 0.055) / 1.055) ** 2.4;\n\nexport function fromXYZ(xyz) {\n  const rgb = Array(3);\n  const transform = srgbForwardTransform;\n  const matrix = srgbForwardMatrix; // Matrix transform, then gamma adjustment\n\n  for (let i = 0; i < 3; ++i) {\n    // Rescale back to [0, 255]\n    rgb[i] = Math.round(clamp(transform(matrix[i][0] * xyz[0] + matrix[i][1] * xyz[1] + matrix[i][2] * xyz[2])) * 255);\n  }\n\n  return {\n    r: rgb[0],\n    g: rgb[1],\n    b: rgb[2]\n  };\n}\nexport function toXYZ(_ref) {\n  let {\n    r,\n    g,\n    b\n  } = _ref;\n  const xyz = [0, 0, 0];\n  const transform = srgbReverseTransform;\n  const matrix = srgbReverseMatrix; // Rescale from [0, 255] to [0, 1] then adjust sRGB gamma to linear RGB\n\n  r = transform(r / 255);\n  g = transform(g / 255);\n  b = transform(b / 255); // Matrix color space transform\n\n  for (let i = 0; i < 3; ++i) {\n    xyz[i] = matrix[i][0] * r + matrix[i][1] * g + matrix[i][2] * b;\n  }\n\n  return xyz;\n}","map":{"version":3,"mappings":"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","names":["clamp","srgbForwardMatrix","srgbForwardTransform","C","srgbReverseMatrix","srgbReverseTransform","fromXYZ","xyz","rgb","Array","transform","matrix","i","Math","round","r","g","b","toXYZ","_ref"],"sources":["../../../src/util/color/transformSRGB.ts"],"sourcesContent":["// Utilities\nimport { clamp } from '@/util/helpers'\n\n// Types\nimport type { RGB, XYZ } from '../colorUtils'\n\n// For converting XYZ to sRGB\nconst srgbForwardMatrix = [\n  [3.2406, -1.5372, -0.4986],\n  [-0.9689, 1.8758, 0.0415],\n  [0.0557, -0.2040, 1.0570],\n]\n\n// Forward gamma adjust\nconst srgbForwardTransform = (C: number): number => (\n  C <= 0.0031308\n    ? C * 12.92\n    : 1.055 * C ** (1 / 2.4) - 0.055\n)\n\n// For converting sRGB to XYZ\nconst srgbReverseMatrix = [\n  [0.4124, 0.3576, 0.1805],\n  [0.2126, 0.7152, 0.0722],\n  [0.0193, 0.1192, 0.9505],\n]\n\n// Reverse gamma adjust\nconst srgbReverseTransform = (C: number): number => (\n  C <= 0.04045\n    ? C / 12.92\n    : ((C + 0.055) / 1.055) ** 2.4\n)\n\nexport function fromXYZ (xyz: XYZ): RGB {\n  const rgb = Array(3)\n  const transform = srgbForwardTransform\n  const matrix = srgbForwardMatrix\n\n  // Matrix transform, then gamma adjustment\n  for (let i = 0; i < 3; ++i) {\n    // Rescale back to [0, 255]\n    rgb[i] = Math.round(clamp(transform(\n      matrix[i][0] * xyz[0] +\n      matrix[i][1] * xyz[1] +\n      matrix[i][2] * xyz[2]\n    )) * 255)\n  }\n\n  return {\n    r: rgb[0],\n    g: rgb[1],\n    b: rgb[2],\n  }\n}\n\nexport function toXYZ ({ r, g, b }: RGB): XYZ {\n  const xyz: XYZ = [0, 0, 0]\n  const transform = srgbReverseTransform\n  const matrix = srgbReverseMatrix\n\n  // Rescale from [0, 255] to [0, 1] then adjust sRGB gamma to linear RGB\n  r = transform(r / 255)\n  g = transform(g / 255)\n  b = transform(b / 255)\n\n  // Matrix color space transform\n  for (let i = 0; i < 3; ++i) {\n    xyz[i] = matrix[i][0] * r + matrix[i][1] * g + matrix[i][2] * b\n  }\n\n  return xyz\n}\n"]},"metadata":{},"sourceType":"module"}