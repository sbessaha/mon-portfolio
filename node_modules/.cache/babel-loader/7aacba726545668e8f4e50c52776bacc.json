{"ast":null,"code":"import { createVNode as _createVNode } from \"vue\"; // Styles\n\nimport \"./VProgressCircular.css\"; // Composables\n\nimport { useTextColor } from \"../../composables/color.mjs\";\nimport { makeComponentProps } from \"../../composables/component.mjs\";\nimport { useIntersectionObserver } from \"../../composables/intersectionObserver.mjs\";\nimport { useResizeObserver } from \"../../composables/resizeObserver.mjs\";\nimport { makeSizeProps, useSize } from \"../../composables/size.mjs\";\nimport { makeTagProps } from \"../../composables/tag.mjs\";\nimport { makeThemeProps, provideTheme } from \"../../composables/theme.mjs\"; // Utilities\n\nimport { computed, ref, toRef, watchEffect } from 'vue';\nimport { convertToUnit, genericComponent, propsFactory, useRender } from \"../../util/index.mjs\"; // Types\n\nexport const makeVProgressCircularProps = propsFactory({\n  bgColor: String,\n  color: String,\n  indeterminate: [Boolean, String],\n  modelValue: {\n    type: [Number, String],\n    default: 0\n  },\n  rotate: {\n    type: [Number, String],\n    default: 0\n  },\n  width: {\n    type: [Number, String],\n    default: 4\n  },\n  ...makeComponentProps(),\n  ...makeSizeProps(),\n  ...makeTagProps({\n    tag: 'div'\n  }),\n  ...makeThemeProps()\n}, 'VProgressCircular');\nexport const VProgressCircular = genericComponent()({\n  name: 'VProgressCircular',\n  props: makeVProgressCircularProps(),\n\n  setup(props, _ref) {\n    let {\n      slots\n    } = _ref;\n    const MAGIC_RADIUS_CONSTANT = 20;\n    const CIRCUMFERENCE = 2 * Math.PI * MAGIC_RADIUS_CONSTANT;\n    const root = ref();\n    const {\n      themeClasses\n    } = provideTheme(props);\n    const {\n      sizeClasses,\n      sizeStyles\n    } = useSize(props);\n    const {\n      textColorClasses,\n      textColorStyles\n    } = useTextColor(toRef(props, 'color'));\n    const {\n      textColorClasses: underlayColorClasses,\n      textColorStyles: underlayColorStyles\n    } = useTextColor(toRef(props, 'bgColor'));\n    const {\n      intersectionRef,\n      isIntersecting\n    } = useIntersectionObserver();\n    const {\n      resizeRef,\n      contentRect\n    } = useResizeObserver();\n    const normalizedValue = computed(() => Math.max(0, Math.min(100, parseFloat(props.modelValue))));\n    const width = computed(() => Number(props.width));\n    const size = computed(() => {\n      // Get size from element if size prop value is small, large etc\n      return sizeStyles.value ? Number(props.size) : contentRect.value ? contentRect.value.width : Math.max(width.value, 32);\n    });\n    const diameter = computed(() => MAGIC_RADIUS_CONSTANT / (1 - width.value / size.value) * 2);\n    const strokeWidth = computed(() => width.value / size.value * diameter.value);\n    const strokeDashOffset = computed(() => convertToUnit((100 - normalizedValue.value) / 100 * CIRCUMFERENCE));\n    watchEffect(() => {\n      intersectionRef.value = root.value;\n      resizeRef.value = root.value;\n    });\n    useRender(() => _createVNode(props.tag, {\n      \"ref\": root,\n      \"class\": ['v-progress-circular', {\n        'v-progress-circular--indeterminate': !!props.indeterminate,\n        'v-progress-circular--visible': isIntersecting.value,\n        'v-progress-circular--disable-shrink': props.indeterminate === 'disable-shrink'\n      }, themeClasses.value, sizeClasses.value, textColorClasses.value, props.class],\n      \"style\": [sizeStyles.value, textColorStyles.value, props.style],\n      \"role\": \"progressbar\",\n      \"aria-valuemin\": \"0\",\n      \"aria-valuemax\": \"100\",\n      \"aria-valuenow\": props.indeterminate ? undefined : normalizedValue.value\n    }, {\n      default: () => [_createVNode(\"svg\", {\n        \"style\": {\n          transform: `rotate(calc(-90deg + ${Number(props.rotate)}deg))`\n        },\n        \"xmlns\": \"http://www.w3.org/2000/svg\",\n        \"viewBox\": `0 0 ${diameter.value} ${diameter.value}`\n      }, [_createVNode(\"circle\", {\n        \"class\": ['v-progress-circular__underlay', underlayColorClasses.value],\n        \"style\": underlayColorStyles.value,\n        \"fill\": \"transparent\",\n        \"cx\": \"50%\",\n        \"cy\": \"50%\",\n        \"r\": MAGIC_RADIUS_CONSTANT,\n        \"stroke-width\": strokeWidth.value,\n        \"stroke-dasharray\": CIRCUMFERENCE,\n        \"stroke-dashoffset\": 0\n      }, null), _createVNode(\"circle\", {\n        \"class\": \"v-progress-circular__overlay\",\n        \"fill\": \"transparent\",\n        \"cx\": \"50%\",\n        \"cy\": \"50%\",\n        \"r\": MAGIC_RADIUS_CONSTANT,\n        \"stroke-width\": strokeWidth.value,\n        \"stroke-dasharray\": CIRCUMFERENCE,\n        \"stroke-dashoffset\": strokeDashOffset.value\n      }, null)]), slots.default && _createVNode(\"div\", {\n        \"class\": \"v-progress-circular__content\"\n      }, [slots.default({\n        value: normalizedValue.value\n      })])]\n    }));\n    return {};\n  }\n\n});","map":{"version":3,"mappings":"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","names":["useTextColor","makeComponentProps","useIntersectionObserver","useResizeObserver","makeSizeProps","useSize","makeTagProps","makeThemeProps","provideTheme","computed","ref","toRef","watchEffect","convertToUnit","genericComponent","propsFactory","useRender","makeVProgressCircularProps","bgColor","String","color","indeterminate","Boolean","modelValue","type","Number","default","rotate","width","tag","VProgressCircular","name","props","setup","_ref","slots","MAGIC_RADIUS_CONSTANT","CIRCUMFERENCE","Math","PI","root","themeClasses","sizeClasses","sizeStyles","textColorClasses","textColorStyles","underlayColorClasses","underlayColorStyles","intersectionRef","isIntersecting","resizeRef","contentRect","normalizedValue","max","min","parseFloat","size","value","diameter","strokeWidth","strokeDashOffset","class","style","undefined","transform","_createVNode"],"sources":["../../../src/components/VProgressCircular/VProgressCircular.tsx"],"sourcesContent":["// Styles\nimport './VProgressCircular.sass'\n\n// Composables\nimport { useTextColor } from '@/composables/color'\nimport { makeComponentProps } from '@/composables/component'\nimport { useIntersectionObserver } from '@/composables/intersectionObserver'\nimport { useResizeObserver } from '@/composables/resizeObserver'\nimport { makeSizeProps, useSize } from '@/composables/size'\nimport { makeTagProps } from '@/composables/tag'\nimport { makeThemeProps, provideTheme } from '@/composables/theme'\n\n// Utilities\nimport { computed, ref, toRef, watchEffect } from 'vue'\nimport { convertToUnit, genericComponent, propsFactory, useRender } from '@/util'\n\n// Types\nimport type { PropType } from 'vue'\n\nexport const makeVProgressCircularProps = propsFactory({\n  bgColor: String,\n  color: String,\n  indeterminate: [Boolean, String] as PropType<boolean | 'disable-shrink'>,\n  modelValue: {\n    type: [Number, String],\n    default: 0,\n  },\n  rotate: {\n    type: [Number, String],\n    default: 0,\n  },\n  width: {\n    type: [Number, String],\n    default: 4,\n  },\n\n  ...makeComponentProps(),\n  ...makeSizeProps(),\n  ...makeTagProps({ tag: 'div' }),\n  ...makeThemeProps(),\n}, 'VProgressCircular')\n\ntype VProgressCircularSlots = {\n  default: { value: number }\n}\n\nexport const VProgressCircular = genericComponent<VProgressCircularSlots>()({\n  name: 'VProgressCircular',\n\n  props: makeVProgressCircularProps(),\n\n  setup (props, { slots }) {\n    const MAGIC_RADIUS_CONSTANT = 20\n    const CIRCUMFERENCE = 2 * Math.PI * MAGIC_RADIUS_CONSTANT\n\n    const root = ref<HTMLElement>()\n\n    const { themeClasses } = provideTheme(props)\n    const { sizeClasses, sizeStyles } = useSize(props)\n    const { textColorClasses, textColorStyles } = useTextColor(toRef(props, 'color'))\n    const { textColorClasses: underlayColorClasses, textColorStyles: underlayColorStyles } = useTextColor(toRef(props, 'bgColor'))\n    const { intersectionRef, isIntersecting } = useIntersectionObserver()\n    const { resizeRef, contentRect } = useResizeObserver()\n\n    const normalizedValue = computed(() => Math.max(0, Math.min(100, parseFloat(props.modelValue))))\n    const width = computed(() => Number(props.width))\n    const size = computed(() => {\n      // Get size from element if size prop value is small, large etc\n      return sizeStyles.value\n        ? Number(props.size)\n        : contentRect.value\n          ? contentRect.value.width\n          : Math.max(width.value, 32)\n    })\n    const diameter = computed(() => (MAGIC_RADIUS_CONSTANT / (1 - width.value / size.value)) * 2)\n    const strokeWidth = computed(() => width.value / size.value * diameter.value)\n    const strokeDashOffset = computed(() => convertToUnit(((100 - normalizedValue.value) / 100) * CIRCUMFERENCE))\n\n    watchEffect(() => {\n      intersectionRef.value = root.value\n      resizeRef.value = root.value\n    })\n\n    useRender(() => (\n      <props.tag\n        ref={ root }\n        class={[\n          'v-progress-circular',\n          {\n            'v-progress-circular--indeterminate': !!props.indeterminate,\n            'v-progress-circular--visible': isIntersecting.value,\n            'v-progress-circular--disable-shrink': props.indeterminate === 'disable-shrink',\n          },\n          themeClasses.value,\n          sizeClasses.value,\n          textColorClasses.value,\n          props.class,\n        ]}\n        style={[\n          sizeStyles.value,\n          textColorStyles.value,\n          props.style,\n        ]}\n        role=\"progressbar\"\n        aria-valuemin=\"0\"\n        aria-valuemax=\"100\"\n        aria-valuenow={ props.indeterminate ? undefined : normalizedValue.value }\n      >\n        <svg\n          style={{\n            transform: `rotate(calc(-90deg + ${Number(props.rotate)}deg))`,\n          }}\n          xmlns=\"http://www.w3.org/2000/svg\"\n          viewBox={ `0 0 ${diameter.value} ${diameter.value}` }\n        >\n          <circle\n            class={[\n              'v-progress-circular__underlay',\n              underlayColorClasses.value,\n            ]}\n            style={ underlayColorStyles.value }\n            fill=\"transparent\"\n            cx=\"50%\"\n            cy=\"50%\"\n            r={ MAGIC_RADIUS_CONSTANT }\n            stroke-width={ strokeWidth.value }\n            stroke-dasharray={ CIRCUMFERENCE }\n            stroke-dashoffset={ 0 }\n          />\n\n          <circle\n            class=\"v-progress-circular__overlay\"\n            fill=\"transparent\"\n            cx=\"50%\"\n            cy=\"50%\"\n            r={ MAGIC_RADIUS_CONSTANT }\n            stroke-width={ strokeWidth.value }\n            stroke-dasharray={ CIRCUMFERENCE }\n            stroke-dashoffset={ strokeDashOffset.value }\n          />\n        </svg>\n\n        { slots.default && (\n          <div class=\"v-progress-circular__content\">\n            { slots.default({ value: normalizedValue.value }) }\n          </div>\n        )}\n      </props.tag>\n    ))\n\n    return {}\n  },\n})\n\nexport type VProgressCircular = InstanceType<typeof VProgressCircular>\n"]},"metadata":{},"sourceType":"module"}