{"ast":null,"code":"import { resolveDirective as _resolveDirective, createVNode as _createVNode } from \"vue\"; // Styles\n\nimport \"./VInput.css\"; // Components\n\nimport { useInputIcon } from \"./InputIcon.mjs\";\nimport { VMessages } from \"../VMessages/VMessages.mjs\"; // Composables\n\nimport { makeComponentProps } from \"../../composables/component.mjs\";\nimport { makeDensityProps, useDensity } from \"../../composables/density.mjs\";\nimport { makeDimensionProps, useDimension } from \"../../composables/dimensions.mjs\";\nimport { IconValue } from \"../../composables/icons.mjs\";\nimport { useRtl } from \"../../composables/locale.mjs\";\nimport { makeThemeProps, provideTheme } from \"../../composables/theme.mjs\";\nimport { makeValidationProps, useValidation } from \"../../composables/validation.mjs\"; // Utilities\n\nimport { computed } from 'vue';\nimport { EventProp, genericComponent, getUid, only, propsFactory, useRender } from \"../../util/index.mjs\"; // Types\n\nexport const makeVInputProps = propsFactory({\n  id: String,\n  appendIcon: IconValue,\n  centerAffix: {\n    type: Boolean,\n    default: true\n  },\n  prependIcon: IconValue,\n  hideDetails: [Boolean, String],\n  hideSpinButtons: Boolean,\n  hint: String,\n  persistentHint: Boolean,\n  messages: {\n    type: [Array, String],\n    default: () => []\n  },\n  direction: {\n    type: String,\n    default: 'horizontal',\n    validator: v => ['horizontal', 'vertical'].includes(v)\n  },\n  'onClick:prepend': EventProp(),\n  'onClick:append': EventProp(),\n  ...makeComponentProps(),\n  ...makeDensityProps(),\n  ...only(makeDimensionProps(), ['maxWidth', 'minWidth', 'width']),\n  ...makeThemeProps(),\n  ...makeValidationProps()\n}, 'VInput');\nexport const VInput = genericComponent()({\n  name: 'VInput',\n  props: { ...makeVInputProps()\n  },\n  emits: {\n    'update:modelValue': value => true\n  },\n\n  setup(props, _ref) {\n    let {\n      attrs,\n      slots,\n      emit\n    } = _ref;\n    const {\n      densityClasses\n    } = useDensity(props);\n    const {\n      dimensionStyles\n    } = useDimension(props);\n    const {\n      themeClasses\n    } = provideTheme(props);\n    const {\n      rtlClasses\n    } = useRtl();\n    const {\n      InputIcon\n    } = useInputIcon(props);\n    const uid = getUid();\n    const id = computed(() => props.id || `input-${uid}`);\n    const messagesId = computed(() => `${id.value}-messages`);\n    const {\n      errorMessages,\n      isDirty,\n      isDisabled,\n      isReadonly,\n      isPristine,\n      isValid,\n      isValidating,\n      reset,\n      resetValidation,\n      validate,\n      validationClasses\n    } = useValidation(props, 'v-input', id);\n    const slotProps = computed(() => ({\n      id,\n      messagesId,\n      isDirty,\n      isDisabled,\n      isReadonly,\n      isPristine,\n      isValid,\n      isValidating,\n      reset,\n      resetValidation,\n      validate\n    }));\n    const messages = computed(() => {\n      if (props.errorMessages?.length || !isPristine.value && errorMessages.value.length) {\n        return errorMessages.value;\n      } else if (props.hint && (props.persistentHint || props.focused)) {\n        return props.hint;\n      } else {\n        return props.messages;\n      }\n    });\n    useRender(() => {\n      const hasPrepend = !!(slots.prepend || props.prependIcon);\n      const hasAppend = !!(slots.append || props.appendIcon);\n      const hasMessages = messages.value.length > 0;\n      const hasDetails = !props.hideDetails || props.hideDetails === 'auto' && (hasMessages || !!slots.details);\n      return _createVNode(\"div\", {\n        \"class\": ['v-input', `v-input--${props.direction}`, {\n          'v-input--center-affix': props.centerAffix,\n          'v-input--hide-spin-buttons': props.hideSpinButtons\n        }, densityClasses.value, themeClasses.value, rtlClasses.value, validationClasses.value, props.class],\n        \"style\": [dimensionStyles.value, props.style]\n      }, [hasPrepend && _createVNode(\"div\", {\n        \"key\": \"prepend\",\n        \"class\": \"v-input__prepend\"\n      }, [slots.prepend?.(slotProps.value), props.prependIcon && _createVNode(InputIcon, {\n        \"key\": \"prepend-icon\",\n        \"name\": \"prepend\"\n      }, null)]), slots.default && _createVNode(\"div\", {\n        \"class\": \"v-input__control\"\n      }, [slots.default?.(slotProps.value)]), hasAppend && _createVNode(\"div\", {\n        \"key\": \"append\",\n        \"class\": \"v-input__append\"\n      }, [props.appendIcon && _createVNode(InputIcon, {\n        \"key\": \"append-icon\",\n        \"name\": \"append\"\n      }, null), slots.append?.(slotProps.value)]), hasDetails && _createVNode(\"div\", {\n        \"id\": messagesId.value,\n        \"class\": \"v-input__details\",\n        \"role\": \"alert\",\n        \"aria-live\": \"polite\"\n      }, [_createVNode(VMessages, {\n        \"active\": hasMessages,\n        \"messages\": messages.value\n      }, {\n        message: slots.message\n      }), slots.details?.(slotProps.value)])]);\n    });\n    return {\n      reset,\n      resetValidation,\n      validate,\n      isValid,\n      errorMessages\n    };\n  }\n\n});","map":{"version":3,"mappings":"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","names":["useInputIcon","VMessages","makeComponentProps","makeDensityProps","useDensity","makeDimensionProps","useDimension","IconValue","useRtl","makeThemeProps","provideTheme","makeValidationProps","useValidation","computed","EventProp","genericComponent","getUid","only","propsFactory","useRender","makeVInputProps","id","String","appendIcon","centerAffix","type","Boolean","default","prependIcon","hideDetails","hideSpinButtons","hint","persistentHint","messages","Array","direction","validator","v","includes","VInput","name","props","emits","value","setup","_ref","attrs","slots","emit","densityClasses","dimensionStyles","themeClasses","rtlClasses","InputIcon","uid","messagesId","errorMessages","isDirty","isDisabled","isReadonly","isPristine","isValid","isValidating","reset","resetValidation","validate","validationClasses","slotProps","length","focused","hasPrepend","prepend","hasAppend","append","hasMessages","hasDetails","details","class","style","_createVNode","message"],"sources":["../../../src/components/VInput/VInput.tsx"],"sourcesContent":["// Styles\nimport './VInput.sass'\n\n// Components\nimport { useInputIcon } from '@/components/VInput/InputIcon'\nimport { VMessages } from '@/components/VMessages/VMessages'\n\n// Composables\nimport { makeComponentProps } from '@/composables/component'\nimport { makeDensityProps, useDensity } from '@/composables/density'\nimport { makeDimensionProps, useDimension } from '@/composables/dimensions'\nimport { IconValue } from '@/composables/icons'\nimport { useRtl } from '@/composables/locale'\nimport { makeThemeProps, provideTheme } from '@/composables/theme'\nimport { makeValidationProps, useValidation } from '@/composables/validation'\n\n// Utilities\nimport { computed } from 'vue'\nimport { EventProp, genericComponent, getUid, only, propsFactory, useRender } from '@/util'\n\n// Types\nimport type { ComputedRef, PropType, Ref } from 'vue'\nimport type { VMessageSlot } from '@/components/VMessages/VMessages'\nimport type { GenericProps } from '@/util'\n\nexport interface VInputSlot {\n  id: ComputedRef<string>\n  messagesId: ComputedRef<string>\n  isDirty: ComputedRef<boolean>\n  isDisabled: ComputedRef<boolean>\n  isReadonly: ComputedRef<boolean>\n  isPristine: Ref<boolean>\n  isValid: ComputedRef<boolean | null>\n  isValidating: Ref<boolean>\n  reset: () => void\n  resetValidation: () => void\n  validate: () => void\n}\n\nexport const makeVInputProps = propsFactory({\n  id: String,\n  appendIcon: IconValue,\n  centerAffix: {\n    type: Boolean,\n    default: true,\n  },\n  prependIcon: IconValue,\n  hideDetails: [Boolean, String] as PropType<boolean | 'auto'>,\n  hideSpinButtons: Boolean,\n  hint: String,\n  persistentHint: Boolean,\n  messages: {\n    type: [Array, String] as PropType<string | readonly string[]>,\n    default: () => ([]),\n  },\n  direction: {\n    type: String as PropType<'horizontal' | 'vertical'>,\n    default: 'horizontal',\n    validator: (v: any) => ['horizontal', 'vertical'].includes(v),\n  },\n\n  'onClick:prepend': EventProp<[MouseEvent]>(),\n  'onClick:append': EventProp<[MouseEvent]>(),\n\n  ...makeComponentProps(),\n  ...makeDensityProps(),\n  ...only(makeDimensionProps(), [\n    'maxWidth',\n    'minWidth',\n    'width',\n  ]),\n  ...makeThemeProps(),\n  ...makeValidationProps(),\n}, 'VInput')\n\nexport type VInputSlots = {\n  default: VInputSlot\n  prepend: VInputSlot\n  append: VInputSlot\n  details: VInputSlot\n  message: VMessageSlot\n}\n\nexport const VInput = genericComponent<new <T>(\n  props: {\n    modelValue?: T | null\n    'onUpdate:modelValue'?: (value: T | null) => void\n  },\n  slots: VInputSlots,\n) => GenericProps<typeof props, typeof slots>>()({\n  name: 'VInput',\n\n  props: {\n    ...makeVInputProps(),\n  },\n\n  emits: {\n    'update:modelValue': (value: any) => true,\n  },\n\n  setup (props, { attrs, slots, emit }) {\n    const { densityClasses } = useDensity(props)\n    const { dimensionStyles } = useDimension(props)\n    const { themeClasses } = provideTheme(props)\n    const { rtlClasses } = useRtl()\n    const { InputIcon } = useInputIcon(props)\n\n    const uid = getUid()\n    const id = computed(() => props.id || `input-${uid}`)\n    const messagesId = computed(() => `${id.value}-messages`)\n\n    const {\n      errorMessages,\n      isDirty,\n      isDisabled,\n      isReadonly,\n      isPristine,\n      isValid,\n      isValidating,\n      reset,\n      resetValidation,\n      validate,\n      validationClasses,\n    } = useValidation(props, 'v-input', id)\n\n    const slotProps = computed<VInputSlot>(() => ({\n      id,\n      messagesId,\n      isDirty,\n      isDisabled,\n      isReadonly,\n      isPristine,\n      isValid,\n      isValidating,\n      reset,\n      resetValidation,\n      validate,\n    }))\n\n    const messages = computed(() => {\n      if (props.errorMessages?.length || (!isPristine.value && errorMessages.value.length)) {\n        return errorMessages.value\n      } else if (props.hint && (props.persistentHint || props.focused)) {\n        return props.hint\n      } else {\n        return props.messages\n      }\n    })\n\n    useRender(() => {\n      const hasPrepend = !!(slots.prepend || props.prependIcon)\n      const hasAppend = !!(slots.append || props.appendIcon)\n      const hasMessages = messages.value.length > 0\n      const hasDetails = !props.hideDetails || (\n        props.hideDetails === 'auto' &&\n        (hasMessages || !!slots.details)\n      )\n\n      return (\n        <div\n          class={[\n            'v-input',\n            `v-input--${props.direction}`,\n            {\n              'v-input--center-affix': props.centerAffix,\n              'v-input--hide-spin-buttons': props.hideSpinButtons,\n            },\n            densityClasses.value,\n            themeClasses.value,\n            rtlClasses.value,\n            validationClasses.value,\n            props.class,\n          ]}\n          style={[\n            dimensionStyles.value,\n            props.style,\n          ]}\n        >\n          { hasPrepend && (\n            <div key=\"prepend\" class=\"v-input__prepend\">\n              { slots.prepend?.(slotProps.value) }\n\n              { props.prependIcon && (\n                <InputIcon\n                  key=\"prepend-icon\"\n                  name=\"prepend\"\n                />\n              )}\n            </div>\n          )}\n\n          { slots.default && (\n            <div class=\"v-input__control\">\n              { slots.default?.(slotProps.value) }\n            </div>\n          )}\n\n          { hasAppend && (\n            <div key=\"append\" class=\"v-input__append\">\n              { props.appendIcon && (\n                <InputIcon\n                  key=\"append-icon\"\n                  name=\"append\"\n                />\n              )}\n\n              { slots.append?.(slotProps.value) }\n            </div>\n          )}\n\n          { hasDetails && (\n            <div\n              id={ messagesId.value }\n              class=\"v-input__details\"\n              role=\"alert\"\n              aria-live=\"polite\"\n            >\n              <VMessages\n                active={ hasMessages }\n                messages={ messages.value }\n                v-slots={{ message: slots.message }}\n              />\n\n              { slots.details?.(slotProps.value) }\n            </div>\n          )}\n        </div>\n      )\n    })\n\n    return {\n      reset,\n      resetValidation,\n      validate,\n      isValid,\n      errorMessages,\n    }\n  },\n})\n\nexport type VInput = InstanceType<typeof VInput>\n"]},"metadata":{},"sourceType":"module"}