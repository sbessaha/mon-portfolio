{"ast":null,"code":"import { mergeProps as _mergeProps, createVNode as _createVNode } from \"vue\"; // Styles\n\nimport \"./VSlider.css\"; // Components\n\nimport { VSliderThumb } from \"./VSliderThumb.mjs\";\nimport { VSliderTrack } from \"./VSliderTrack.mjs\";\nimport { filterInputProps, makeVInputProps, VInput } from \"../VInput/VInput.mjs\"; // Composables\n\nimport { makeFocusProps, useFocus } from \"../../composables/focus.mjs\";\nimport { makeSliderProps, useSlider } from \"./slider.mjs\";\nimport { useProxiedModel } from \"../../composables/proxiedModel.mjs\"; // Util\n\nimport { computed, ref } from 'vue';\nimport { defineComponent, useRender } from \"../../util/index.mjs\";\nexport const VSlider = defineComponent({\n  name: 'VSlider',\n  props: { ...makeFocusProps(),\n    ...makeSliderProps(),\n    ...makeVInputProps(),\n    modelValue: {\n      type: [Number, String],\n      default: 0\n    }\n  },\n  emits: {\n    'update:focused': value => true,\n    'update:modelValue': v => true\n  },\n\n  setup(props, _ref) {\n    let {\n      slots\n    } = _ref;\n    const thumbContainerRef = ref();\n    const {\n      min,\n      max,\n      mousePressed,\n      roundValue,\n      onSliderMousedown,\n      onSliderTouchstart,\n      trackContainerRef,\n      position,\n      hasLabels,\n      readonly\n    } = useSlider({\n      props,\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\n      handleSliderMouseUp: newValue => model.value = roundValue(newValue),\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\n      handleMouseMove: newValue => model.value = roundValue(newValue),\n      getActiveThumb: () => {\n        var _thumbContainerRef$va;\n\n        return (_thumbContainerRef$va = thumbContainerRef.value) == null ? void 0 : _thumbContainerRef$va.$el;\n      }\n    });\n    const model = useProxiedModel(props, 'modelValue', undefined, v => {\n      const value = typeof v === 'string' ? parseFloat(v) : v == null ? min.value : v;\n      return roundValue(value);\n    });\n    const {\n      isFocused,\n      focus,\n      blur\n    } = useFocus(props);\n    const trackStop = computed(() => position(model.value));\n    useRender(() => {\n      const [inputProps, _] = filterInputProps(props);\n      return _createVNode(VInput, _mergeProps({\n        \"class\": ['v-slider', {\n          'v-slider--has-labels': !!slots['tick-label'] || hasLabels.value,\n          'v-slider--focused': isFocused.value,\n          'v-slider--pressed': mousePressed.value,\n          'v-slider--disabled': props.disabled\n        }]\n      }, inputProps, {\n        \"focused\": isFocused.value\n      }), { ...slots,\n        default: _ref2 => {\n          let {\n            id\n          } = _ref2;\n          return _createVNode(\"div\", {\n            \"class\": \"v-slider__container\",\n            \"onMousedown\": !readonly.value ? onSliderMousedown : undefined,\n            \"onTouchstartPassive\": !readonly.value ? onSliderTouchstart : undefined\n          }, [_createVNode(\"input\", {\n            \"id\": id.value,\n            \"name\": props.name || id.value,\n            \"disabled\": props.disabled,\n            \"readonly\": props.readonly,\n            \"tabindex\": \"-1\",\n            \"value\": model.value\n          }, null), _createVNode(VSliderTrack, {\n            \"ref\": trackContainerRef,\n            \"start\": 0,\n            \"stop\": trackStop.value\n          }, {\n            'tick-label': slots['tick-label']\n          }), _createVNode(VSliderThumb, {\n            \"ref\": thumbContainerRef,\n            \"focused\": isFocused.value,\n            \"min\": min.value,\n            \"max\": max.value,\n            \"modelValue\": model.value,\n            \"onUpdate:modelValue\": v => model.value = v,\n            \"position\": trackStop.value,\n            \"elevation\": props.elevation,\n            \"onFocus\": focus,\n            \"onBlur\": blur\n          }, {\n            'thumb-label': slots['thumb-label']\n          })]);\n        }\n      });\n    });\n    return {};\n  }\n\n});","map":{"version":3,"mappings":"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","names":["VSliderThumb","VSliderTrack","filterInputProps","makeVInputProps","VInput","makeFocusProps","useFocus","makeSliderProps","useSlider","useProxiedModel","computed","ref","defineComponent","useRender","VSlider","name","props","modelValue","type","Number","String","default","emits","value","v","setup","slots","_ref","thumbContainerRef","min","max","mousePressed","roundValue","onSliderMousedown","onSliderTouchstart","trackContainerRef","position","hasLabels","readonly","handleSliderMouseUp","newValue","model","handleMouseMove","getActiveThumb","_thumbContainerRef$va","$el","undefined","parseFloat","isFocused","focus","blur","trackStop","inputProps","_","disabled","_ref2","id","elevation"],"sources":["../../../src/components/VSlider/VSlider.tsx"],"sourcesContent":["// Styles\nimport './VSlider.sass'\n\n// Components\nimport { VSliderThumb } from './VSliderThumb'\nimport { VSliderTrack } from './VSliderTrack'\nimport { filterInputProps, makeVInputProps, VInput } from '@/components/VInput/VInput'\n\n// Composables\nimport { makeFocusProps, useFocus } from '@/composables/focus'\nimport { makeSliderProps, useSlider } from './slider'\nimport { useProxiedModel } from '@/composables/proxiedModel'\n\n// Util\nimport { computed, ref } from 'vue'\nimport { defineComponent, useRender } from '@/util'\n\nexport const VSlider = defineComponent({\n  name: 'VSlider',\n\n  props: {\n    ...makeFocusProps(),\n    ...makeSliderProps(),\n    ...makeVInputProps(),\n\n    modelValue: {\n      type: [Number, String],\n      default: 0,\n    },\n  },\n\n  emits: {\n    'update:focused': (value: boolean) => true,\n    'update:modelValue': (v: number) => true,\n  },\n\n  setup (props, { slots }) {\n    const thumbContainerRef = ref()\n\n    const {\n      min,\n      max,\n      mousePressed,\n      roundValue,\n      onSliderMousedown,\n      onSliderTouchstart,\n      trackContainerRef,\n      position,\n      hasLabels,\n      readonly,\n    } = useSlider({\n      props,\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\n      handleSliderMouseUp: newValue => model.value = roundValue(newValue),\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\n      handleMouseMove: newValue => model.value = roundValue(newValue),\n      getActiveThumb: () => thumbContainerRef.value?.$el,\n    })\n\n    const model = useProxiedModel(\n      props,\n      'modelValue',\n      undefined,\n      v => {\n        const value = typeof v === 'string' ? parseFloat(v) : v == null ? min.value : v\n\n        return roundValue(value)\n      },\n    )\n\n    const { isFocused, focus, blur } = useFocus(props)\n    const trackStop = computed(() => position(model.value))\n\n    useRender(() => {\n      const [inputProps, _] = filterInputProps(props)\n\n      return (\n        <VInput\n          class={[\n            'v-slider',\n            {\n              'v-slider--has-labels': !!slots['tick-label'] || hasLabels.value,\n              'v-slider--focused': isFocused.value,\n              'v-slider--pressed': mousePressed.value,\n              'v-slider--disabled': props.disabled,\n            },\n          ]}\n          { ...inputProps }\n          focused={ isFocused.value }\n        >\n          {{\n            ...slots,\n            default: ({ id }) => (\n              <div\n                class=\"v-slider__container\"\n                onMousedown={ !readonly.value ? onSliderMousedown : undefined }\n                onTouchstartPassive={ !readonly.value ? onSliderTouchstart : undefined }\n              >\n                <input\n                  id={ id.value }\n                  name={ props.name || id.value }\n                  disabled={ props.disabled }\n                  readonly={ props.readonly }\n                  tabindex=\"-1\"\n                  value={ model.value }\n                />\n\n                <VSliderTrack\n                  ref={ trackContainerRef }\n                  start={ 0 }\n                  stop={ trackStop.value }\n                >\n                  {{ 'tick-label': slots['tick-label'] }}\n                </VSliderTrack>\n\n                <VSliderThumb\n                  ref={ thumbContainerRef }\n                  focused={ isFocused.value }\n                  min={ min.value }\n                  max={ max.value }\n                  modelValue={ model.value }\n                  onUpdate:modelValue={ v => (model.value = v) }\n                  position={ trackStop.value }\n                  elevation={ props.elevation }\n                  onFocus={ focus }\n                  onBlur={ blur }\n                >\n                  {{ 'thumb-label': slots['thumb-label'] }}\n                </VSliderThumb>\n              </div>\n            ),\n          }}\n        </VInput>\n      )\n    })\n\n    return {}\n  },\n})\n\nexport type VSlider = InstanceType<typeof VSlider>\n"]},"metadata":{},"sourceType":"module"}