{"ast":null,"code":"import { vModelText as _vModelText, withDirectives as _withDirectives, mergeProps as _mergeProps, resolveDirective as _resolveDirective, createVNode as _createVNode, Fragment as _Fragment } from \"vue\"; // Styles\n\nimport \"./VTextarea.css\";\nimport \"../VTextField/VTextField.css\"; // Components\n\nimport { VCounter } from \"../VCounter/VCounter.mjs\";\nimport { VField } from \"../VField/index.mjs\";\nimport { filterFieldProps, makeVFieldProps } from \"../VField/VField.mjs\";\nimport { makeVInputProps, VInput } from \"../VInput/VInput.mjs\"; // Composables\n\nimport { useFocus } from \"../../composables/focus.mjs\";\nimport { forwardRefs } from \"../../composables/forwardRefs.mjs\";\nimport { useProxiedModel } from \"../../composables/proxiedModel.mjs\"; // Directives\n\nimport Intersect from \"../../directives/intersect/index.mjs\"; // Utilities\n\nimport { computed, nextTick, onBeforeUnmount, onMounted, ref, shallowRef, watch, watchEffect } from 'vue';\nimport { callEvent, clamp, convertToUnit, filterInputAttrs, genericComponent, propsFactory, useRender } from \"../../util/index.mjs\"; // Types\n\nexport const makeVTextareaProps = propsFactory({\n  autoGrow: Boolean,\n  autofocus: Boolean,\n  counter: [Boolean, Number, String],\n  counterValue: Function,\n  prefix: String,\n  placeholder: String,\n  persistentPlaceholder: Boolean,\n  persistentCounter: Boolean,\n  noResize: Boolean,\n  rows: {\n    type: [Number, String],\n    default: 5,\n    validator: v => !isNaN(parseFloat(v))\n  },\n  maxRows: {\n    type: [Number, String],\n    validator: v => !isNaN(parseFloat(v))\n  },\n  suffix: String,\n  modelModifiers: Object,\n  ...makeVInputProps(),\n  ...makeVFieldProps()\n}, 'VTextarea');\nexport const VTextarea = genericComponent()({\n  name: 'VTextarea',\n  directives: {\n    Intersect\n  },\n  inheritAttrs: false,\n  props: makeVTextareaProps(),\n  emits: {\n    'click:control': e => true,\n    'mousedown:control': e => true,\n    'update:focused': focused => true,\n    'update:modelValue': val => true\n  },\n\n  setup(props, _ref) {\n    let {\n      attrs,\n      emit,\n      slots\n    } = _ref;\n    const model = useProxiedModel(props, 'modelValue');\n    const {\n      isFocused,\n      focus,\n      blur\n    } = useFocus(props);\n    const counterValue = computed(() => {\n      return typeof props.counterValue === 'function' ? props.counterValue(model.value) : (model.value || '').toString().length;\n    });\n    const max = computed(() => {\n      if (attrs.maxlength) return attrs.maxlength;\n      if (!props.counter || typeof props.counter !== 'number' && typeof props.counter !== 'string') return undefined;\n      return props.counter;\n    });\n\n    function onIntersect(isIntersecting, entries) {\n      if (!props.autofocus || !isIntersecting) return;\n      entries[0].target?.focus?.();\n    }\n\n    const vInputRef = ref();\n    const vFieldRef = ref();\n    const controlHeight = shallowRef('');\n    const textareaRef = ref();\n    const isActive = computed(() => props.persistentPlaceholder || isFocused.value || props.active);\n\n    function onFocus() {\n      if (textareaRef.value !== document.activeElement) {\n        textareaRef.value?.focus();\n      }\n\n      if (!isFocused.value) focus();\n    }\n\n    function onControlClick(e) {\n      onFocus();\n      emit('click:control', e);\n    }\n\n    function onControlMousedown(e) {\n      emit('mousedown:control', e);\n    }\n\n    function onClear(e) {\n      e.stopPropagation();\n      onFocus();\n      nextTick(() => {\n        model.value = '';\n        callEvent(props['onClick:clear'], e);\n      });\n    }\n\n    function onInput(e) {\n      const el = e.target;\n      model.value = el.value;\n\n      if (props.modelModifiers?.trim) {\n        const caretPosition = [el.selectionStart, el.selectionEnd];\n        nextTick(() => {\n          el.selectionStart = caretPosition[0];\n          el.selectionEnd = caretPosition[1];\n        });\n      }\n    }\n\n    const sizerRef = ref();\n    const rows = ref(+props.rows);\n    const isPlainOrUnderlined = computed(() => ['plain', 'underlined'].includes(props.variant));\n    watchEffect(() => {\n      if (!props.autoGrow) rows.value = +props.rows;\n    });\n\n    function calculateInputHeight() {\n      if (!props.autoGrow) return;\n      nextTick(() => {\n        if (!sizerRef.value || !vFieldRef.value) return;\n        const style = getComputedStyle(sizerRef.value);\n        const fieldStyle = getComputedStyle(vFieldRef.value.$el);\n        const padding = parseFloat(style.getPropertyValue('--v-field-padding-top')) + parseFloat(style.getPropertyValue('--v-input-padding-top')) + parseFloat(style.getPropertyValue('--v-field-padding-bottom'));\n        const height = sizerRef.value.scrollHeight;\n        const lineHeight = parseFloat(style.lineHeight);\n        const minHeight = Math.max(parseFloat(props.rows) * lineHeight + padding, parseFloat(fieldStyle.getPropertyValue('--v-input-control-height')));\n        const maxHeight = parseFloat(props.maxRows) * lineHeight + padding || Infinity;\n        const newHeight = clamp(height ?? 0, minHeight, maxHeight);\n        rows.value = Math.floor((newHeight - padding) / lineHeight);\n        controlHeight.value = convertToUnit(newHeight);\n      });\n    }\n\n    onMounted(calculateInputHeight);\n    watch(model, calculateInputHeight);\n    watch(() => props.rows, calculateInputHeight);\n    watch(() => props.maxRows, calculateInputHeight);\n    watch(() => props.density, calculateInputHeight);\n    let observer;\n    watch(sizerRef, val => {\n      if (val) {\n        observer = new ResizeObserver(calculateInputHeight);\n        observer.observe(sizerRef.value);\n      } else {\n        observer?.disconnect();\n      }\n    });\n    onBeforeUnmount(() => {\n      observer?.disconnect();\n    });\n    useRender(() => {\n      const hasCounter = !!(slots.counter || props.counter || props.counterValue);\n      const hasDetails = !!(hasCounter || slots.details);\n      const [rootAttrs, inputAttrs] = filterInputAttrs(attrs);\n      const {\n        modelValue: _,\n        ...inputProps\n      } = VInput.filterProps(props);\n      const fieldProps = filterFieldProps(props);\n      return _createVNode(VInput, _mergeProps({\n        \"ref\": vInputRef,\n        \"modelValue\": model.value,\n        \"onUpdate:modelValue\": $event => model.value = $event,\n        \"class\": ['v-textarea v-text-field', {\n          'v-textarea--prefixed': props.prefix,\n          'v-textarea--suffixed': props.suffix,\n          'v-text-field--prefixed': props.prefix,\n          'v-text-field--suffixed': props.suffix,\n          'v-textarea--auto-grow': props.autoGrow,\n          'v-textarea--no-resize': props.noResize || props.autoGrow,\n          'v-input--plain-underlined': isPlainOrUnderlined.value\n        }, props.class],\n        \"style\": props.style\n      }, rootAttrs, inputProps, {\n        \"centerAffix\": rows.value === 1 && !isPlainOrUnderlined.value,\n        \"focused\": isFocused.value\n      }), { ...slots,\n        default: _ref2 => {\n          let {\n            id,\n            isDisabled,\n            isDirty,\n            isReadonly,\n            isValid\n          } = _ref2;\n          return _createVNode(VField, _mergeProps({\n            \"ref\": vFieldRef,\n            \"style\": {\n              '--v-textarea-control-height': controlHeight.value\n            },\n            \"onClick\": onControlClick,\n            \"onMousedown\": onControlMousedown,\n            \"onClick:clear\": onClear,\n            \"onClick:prependInner\": props['onClick:prependInner'],\n            \"onClick:appendInner\": props['onClick:appendInner']\n          }, fieldProps, {\n            \"id\": id.value,\n            \"active\": isActive.value || isDirty.value,\n            \"centerAffix\": rows.value === 1 && !isPlainOrUnderlined.value,\n            \"dirty\": isDirty.value || props.dirty,\n            \"disabled\": isDisabled.value,\n            \"focused\": isFocused.value,\n            \"error\": isValid.value === false\n          }), { ...slots,\n            default: _ref3 => {\n              let {\n                props: {\n                  class: fieldClass,\n                  ...slotProps\n                }\n              } = _ref3;\n              return _createVNode(_Fragment, null, [props.prefix && _createVNode(\"span\", {\n                \"class\": \"v-text-field__prefix\"\n              }, [props.prefix]), _withDirectives(_createVNode(\"textarea\", _mergeProps({\n                \"ref\": textareaRef,\n                \"class\": fieldClass,\n                \"value\": model.value,\n                \"onInput\": onInput,\n                \"autofocus\": props.autofocus,\n                \"readonly\": isReadonly.value,\n                \"disabled\": isDisabled.value,\n                \"placeholder\": props.placeholder,\n                \"rows\": props.rows,\n                \"name\": props.name,\n                \"onFocus\": onFocus,\n                \"onBlur\": blur\n              }, slotProps, inputAttrs), null), [[_resolveDirective(\"intersect\"), {\n                handler: onIntersect\n              }, null, {\n                once: true\n              }]]), props.autoGrow && _withDirectives(_createVNode(\"textarea\", {\n                \"class\": [fieldClass, 'v-textarea__sizer'],\n                \"id\": `${slotProps.id}-sizer`,\n                \"onUpdate:modelValue\": $event => model.value = $event,\n                \"ref\": sizerRef,\n                \"readonly\": true,\n                \"aria-hidden\": \"true\"\n              }, null), [[_vModelText, model.value]]), props.suffix && _createVNode(\"span\", {\n                \"class\": \"v-text-field__suffix\"\n              }, [props.suffix])]);\n            }\n          });\n        },\n        details: hasDetails ? slotProps => _createVNode(_Fragment, null, [slots.details?.(slotProps), hasCounter && _createVNode(_Fragment, null, [_createVNode(\"span\", null, null), _createVNode(VCounter, {\n          \"active\": props.persistentCounter || isFocused.value,\n          \"value\": counterValue.value,\n          \"max\": max.value,\n          \"disabled\": props.disabled\n        }, slots.counter)])]) : undefined\n      });\n    });\n    return forwardRefs({}, vInputRef, vFieldRef, textareaRef);\n  }\n\n});","map":{"version":3,"mappings":"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","names":["VCounter","VField","filterFieldProps","makeVFieldProps","makeVInputProps","VInput","useFocus","forwardRefs","useProxiedModel","Intersect","computed","nextTick","onBeforeUnmount","onMounted","ref","shallowRef","watch","watchEffect","callEvent","clamp","convertToUnit","filterInputAttrs","genericComponent","propsFactory","useRender","makeVTextareaProps","autoGrow","Boolean","autofocus","counter","Number","String","counterValue","Function","prefix","placeholder","persistentPlaceholder","persistentCounter","noResize","rows","type","default","validator","v","isNaN","parseFloat","maxRows","suffix","modelModifiers","Object","VTextarea","name","directives","inheritAttrs","props","emits","e","focused","val","setup","_ref","attrs","emit","slots","model","isFocused","focus","blur","value","toString","length","max","maxlength","undefined","onIntersect","isIntersecting","entries","target","vInputRef","vFieldRef","controlHeight","textareaRef","isActive","active","onFocus","document","activeElement","onControlClick","onControlMousedown","onClear","stopPropagation","onInput","el","trim","caretPosition","selectionStart","selectionEnd","sizerRef","isPlainOrUnderlined","includes","variant","calculateInputHeight","style","getComputedStyle","fieldStyle","$el","padding","getPropertyValue","height","scrollHeight","lineHeight","minHeight","Math","maxHeight","Infinity","newHeight","floor","density","observer","ResizeObserver","observe","disconnect","hasCounter","hasDetails","details","rootAttrs","inputAttrs","modelValue","_","inputProps","filterProps","fieldProps","$event","class","_ref2","id","isDisabled","isDirty","isReadonly","isValid","dirty","_ref3","fieldClass","slotProps","_createVNode","_withDirectives","handler","once","disabled"],"sources":["../../../src/components/VTextarea/VTextarea.tsx"],"sourcesContent":["// Styles\nimport './VTextarea.sass'\nimport '../VTextField/VTextField.sass'\n\n// Components\nimport { VCounter } from '@/components/VCounter/VCounter'\nimport { VField } from '@/components/VField'\nimport { filterFieldProps, makeVFieldProps } from '@/components/VField/VField'\nimport { makeVInputProps, VInput } from '@/components/VInput/VInput'\n\n// Composables\nimport { useFocus } from '@/composables/focus'\nimport { forwardRefs } from '@/composables/forwardRefs'\nimport { useProxiedModel } from '@/composables/proxiedModel'\n\n// Directives\nimport Intersect from '@/directives/intersect'\n\n// Utilities\nimport { computed, nextTick, onBeforeUnmount, onMounted, ref, shallowRef, watch, watchEffect } from 'vue'\nimport { callEvent, clamp, convertToUnit, filterInputAttrs, genericComponent, propsFactory, useRender } from '@/util'\n\n// Types\nimport type { PropType } from 'vue'\nimport type { VCounterSlot } from '@/components/VCounter/VCounter'\nimport type { VFieldSlots } from '@/components/VField/VField'\nimport type { VInputSlots } from '@/components/VInput/VInput'\n\nexport const makeVTextareaProps = propsFactory({\n  autoGrow: Boolean,\n  autofocus: Boolean,\n  counter: [Boolean, Number, String] as PropType<true | number | string>,\n  counterValue: Function as PropType<(value: any) => number>,\n  prefix: String,\n  placeholder: String,\n  persistentPlaceholder: Boolean,\n  persistentCounter: Boolean,\n  noResize: Boolean,\n  rows: {\n    type: [Number, String],\n    default: 5,\n    validator: (v: any) => !isNaN(parseFloat(v)),\n  },\n  maxRows: {\n    type: [Number, String],\n    validator: (v: any) => !isNaN(parseFloat(v)),\n  },\n  suffix: String,\n  modelModifiers: Object as PropType<Record<string, boolean>>,\n\n  ...makeVInputProps(),\n  ...makeVFieldProps(),\n}, 'VTextarea')\n\ntype VTextareaSlots = Omit<VInputSlots & VFieldSlots, 'default'> & {\n  counter: VCounterSlot\n}\n\nexport const VTextarea = genericComponent<VTextareaSlots>()({\n  name: 'VTextarea',\n\n  directives: { Intersect },\n\n  inheritAttrs: false,\n\n  props: makeVTextareaProps(),\n\n  emits: {\n    'click:control': (e: MouseEvent) => true,\n    'mousedown:control': (e: MouseEvent) => true,\n    'update:focused': (focused: boolean) => true,\n    'update:modelValue': (val: string) => true,\n  },\n\n  setup (props, { attrs, emit, slots }) {\n    const model = useProxiedModel(props, 'modelValue')\n    const { isFocused, focus, blur } = useFocus(props)\n    const counterValue = computed(() => {\n      return typeof props.counterValue === 'function'\n        ? props.counterValue(model.value)\n        : (model.value || '').toString().length\n    })\n    const max = computed(() => {\n      if (attrs.maxlength) return attrs.maxlength as string | number\n\n      if (\n        !props.counter ||\n        (typeof props.counter !== 'number' &&\n        typeof props.counter !== 'string')\n      ) return undefined\n\n      return props.counter\n    })\n\n    function onIntersect (\n      isIntersecting: boolean,\n      entries: IntersectionObserverEntry[]\n    ) {\n      if (!props.autofocus || !isIntersecting) return\n\n      (entries[0].target as HTMLInputElement)?.focus?.()\n    }\n\n    const vInputRef = ref<VInput>()\n    const vFieldRef = ref<VInput>()\n    const controlHeight = shallowRef('')\n    const textareaRef = ref<HTMLInputElement>()\n    const isActive = computed(() => (\n      props.persistentPlaceholder ||\n      isFocused.value ||\n      props.active\n    ))\n\n    function onFocus () {\n      if (textareaRef.value !== document.activeElement) {\n        textareaRef.value?.focus()\n      }\n\n      if (!isFocused.value) focus()\n    }\n    function onControlClick (e: MouseEvent) {\n      onFocus()\n\n      emit('click:control', e)\n    }\n    function onControlMousedown (e: MouseEvent) {\n      emit('mousedown:control', e)\n    }\n    function onClear (e: MouseEvent) {\n      e.stopPropagation()\n\n      onFocus()\n\n      nextTick(() => {\n        model.value = ''\n\n        callEvent(props['onClick:clear'], e)\n      })\n    }\n    function onInput (e: Event) {\n      const el = e.target as HTMLTextAreaElement\n      model.value = el.value\n      if (props.modelModifiers?.trim) {\n        const caretPosition = [el.selectionStart, el.selectionEnd]\n        nextTick(() => {\n          el.selectionStart = caretPosition[0]\n          el.selectionEnd = caretPosition[1]\n        })\n      }\n    }\n\n    const sizerRef = ref<HTMLTextAreaElement>()\n    const rows = ref(+props.rows)\n    const isPlainOrUnderlined = computed(() => ['plain', 'underlined'].includes(props.variant))\n    watchEffect(() => {\n      if (!props.autoGrow) rows.value = +props.rows\n    })\n    function calculateInputHeight () {\n      if (!props.autoGrow) return\n\n      nextTick(() => {\n        if (!sizerRef.value || !vFieldRef.value) return\n\n        const style = getComputedStyle(sizerRef.value)\n        const fieldStyle = getComputedStyle(vFieldRef.value.$el)\n\n        const padding = parseFloat(style.getPropertyValue('--v-field-padding-top')) +\n          parseFloat(style.getPropertyValue('--v-input-padding-top')) +\n          parseFloat(style.getPropertyValue('--v-field-padding-bottom'))\n\n        const height = sizerRef.value.scrollHeight\n        const lineHeight = parseFloat(style.lineHeight)\n        const minHeight = Math.max(\n          parseFloat(props.rows) * lineHeight + padding,\n          parseFloat(fieldStyle.getPropertyValue('--v-input-control-height'))\n        )\n        const maxHeight = parseFloat(props.maxRows!) * lineHeight + padding || Infinity\n        const newHeight = clamp(height ?? 0, minHeight, maxHeight)\n        rows.value = Math.floor((newHeight - padding) / lineHeight)\n\n        controlHeight.value = convertToUnit(newHeight)\n      })\n    }\n\n    onMounted(calculateInputHeight)\n    watch(model, calculateInputHeight)\n    watch(() => props.rows, calculateInputHeight)\n    watch(() => props.maxRows, calculateInputHeight)\n    watch(() => props.density, calculateInputHeight)\n\n    let observer: ResizeObserver | undefined\n    watch(sizerRef, val => {\n      if (val) {\n        observer = new ResizeObserver(calculateInputHeight)\n        observer.observe(sizerRef.value!)\n      } else {\n        observer?.disconnect()\n      }\n    })\n    onBeforeUnmount(() => {\n      observer?.disconnect()\n    })\n\n    useRender(() => {\n      const hasCounter = !!(slots.counter || props.counter || props.counterValue)\n      const hasDetails = !!(hasCounter || slots.details)\n      const [rootAttrs, inputAttrs] = filterInputAttrs(attrs)\n      const { modelValue: _, ...inputProps } = VInput.filterProps(props)\n      const fieldProps = filterFieldProps(props)\n\n      return (\n        <VInput\n          ref={ vInputRef }\n          v-model={ model.value }\n          class={[\n            'v-textarea v-text-field',\n            {\n              'v-textarea--prefixed': props.prefix,\n              'v-textarea--suffixed': props.suffix,\n              'v-text-field--prefixed': props.prefix,\n              'v-text-field--suffixed': props.suffix,\n              'v-textarea--auto-grow': props.autoGrow,\n              'v-textarea--no-resize': props.noResize || props.autoGrow,\n              'v-input--plain-underlined': isPlainOrUnderlined.value,\n            },\n            props.class,\n          ]}\n          style={ props.style }\n          { ...rootAttrs }\n          { ...inputProps }\n          centerAffix={ rows.value === 1 && !isPlainOrUnderlined.value }\n          focused={ isFocused.value }\n        >\n          {{\n            ...slots,\n            default: ({\n              id,\n              isDisabled,\n              isDirty,\n              isReadonly,\n              isValid,\n            }) => (\n              <VField\n                ref={ vFieldRef }\n                style={{\n                  '--v-textarea-control-height': controlHeight.value,\n                }}\n                onClick={ onControlClick }\n                onMousedown={ onControlMousedown }\n                onClick:clear={ onClear }\n                onClick:prependInner={ props['onClick:prependInner'] }\n                onClick:appendInner={ props['onClick:appendInner'] }\n                { ...fieldProps }\n                id={ id.value }\n                active={ isActive.value || isDirty.value }\n                centerAffix={ rows.value === 1 && !isPlainOrUnderlined.value }\n                dirty={ isDirty.value || props.dirty }\n                disabled={ isDisabled.value }\n                focused={ isFocused.value }\n                error={ isValid.value === false }\n              >\n                {{\n                  ...slots,\n                  default: ({\n                    props: { class: fieldClass, ...slotProps },\n                  }) => (\n                    <>\n                      { props.prefix && (\n                        <span class=\"v-text-field__prefix\">\n                          { props.prefix }\n                        </span>\n                      )}\n\n                      <textarea\n                        ref={ textareaRef }\n                        class={ fieldClass }\n                        value={ model.value }\n                        onInput={ onInput }\n                        v-intersect={[{\n                          handler: onIntersect,\n                        }, null, ['once']]}\n                        autofocus={ props.autofocus }\n                        readonly={ isReadonly.value }\n                        disabled={ isDisabled.value }\n                        placeholder={ props.placeholder }\n                        rows={ props.rows }\n                        name={ props.name }\n                        onFocus={ onFocus }\n                        onBlur={ blur }\n                        { ...slotProps }\n                        { ...inputAttrs }\n                      />\n\n                      { props.autoGrow && (\n                        <textarea\n                          class={[\n                            fieldClass,\n                            'v-textarea__sizer',\n                          ]}\n                          id={ `${slotProps.id}-sizer` }\n                          v-model={ model.value }\n                          ref={ sizerRef }\n                          readonly\n                          aria-hidden=\"true\"\n                        />\n                      )}\n\n                      { props.suffix && (\n                        <span class=\"v-text-field__suffix\">\n                          { props.suffix }\n                        </span>\n                      )}\n                    </>\n                  ),\n                }}\n              </VField>\n            ),\n            details: hasDetails ? slotProps => (\n              <>\n                { slots.details?.(slotProps) }\n\n                { hasCounter && (\n                  <>\n                    <span />\n\n                    <VCounter\n                      active={ props.persistentCounter || isFocused.value }\n                      value={ counterValue.value }\n                      max={ max.value }\n                      disabled={ props.disabled }\n                      v-slots:default={ slots.counter }\n                    />\n                  </>\n                )}\n              </>\n            ) : undefined,\n          }}\n        </VInput>\n      )\n    })\n\n    return forwardRefs({}, vInputRef, vFieldRef, textareaRef)\n  },\n})\n\nexport type VTextarea = InstanceType<typeof VTextarea>\n"]},"metadata":{},"sourceType":"module"}