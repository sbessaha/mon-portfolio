{"ast":null,"code":"// Utilities\nimport { onBeforeUnmount, readonly, ref, watch } from 'vue';\nimport { templateRef } from \"../util/index.mjs\";\nimport { IN_BROWSER } from \"../util/globals.mjs\"; // Types\n\nexport function useResizeObserver(callback) {\n  let box = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'content';\n  const resizeRef = templateRef();\n  const contentRect = ref();\n\n  if (IN_BROWSER) {\n    const observer = new ResizeObserver(entries => {\n      callback?.(entries, observer);\n      if (!entries.length) return;\n\n      if (box === 'content') {\n        contentRect.value = entries[0].contentRect;\n      } else {\n        contentRect.value = entries[0].target.getBoundingClientRect();\n      }\n    });\n    onBeforeUnmount(() => {\n      observer.disconnect();\n    });\n    watch(() => resizeRef.el, (newValue, oldValue) => {\n      if (oldValue) {\n        observer.unobserve(oldValue);\n        contentRect.value = undefined;\n      }\n\n      if (newValue) observer.observe(newValue);\n    }, {\n      flush: 'post'\n    });\n  }\n\n  return {\n    resizeRef,\n    contentRect: readonly(contentRect)\n  };\n}","map":{"version":3,"mappings":"AAAA;AACA,SAASA,eAAT,EAA0BC,QAA1B,EAAoCC,GAApC,EAAyCC,KAAzC,QAAsD,KAAtD;AAA2D,SAClDC,WADkD,QACvC,mBADuC;AACvC,SACXC,UADW,QACD,qBADC,C,CAGpB;;AASA,OAAO,SAASC,iBAAT,CAA4BC,QAA5B,EAAmH;EAAA,IAApDC,GAAyB,uEAAG,SAAwB;EACxH,MAAMC,SAAS,GAAGL,WAAW,EAA7B;EACA,MAAMM,WAAW,GAAGR,GAAG,EAAvB;;EAEA,IAAIG,UAAJ,EAAgB;IACd,MAAMM,QAAQ,GAAG,IAAIC,cAAJ,CAAoBC,OAA8B,IAAK;MACtEN,QAAQ,GAAGM,OAAH,EAAYF,QAAZ,CAARJ;MAEA,IAAI,CAACM,OAAO,CAACC,MAAb,EAAqB;;MAErB,IAAIN,GAAG,KAAK,SAAZ,EAAuB;QACrBE,WAAW,CAACK,KAAZL,GAAoBG,OAAO,CAAC,CAAD,CAAPA,CAAWH,WAA/BA;MACD,CAFD,MAEO;QACLA,WAAW,CAACK,KAAZL,GAAoBG,OAAO,CAAC,CAAD,CAAPA,CAAWG,MAAXH,CAAkBI,qBAAlBJ,EAApBH;MACF;IACD,CAVgB,CAAjB;IAYAV,eAAe,CAAC,MAAM;MACpBW,QAAQ,CAACO,UAATP;IACD,CAFc,CAAfX;IAIAG,KAAK,CAAC,MAAMM,SAAS,CAACU,EAAjB,EAAqB,CAACC,QAAD,EAAWC,QAAX,KAAwB;MAChD,IAAIA,QAAJ,EAAc;QACZV,QAAQ,CAACW,SAATX,CAAmBU,QAAnBV;QACAD,WAAW,CAACK,KAAZL,GAAoBa,SAApBb;MACF;;MAEA,IAAIU,QAAJ,EAAcT,QAAQ,CAACa,OAATb,CAAiBS,QAAjBT;IACf,CAPI,EAOF;MACDc,KAAK,EAAE;IADN,CAPE,CAALtB;EAUF;;EAEA,OAAO;IACLM,SADK;IAELC,WAAW,EAAET,QAAQ,CAACS,WAAD;EAFhB,CAAP;AAIF","names":["onBeforeUnmount","readonly","ref","watch","templateRef","IN_BROWSER","useResizeObserver","callback","box","resizeRef","contentRect","observer","ResizeObserver","entries","length","value","target","getBoundingClientRect","disconnect","el","newValue","oldValue","unobserve","undefined","observe","flush"],"sources":["../../src/composables/resizeObserver.ts"],"sourcesContent":["// Utilities\nimport { onBeforeUnmount, readonly, ref, watch } from 'vue'\nimport { templateRef } from '@/util'\nimport { IN_BROWSER } from '@/util/globals'\n\n// Types\nimport type { DeepReadonly, Ref } from 'vue'\nimport type { TemplateRef } from '@/util'\n\ninterface ResizeState {\n  resizeRef: TemplateRef\n  contentRect: DeepReadonly<Ref<DOMRectReadOnly | undefined>>\n}\n\nexport function useResizeObserver (callback?: ResizeObserverCallback, box: 'content' | 'border' = 'content'): ResizeState {\n  const resizeRef = templateRef()\n  const contentRect = ref<DOMRectReadOnly>()\n\n  if (IN_BROWSER) {\n    const observer = new ResizeObserver((entries: ResizeObserverEntry[]) => {\n      callback?.(entries, observer)\n\n      if (!entries.length) return\n\n      if (box === 'content') {\n        contentRect.value = entries[0].contentRect\n      } else {\n        contentRect.value = entries[0].target.getBoundingClientRect()\n      }\n    })\n\n    onBeforeUnmount(() => {\n      observer.disconnect()\n    })\n\n    watch(() => resizeRef.el, (newValue, oldValue) => {\n      if (oldValue) {\n        observer.unobserve(oldValue)\n        contentRect.value = undefined\n      }\n\n      if (newValue) observer.observe(newValue)\n    }, {\n      flush: 'post',\n    })\n  }\n\n  return {\n    resizeRef,\n    contentRect: readonly(contentRect),\n  }\n}\n"]},"metadata":{},"sourceType":"module"}