{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport { computed, inject, provide, ref } from 'vue';\nimport { rtl } from \"../locale/index.mjs\"; // Types\n\nexport const RtlSymbol = Symbol.for('vuetify:rtl');\nexport function createRtl(localeScope, options) {\n  return createRtlScope({\n    rtl: { ...rtl,\n      ...((options == null ? void 0 : options.rtl) ?? {})\n    },\n    isRtl: ref(false),\n    rtlClasses: ref('')\n  }, localeScope);\n}\nexport function createRtlScope(currentScope, localeScope, options) {\n  const isRtl = computed(() => {\n    if (typeof (options == null ? void 0 : options.rtl) === 'boolean') return options.rtl;\n\n    if (localeScope.current.value && currentScope.rtl.hasOwnProperty(localeScope.current.value)) {\n      return currentScope.rtl[localeScope.current.value];\n    }\n\n    return currentScope.isRtl.value;\n  });\n  return {\n    isRtl,\n    rtl: currentScope.rtl,\n    rtlClasses: computed(() => `v-locale--is-${isRtl.value ? 'rtl' : 'ltr'}`)\n  };\n}\nexport function provideRtl(props, localeScope) {\n  const currentScope = inject(RtlSymbol);\n  if (!currentScope) throw new Error('[Vuetify] Could not find injected rtl instance');\n  const newScope = createRtlScope(currentScope, localeScope, props);\n  provide(RtlSymbol, newScope);\n  return newScope;\n}\nexport function useRtl() {\n  const currentScope = inject(RtlSymbol);\n  if (!currentScope) throw new Error('[Vuetify] Could not find injected rtl instance');\n  return currentScope;\n}","map":{"version":3,"mappings":";AAAA,SAASA,QAAT,EAAmBC,MAAnB,EAA2BC,OAA3B,EAAoCC,GAApC,QAA+C,KAA/C;SACSC,W,uBAET;;AAkBA,OAAO,MAAMC,SAAoC,GAAGC,MAAM,CAACC,GAAPD,CAAW,aAAXA,CAA7C;AAEP,OAAO,SAASE,SAAT,CAAoBC,WAApB,EAAiDC,OAAjD,EAAuE;EAC5E,OAAOC,cAAc,CAAC;IACpBP,GAAG,EAAE,EACH,GAAGA,GADA;MAEH,IAAI,QAAO,QAAPM,mBAAO,CAAEN,GAAT,KAAgB,EAApB;IAFG,CADe;IAKpBQ,KAAK,EAAET,GAAG,CAAC,KAAD,CALU;IAMpBU,UAAU,EAAEV,GAAG,CAAC,EAAD;EANK,CAAD,EAOlBM,WAPkB,CAArB;AAQD;AAED,OAAO,SAASE,cAAT,CAAyBG,YAAzB,EAAoDL,WAApD,EAAiFC,OAAjF,EAAkH;EACvH,MAAME,KAAK,GAAGZ,QAAQ,CAAC,MAAM;IAC3B,IAAI,QAAOU,OAAP,QAAOA,GAAP,MAAOA,UAAO,CAAEN,GAAhB,MAAwB,SAA5B,EAAuC,OAAOM,OAAO,CAACN,GAAf;;IACvC,IAAIK,WAAW,CAACM,OAAZN,CAAoBO,KAApBP,IAA6BK,YAAY,CAACV,GAAbU,CAAiBG,cAAjBH,CAAgCL,WAAW,CAACM,OAAZN,CAAoBO,KAApDF,CAAjC,EAA6F;MAC3F,OAAOA,YAAY,CAACV,GAAbU,CAAiBL,WAAW,CAACM,OAAZN,CAAoBO,KAArCF,CAAP;IACD;;IAED,OAAOA,YAAY,CAACF,KAAbE,CAAmBE,KAA1B;EANoB,EAAtB;EASA,OAAO;IACLJ,KADK;IAELR,GAAG,EAAEU,YAAY,CAACV,GAFb;IAGLS,UAAU,EAAEb,QAAQ,CAAC,MAAO,gBAAeY,KAAK,CAACI,KAANJ,GAAc,KAAdA,GAAsB,KAAM,EAAnD;EAHf,CAAP;AAKD;AAED,OAAO,SAASM,UAAT,CAAqBC,KAArB,EAAsCV,WAAtC,EAAmE;EACxE,MAAMK,YAAY,GAAGb,MAAM,CAACI,SAAD,CAA3B;EAEA,IAAI,CAACS,YAAL,EAAmB,MAAM,IAAIM,KAAJ,CAAU,gDAAV,CAAN;EAEnB,MAAMC,QAAQ,GAAGV,cAAc,CAACG,YAAD,EAAeL,WAAf,EAA4BU,KAA5B,CAA/B;EAEAjB,OAAO,CAACG,SAAD,EAAYgB,QAAZ,CAAPnB;EAEA,OAAOmB,QAAP;AACD;AAED,OAAO,SAASC,MAAT,GAAmB;EACxB,MAAMR,YAAY,GAAGb,MAAM,CAACI,SAAD,CAA3B;EAEA,IAAI,CAACS,YAAL,EAAmB,MAAM,IAAIM,KAAJ,CAAU,gDAAV,CAAN;EAEnB,OAAON,YAAP;AACD","names":["computed","inject","provide","ref","rtl","RtlSymbol","Symbol","for","createRtl","localeScope","options","createRtlScope","isRtl","rtlClasses","currentScope","current","value","hasOwnProperty","provideRtl","props","Error","newScope","useRtl"],"sources":["../../src/composables/rtl.ts"],"sourcesContent":["import { computed, inject, provide, ref } from 'vue'\nimport { rtl } from '@/locale'\n\n// Types\nimport type { InjectionKey, Ref } from 'vue'\nimport type { LocaleInstance } from './locale'\n\nexport interface RtlOptions {\n  rtl?: Record<string, boolean>\n}\n\nexport interface RtlProps {\n  rtl?: boolean\n}\n\nexport interface RtlInstance {\n  isRtl: Ref<boolean>\n  rtl: Record<string, boolean>\n  rtlClasses: Ref<string>\n}\n\nexport const RtlSymbol: InjectionKey<RtlInstance> = Symbol.for('vuetify:rtl')\n\nexport function createRtl (localeScope: LocaleInstance, options?: RtlOptions) {\n  return createRtlScope({\n    rtl: {\n      ...rtl,\n      ...(options?.rtl ?? {}),\n    },\n    isRtl: ref(false),\n    rtlClasses: ref(''),\n  }, localeScope)\n}\n\nexport function createRtlScope (currentScope: RtlInstance, localeScope: LocaleInstance, options?: RtlProps): RtlInstance {\n  const isRtl = computed(() => {\n    if (typeof options?.rtl === 'boolean') return options.rtl\n    if (localeScope.current.value && currentScope.rtl.hasOwnProperty(localeScope.current.value)) {\n      return currentScope.rtl[localeScope.current.value]\n    }\n\n    return currentScope.isRtl.value\n  })\n\n  return {\n    isRtl,\n    rtl: currentScope.rtl,\n    rtlClasses: computed(() => `v-locale--is-${isRtl.value ? 'rtl' : 'ltr'}`),\n  }\n}\n\nexport function provideRtl (props: RtlProps, localeScope: LocaleInstance) {\n  const currentScope = inject(RtlSymbol)\n\n  if (!currentScope) throw new Error('[Vuetify] Could not find injected rtl instance')\n\n  const newScope = createRtlScope(currentScope, localeScope, props)\n\n  provide(RtlSymbol, newScope)\n\n  return newScope\n}\n\nexport function useRtl () {\n  const currentScope = inject(RtlSymbol)\n\n  if (!currentScope) throw new Error('[Vuetify] Could not find injected rtl instance')\n\n  return currentScope\n}\n"]},"metadata":{},"sourceType":"module"}