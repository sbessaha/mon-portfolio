{"ast":null,"code":"import { resolveDirective as _resolveDirective, createVNode as _createVNode } from \"vue\"; // Styles\n\nimport \"./VInput.css\"; // Components\n\nimport { VMessages } from \"../VMessages/index.mjs\"; // Composables\n\nimport { IconValue } from \"../../composables/icons.mjs\";\nimport { makeDensityProps, useDensity } from \"../../composables/density.mjs\";\nimport { makeValidationProps, useValidation } from \"../../composables/validation.mjs\"; // Utilities\n\nimport { computed } from 'vue';\nimport { EventProp, genericComponent, getUid, isOn, pick, propsFactory, useRender } from \"../../util/index.mjs\"; // Types\n\nimport { useInputIcon } from \"./InputIcon.mjs\";\nexport const makeVInputProps = propsFactory({\n  id: String,\n  appendIcon: IconValue,\n  prependIcon: IconValue,\n  hideDetails: [Boolean, String],\n  messages: {\n    type: [Array, String],\n    default: () => []\n  },\n  direction: {\n    type: String,\n    default: 'horizontal',\n    validator: v => ['horizontal', 'vertical'].includes(v)\n  },\n  'onClick:prepend': EventProp,\n  'onClick:append': EventProp,\n  ...makeDensityProps(),\n  ...makeValidationProps()\n});\nexport const VInput = genericComponent()({\n  name: 'VInput',\n  props: { ...makeVInputProps()\n  },\n  emits: {\n    'update:modelValue': val => true\n  },\n\n  setup(props, _ref) {\n    let {\n      attrs,\n      slots,\n      emit\n    } = _ref;\n    const {\n      densityClasses\n    } = useDensity(props);\n    const {\n      InputIcon\n    } = useInputIcon(props);\n    const uid = getUid();\n    const id = computed(() => props.id || `input-${uid}`);\n    const {\n      errorMessages,\n      isDirty,\n      isDisabled,\n      isReadonly,\n      isPristine,\n      isValid,\n      isValidating,\n      reset,\n      resetValidation,\n      validate,\n      validationClasses\n    } = useValidation(props, 'v-input', id);\n    const slotProps = computed(() => ({\n      id,\n      isDirty,\n      isDisabled,\n      isReadonly,\n      isPristine,\n      isValid,\n      isValidating,\n      reset,\n      resetValidation,\n      validate\n    }));\n    useRender(() => {\n      var _props$messages, _slots$prepend, _slots$default, _slots$append, _slots$details;\n\n      const hasPrepend = !!(slots.prepend || props.prependIcon);\n      const hasAppend = !!(slots.append || props.appendIcon);\n      const hasMessages = !!((_props$messages = props.messages) != null && _props$messages.length || errorMessages.value.length);\n      const hasDetails = !props.hideDetails || props.hideDetails === 'auto' && (hasMessages || !!slots.details);\n      return _createVNode(\"div\", {\n        \"class\": ['v-input', `v-input--${props.direction}`, densityClasses.value, validationClasses.value]\n      }, [hasPrepend && _createVNode(\"div\", {\n        \"key\": \"prepend\",\n        \"class\": \"v-input__prepend\"\n      }, [props.prependIcon && _createVNode(InputIcon, {\n        \"key\": \"prepend-icon\",\n        \"name\": \"prepend\"\n      }, null), (_slots$prepend = slots.prepend) == null ? void 0 : _slots$prepend.call(slots, slotProps.value)]), slots.default && _createVNode(\"div\", {\n        \"class\": \"v-input__control\"\n      }, [(_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots, slotProps.value)]), hasAppend && _createVNode(\"div\", {\n        \"key\": \"append\",\n        \"class\": \"v-input__append\"\n      }, [(_slots$append = slots.append) == null ? void 0 : _slots$append.call(slots, slotProps.value), props.appendIcon && _createVNode(InputIcon, {\n        \"key\": \"append-icon\",\n        \"name\": \"append\"\n      }, null)]), hasDetails && _createVNode(\"div\", {\n        \"class\": \"v-input__details\"\n      }, [_createVNode(VMessages, {\n        \"active\": hasMessages,\n        \"messages\": errorMessages.value.length > 0 ? errorMessages.value : props.messages\n      }, {\n        message: slots.message\n      }), (_slots$details = slots.details) == null ? void 0 : _slots$details.call(slots, slotProps.value)])]);\n    });\n    return {\n      reset,\n      resetValidation,\n      validate\n    };\n  }\n\n});\nexport function filterInputProps(props) {\n  const keys = Object.keys(VInput.props).filter(k => !isOn(k));\n  return pick(props, keys);\n}","map":{"version":3,"mappings":"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","names":["VMessages","IconValue","makeDensityProps","useDensity","makeValidationProps","useValidation","computed","EventProp","genericComponent","getUid","isOn","pick","propsFactory","useRender","useInputIcon","makeVInputProps","id","String","appendIcon","prependIcon","hideDetails","Boolean","messages","type","Array","default","direction","validator","v","includes","VInput","name","props","emits","val","setup","attrs","slots","emit","_ref","densityClasses","InputIcon","uid","errorMessages","isDirty","isDisabled","isReadonly","isPristine","isValid","isValidating","reset","resetValidation","validate","validationClasses","slotProps","hasPrepend","prepend","hasAppend","append","hasMessages","length","value","hasDetails","details","_slots$prepend","_slots$default","_slots$append","message","_slots$details","filterInputProps","keys","Object","filter","k"],"sources":["../../../src/components/VInput/VInput.tsx"],"sourcesContent":["// Styles\nimport './VInput.sass'\n\n// Components\nimport { VMessages } from '@/components/VMessages'\n\n// Composables\nimport { IconValue } from '@/composables/icons'\nimport { makeDensityProps, useDensity } from '@/composables/density'\nimport { makeValidationProps, useValidation } from '@/composables/validation'\n\n// Utilities\nimport { computed } from 'vue'\nimport { EventProp, genericComponent, getUid, isOn, pick, propsFactory, useRender } from '@/util'\n\n// Types\nimport type { ComputedRef, PropType, Ref } from 'vue'\nimport type { MakeSlots } from '@/util'\nimport { useInputIcon } from '@/components/VInput/InputIcon'\n\nexport interface VInputSlot {\n  id: ComputedRef<string>\n  isDirty: ComputedRef<boolean>\n  isDisabled: ComputedRef<boolean>\n  isReadonly: ComputedRef<boolean>\n  isPristine: Ref<boolean>\n  isValid: ComputedRef<boolean | null>\n  isValidating: Ref<boolean>\n  reset: () => void\n  resetValidation: () => void\n  validate: () => void\n}\n\nexport const makeVInputProps = propsFactory({\n  id: String,\n  appendIcon: IconValue,\n  prependIcon: IconValue,\n  hideDetails: [Boolean, String] as PropType<boolean | 'auto'>,\n  messages: {\n    type: [Array, String] as PropType<string | string[]>,\n    default: () => ([]),\n  },\n  direction: {\n    type: String as PropType<'horizontal' | 'vertical'>,\n    default: 'horizontal',\n    validator: (v: any) => ['horizontal', 'vertical'].includes(v),\n  },\n\n  'onClick:prepend': EventProp,\n  'onClick:append': EventProp,\n\n  ...makeDensityProps(),\n  ...makeValidationProps(),\n})\n\nexport type VInputSlots = MakeSlots<{\n  default: [VInputSlot]\n  prepend: [VInputSlot]\n  append: [VInputSlot]\n  details: [VInputSlot]\n}>\n\nexport const VInput = genericComponent<new <T>() => {\n  $slots: VInputSlots\n}>()({\n  name: 'VInput',\n\n  props: {\n    ...makeVInputProps(),\n  },\n\n  emits: {\n    'update:modelValue': (val: any) => true,\n  },\n\n  setup (props, { attrs, slots, emit }) {\n    const { densityClasses } = useDensity(props)\n    const { InputIcon } = useInputIcon(props)\n\n    const uid = getUid()\n    const id = computed(() => props.id || `input-${uid}`)\n\n    const {\n      errorMessages,\n      isDirty,\n      isDisabled,\n      isReadonly,\n      isPristine,\n      isValid,\n      isValidating,\n      reset,\n      resetValidation,\n      validate,\n      validationClasses,\n    } = useValidation(props, 'v-input', id)\n\n    const slotProps = computed<VInputSlot>(() => ({\n      id,\n      isDirty,\n      isDisabled,\n      isReadonly,\n      isPristine,\n      isValid,\n      isValidating,\n      reset,\n      resetValidation,\n      validate,\n    }))\n\n    useRender(() => {\n      const hasPrepend = !!(slots.prepend || props.prependIcon)\n      const hasAppend = !!(slots.append || props.appendIcon)\n      const hasMessages = !!(\n        props.messages?.length ||\n        errorMessages.value.length\n      )\n      const hasDetails = !props.hideDetails || (\n        props.hideDetails === 'auto' &&\n        (hasMessages || !!slots.details)\n      )\n\n      return (\n        <div class={[\n          'v-input',\n          `v-input--${props.direction}`,\n          densityClasses.value,\n          validationClasses.value,\n        ]}\n        >\n          { hasPrepend && (\n            <div key=\"prepend\" class=\"v-input__prepend\">\n              { props.prependIcon && (\n                <InputIcon\n                  key=\"prepend-icon\"\n                  name=\"prepend\"\n                />\n              ) }\n\n              { slots.prepend?.(slotProps.value) }\n            </div>\n          ) }\n\n          { slots.default && (\n            <div class=\"v-input__control\">\n              { slots.default?.(slotProps.value) }\n            </div>\n          ) }\n\n          { hasAppend && (\n            <div key=\"append\" class=\"v-input__append\">\n              { slots.append?.(slotProps.value) }\n\n              { props.appendIcon && (\n                <InputIcon\n                  key=\"append-icon\"\n                  name=\"append\"\n                />\n              ) }\n            </div>\n          ) }\n\n          { hasDetails && (\n            <div class=\"v-input__details\">\n              <VMessages\n                active={ hasMessages }\n                messages={ errorMessages.value.length > 0\n                  ? errorMessages.value\n                  : props.messages\n                }\n                v-slots={{ message: slots.message }}\n              />\n\n              { slots.details?.(slotProps.value) }\n            </div>\n          ) }\n        </div>\n      )\n    })\n\n    return {\n      reset,\n      resetValidation,\n      validate,\n    }\n  },\n})\n\nexport type VInput = InstanceType<typeof VInput>\n\nexport function filterInputProps (props: Record<string, unknown>) {\n  const keys = Object.keys(VInput.props).filter(k => !isOn(k))\n  return pick(props, keys)\n}\n"]},"metadata":{},"sourceType":"module"}