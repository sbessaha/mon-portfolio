{"ast":null,"code":"const Refs = Symbol('Forwarded refs');\n/** Omit properties starting with P */\n\nexport function forwardRefs(target) {\n  for (var _len = arguments.length, refs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    refs[_key - 1] = arguments[_key];\n  }\n\n  target[Refs] = refs;\n  return new Proxy(target, {\n    get(target, key) {\n      if (Reflect.has(target, key)) {\n        return Reflect.get(target, key);\n      }\n\n      for (const ref of refs) {\n        if (ref.value && Reflect.has(ref.value, key)) {\n          const val = Reflect.get(ref.value, key);\n          return typeof val === 'function' ? val.bind(ref.value) : val;\n        }\n      }\n    },\n\n    getOwnPropertyDescriptor(target, key) {\n      const descriptor = Reflect.getOwnPropertyDescriptor(target, key);\n      if (descriptor) return descriptor; // Skip internal properties\n\n      if (typeof key === 'symbol' || key.startsWith('__')) return; // Check each ref's own properties\n\n      for (const ref of refs) {\n        if (!ref.value) continue;\n        const descriptor = Reflect.getOwnPropertyDescriptor(ref.value, key);\n        if (descriptor) return descriptor;\n\n        if ('_' in ref.value && 'setupState' in ref.value._) {\n          const descriptor = Reflect.getOwnPropertyDescriptor(ref.value._.setupState, key);\n          if (descriptor) return descriptor;\n        }\n      } // Recursive search up each ref's prototype\n\n\n      for (const ref of refs) {\n        let obj = ref.value && Object.getPrototypeOf(ref.value);\n\n        while (obj) {\n          const descriptor = Reflect.getOwnPropertyDescriptor(obj, key);\n          if (descriptor) return descriptor;\n          obj = Object.getPrototypeOf(obj);\n        }\n      } // Call forwarded refs' proxies\n\n\n      for (const ref of refs) {\n        const childRefs = ref.value && ref.value[Refs];\n        if (!childRefs) continue;\n        const queue = childRefs.slice();\n\n        while (queue.length) {\n          const ref = queue.shift();\n          const descriptor = Reflect.getOwnPropertyDescriptor(ref.value, key);\n          if (descriptor) return descriptor;\n          const childRefs = ref.value && ref.value[Refs];\n          if (childRefs) queue.push(...childRefs);\n        }\n      }\n\n      return undefined;\n    }\n\n  });\n}","map":{"version":3,"mappings":"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","names":["Refs","Symbol","forwardRefs","target","refs","arguments","Proxy","get","key","Reflect","has","ref","value","val","bind","getOwnPropertyDescriptor","descriptor","startsWith","_","setupState","obj","Object","getPrototypeOf","childRefs","queue","slice","length","shift","push","undefined"],"sources":["../../src/composables/forwardRefs.ts"],"sourcesContent":["import type { ComponentPublicInstance, Ref, UnwrapRef } from 'vue'\nimport type { UnionToIntersection } from '@/util'\n\nconst Refs = Symbol('Forwarded refs')\n\n/** Omit properties starting with P */\ntype OmitPrefix<T, P extends string> = Omit<T, keyof T extends `${P}${any}` ? keyof T : never>\n\nexport function forwardRefs<T extends {}, U extends Ref<HTMLElement | Omit<ComponentPublicInstance, '$emit'> | undefined>[]> (\n  target: T,\n  ...refs: U\n): T & OmitPrefix<UnwrapRef<UnionToIntersection<U[number]>>, '$'> {\n  (target as any)[Refs] = refs\n\n  return new Proxy(target, {\n    get (target, key) {\n      if (Reflect.has(target, key)) {\n        return Reflect.get(target, key)\n      }\n      for (const ref of refs) {\n        if (ref.value && Reflect.has(ref.value, key)) {\n          const val = Reflect.get(ref.value, key)\n          return typeof val === 'function'\n            ? val.bind(ref.value)\n            : val\n        }\n      }\n    },\n    getOwnPropertyDescriptor (target, key) {\n      const descriptor = Reflect.getOwnPropertyDescriptor(target, key)\n      if (descriptor) return descriptor\n\n      // Skip internal properties\n      if (typeof key === 'symbol' || key.startsWith('__')) return\n\n      // Check each ref's own properties\n      for (const ref of refs) {\n        if (!ref.value) continue\n        const descriptor = Reflect.getOwnPropertyDescriptor(ref.value, key)\n        if (descriptor) return descriptor\n        if ('_' in ref.value && 'setupState' in ref.value._) {\n          const descriptor = Reflect.getOwnPropertyDescriptor(ref.value._.setupState, key)\n          if (descriptor) return descriptor\n        }\n      }\n      // Recursive search up each ref's prototype\n      for (const ref of refs) {\n        let obj = ref.value && Object.getPrototypeOf(ref.value)\n        while (obj) {\n          const descriptor = Reflect.getOwnPropertyDescriptor(obj, key)\n          if (descriptor) return descriptor\n          obj = Object.getPrototypeOf(obj)\n        }\n      }\n      // Call forwarded refs' proxies\n      for (const ref of refs) {\n        const childRefs = ref.value && (ref.value as any)[Refs]\n        if (!childRefs) continue\n        const queue = childRefs.slice()\n        while (queue.length) {\n          const ref = queue.shift()\n          const descriptor = Reflect.getOwnPropertyDescriptor(ref.value, key)\n          if (descriptor) return descriptor\n          const childRefs = ref.value && (ref.value as any)[Refs]\n          if (childRefs) queue.push(...childRefs)\n        }\n      }\n      return undefined\n    },\n  }) as any\n}\n"]},"metadata":{},"sourceType":"module"}