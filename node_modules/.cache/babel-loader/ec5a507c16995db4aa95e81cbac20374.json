{"ast":null,"code":"import { vModelText as _vModelText, withDirectives as _withDirectives, mergeProps as _mergeProps, resolveDirective as _resolveDirective, createVNode as _createVNode, Fragment as _Fragment } from \"vue\"; // Styles\n\nimport \"./VTextarea.css\";\nimport \"../VTextField/VTextField.css\"; // Components\n\nimport { filterFieldProps, makeVFieldProps } from \"../VField/VField.mjs\";\nimport { filterInputProps, makeVInputProps, VInput } from \"../VInput/VInput.mjs\";\nimport { VCounter } from \"../VCounter/index.mjs\";\nimport { VField } from \"../VField/index.mjs\"; // Directives\n\nimport Intersect from \"../../directives/intersect/index.mjs\"; // Composables\n\nimport { forwardRefs } from \"../../composables/forwardRefs.mjs\";\nimport { useProxiedModel } from \"../../composables/proxiedModel.mjs\"; // Utilities\n\nimport { computed, nextTick, onBeforeUnmount, onMounted, ref, watch } from 'vue';\nimport { callEvent, clamp, convertToUnit, defineComponent, filterInputAttrs, useRender } from \"../../util/index.mjs\"; // Types\n\nexport const VTextarea = defineComponent({\n  name: 'VTextarea',\n  directives: {\n    Intersect\n  },\n  inheritAttrs: false,\n  props: {\n    autoGrow: Boolean,\n    autofocus: Boolean,\n    counter: [Boolean, Number, String],\n    counterValue: Function,\n    hint: String,\n    persistentHint: Boolean,\n    prefix: String,\n    placeholder: String,\n    persistentPlaceholder: Boolean,\n    persistentCounter: Boolean,\n    noResize: Boolean,\n    rows: {\n      type: [Number, String],\n      default: 5,\n      validator: v => !isNaN(parseFloat(v))\n    },\n    maxRows: {\n      type: [Number, String],\n      validator: v => !isNaN(parseFloat(v))\n    },\n    suffix: String,\n    ...makeVInputProps(),\n    ...makeVFieldProps()\n  },\n  emits: {\n    'click:control': e => true,\n    'update:modelValue': val => true\n  },\n\n  setup(props, _ref) {\n    let {\n      attrs,\n      emit,\n      slots\n    } = _ref;\n    const model = useProxiedModel(props, 'modelValue');\n    const counterValue = computed(() => {\n      return typeof props.counterValue === 'function' ? props.counterValue(model.value) : (model.value || '').toString().length;\n    });\n    const max = computed(() => {\n      if (attrs.maxlength) return attrs.maxlength;\n      if (!props.counter || typeof props.counter !== 'number' && typeof props.counter !== 'string') return undefined;\n      return props.counter;\n    });\n\n    function onIntersect(isIntersecting, entries) {\n      var _entries$0$target, _entries$0$target$foc;\n\n      if (!props.autofocus || !isIntersecting) return;\n      (_entries$0$target = entries[0].target) == null ? void 0 : (_entries$0$target$foc = _entries$0$target.focus) == null ? void 0 : _entries$0$target$foc.call(_entries$0$target);\n    }\n\n    const vInputRef = ref();\n    const vFieldRef = ref();\n    const isFocused = ref(false);\n    const controlHeight = ref('');\n    const textareaRef = ref();\n    const isActive = computed(() => isFocused.value || props.persistentPlaceholder);\n    const messages = computed(() => {\n      return props.messages.length ? props.messages : isActive.value || props.persistentHint ? props.hint : '';\n    });\n\n    function onFocus() {\n      if (textareaRef.value !== document.activeElement) {\n        var _textareaRef$value;\n\n        (_textareaRef$value = textareaRef.value) == null ? void 0 : _textareaRef$value.focus();\n      }\n\n      if (!isFocused.value) isFocused.value = true;\n    }\n\n    function onControlClick(e) {\n      onFocus();\n      emit('click:control', e);\n    }\n\n    function onClear(e) {\n      e.stopPropagation();\n      onFocus();\n      nextTick(() => {\n        model.value = '';\n        callEvent(props['onClick:clear'], e);\n      });\n    }\n\n    function onInput(e) {\n      model.value = e.target.value;\n    }\n\n    const sizerRef = ref();\n\n    function calculateInputHeight() {\n      if (!props.autoGrow) return;\n      nextTick(() => {\n        if (!sizerRef.value || !vFieldRef.value) return;\n        const style = getComputedStyle(sizerRef.value);\n        const fieldStyle = getComputedStyle(vFieldRef.value.$el);\n        const padding = parseFloat(style.getPropertyValue('--v-field-padding-top')) + parseFloat(style.getPropertyValue('--v-input-padding-top')) + parseFloat(style.getPropertyValue('--v-field-padding-bottom'));\n        const height = sizerRef.value.scrollHeight;\n        const lineHeight = parseFloat(style.lineHeight);\n        const minHeight = Math.max(parseFloat(props.rows) * lineHeight + padding, parseFloat(fieldStyle.getPropertyValue('--v-input-control-height')));\n        const maxHeight = parseFloat(props.maxRows) * lineHeight + padding || Infinity;\n        controlHeight.value = convertToUnit(clamp(height ?? 0, minHeight, maxHeight));\n      });\n    }\n\n    onMounted(calculateInputHeight);\n    watch(model, calculateInputHeight);\n    watch(() => props.rows, calculateInputHeight);\n    watch(() => props.maxRows, calculateInputHeight);\n    watch(() => props.density, calculateInputHeight);\n    let observer;\n    watch(sizerRef, val => {\n      if (val) {\n        observer = new ResizeObserver(calculateInputHeight);\n        observer.observe(sizerRef.value);\n      } else {\n        var _observer;\n\n        (_observer = observer) == null ? void 0 : _observer.disconnect();\n      }\n    });\n    onBeforeUnmount(() => {\n      var _observer2;\n\n      (_observer2 = observer) == null ? void 0 : _observer2.disconnect();\n    });\n    useRender(() => {\n      const hasCounter = !!(slots.counter || props.counter || props.counterValue);\n      const hasDetails = !!(hasCounter || slots.details);\n      const [rootAttrs, inputAttrs] = filterInputAttrs(attrs);\n      const [{\n        modelValue: _,\n        ...inputProps\n      }] = filterInputProps(props);\n      const [fieldProps] = filterFieldProps(props);\n      return _createVNode(VInput, _mergeProps({\n        \"ref\": vInputRef,\n        \"modelValue\": model.value,\n        \"onUpdate:modelValue\": $event => model.value = $event,\n        \"class\": ['v-textarea v-text-field', {\n          'v-textarea--prefixed': props.prefix,\n          'v-textarea--suffixed': props.suffix,\n          'v-text-field--prefixed': props.prefix,\n          'v-text-field--suffixed': props.suffix,\n          'v-textarea--auto-grow': props.autoGrow,\n          'v-textarea--no-resize': props.noResize || props.autoGrow\n        }],\n        \"onClick:prepend\": props['onClick:prepend'],\n        \"onClick:append\": props['onClick:append']\n      }, rootAttrs, inputProps, {\n        \"messages\": messages.value\n      }), { ...slots,\n        default: _ref2 => {\n          let {\n            isDisabled,\n            isDirty,\n            isReadonly,\n            isValid\n          } = _ref2;\n          return _createVNode(VField, _mergeProps({\n            \"ref\": vFieldRef,\n            \"style\": {\n              '--v-textarea-control-height': controlHeight.value\n            },\n            \"onClick:control\": onControlClick,\n            \"onClick:clear\": onClear,\n            \"onClick:prependInner\": props['onClick:prependInner'],\n            \"onClick:appendInner\": props['onClick:appendInner'],\n            \"role\": \"textbox\"\n          }, fieldProps, {\n            \"active\": isActive.value || isDirty.value,\n            \"dirty\": isDirty.value || props.dirty,\n            \"focused\": isFocused.value,\n            \"error\": isValid.value === false\n          }), { ...slots,\n            default: _ref3 => {\n              let {\n                props: {\n                  class: fieldClass,\n                  ...slotProps\n                }\n              } = _ref3;\n              return _createVNode(_Fragment, null, [props.prefix && _createVNode(\"span\", {\n                \"class\": \"v-text-field__prefix\"\n              }, [props.prefix]), _withDirectives(_createVNode(\"textarea\", _mergeProps({\n                \"ref\": textareaRef,\n                \"class\": fieldClass,\n                \"value\": model.value,\n                \"onInput\": onInput,\n                \"autofocus\": props.autofocus,\n                \"readonly\": isReadonly.value,\n                \"disabled\": isDisabled.value,\n                \"placeholder\": props.placeholder,\n                \"rows\": props.rows,\n                \"name\": props.name,\n                \"onFocus\": onFocus,\n                \"onBlur\": () => isFocused.value = false\n              }, slotProps, inputAttrs), null), [[_resolveDirective(\"intersect\"), {\n                handler: onIntersect\n              }, null, {\n                once: true\n              }]]), props.autoGrow && _withDirectives(_createVNode(\"textarea\", {\n                \"class\": [fieldClass, 'v-textarea__sizer'],\n                \"onUpdate:modelValue\": $event => model.value = $event,\n                \"ref\": sizerRef,\n                \"readonly\": true,\n                \"aria-hidden\": \"true\"\n              }, null), [[_vModelText, model.value]]), props.suffix && _createVNode(\"span\", {\n                \"class\": \"v-text-field__suffix\"\n              }, [props.suffix])]);\n            }\n          });\n        },\n        details: hasDetails ? slotProps => {\n          var _slots$details;\n\n          return _createVNode(_Fragment, null, [(_slots$details = slots.details) == null ? void 0 : _slots$details.call(slots, slotProps), hasCounter && _createVNode(_Fragment, null, [_createVNode(\"span\", null, null), _createVNode(VCounter, {\n            \"active\": props.persistentCounter || isFocused.value,\n            \"value\": counterValue.value,\n            \"max\": max.value\n          }, slots.counter)])]);\n        } : undefined\n      });\n    });\n    return forwardRefs({}, vInputRef, vFieldRef, textareaRef);\n  }\n\n});","map":{"version":3,"mappings":"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","names":["filterFieldProps","makeVFieldProps","filterInputProps","makeVInputProps","VInput","VCounter","VField","Intersect","forwardRefs","useProxiedModel","computed","nextTick","onBeforeUnmount","onMounted","ref","watch","callEvent","clamp","convertToUnit","defineComponent","filterInputAttrs","useRender","VTextarea","name","directives","inheritAttrs","props","autoGrow","Boolean","autofocus","counter","Number","String","counterValue","Function","hint","persistentHint","prefix","placeholder","persistentPlaceholder","persistentCounter","noResize","rows","type","default","validator","v","isNaN","parseFloat","maxRows","suffix","emits","e","val","setup","attrs","emit","slots","_ref","model","value","toString","length","max","maxlength","undefined","onIntersect","isIntersecting","entries","target","focus","vInputRef","vFieldRef","isFocused","controlHeight","textareaRef","isActive","messages","onFocus","document","activeElement","onControlClick","onClear","stopPropagation","onInput","sizerRef","calculateInputHeight","style","getComputedStyle","fieldStyle","$el","padding","getPropertyValue","height","scrollHeight","lineHeight","minHeight","Math","maxHeight","Infinity","density","observer","ResizeObserver","observe","disconnect","hasCounter","hasDetails","details","rootAttrs","inputAttrs","modelValue","_","inputProps","fieldProps","$event","_ref2","isDisabled","isDirty","isReadonly","isValid","dirty","_ref3","class","fieldClass","slotProps","handler","once","_slots$details"],"sources":["../../../src/components/VTextarea/VTextarea.tsx"],"sourcesContent":["// Styles\nimport './VTextarea.sass'\nimport '../VTextField/VTextField.sass'\n\n// Components\nimport { filterFieldProps, makeVFieldProps } from '@/components/VField/VField'\nimport { filterInputProps, makeVInputProps, VInput } from '@/components/VInput/VInput'\nimport { VCounter } from '@/components/VCounter'\nimport { VField } from '@/components/VField'\n\n// Directives\nimport Intersect from '@/directives/intersect'\n\n// Composables\nimport { forwardRefs } from '@/composables/forwardRefs'\nimport { useProxiedModel } from '@/composables/proxiedModel'\n\n// Utilities\nimport { computed, nextTick, onBeforeUnmount, onMounted, ref, watch } from 'vue'\nimport { callEvent, clamp, convertToUnit, defineComponent, filterInputAttrs, useRender } from '@/util'\n\n// Types\nimport type { PropType } from 'vue'\n\nexport const VTextarea = defineComponent({\n  name: 'VTextarea',\n\n  directives: { Intersect },\n\n  inheritAttrs: false,\n\n  props: {\n    autoGrow: Boolean,\n    autofocus: Boolean,\n    counter: [Boolean, Number, String] as PropType<true | number | string>,\n    counterValue: Function as PropType<(value: any) => number>,\n    hint: String,\n    persistentHint: Boolean,\n    prefix: String,\n    placeholder: String,\n    persistentPlaceholder: Boolean,\n    persistentCounter: Boolean,\n    noResize: Boolean,\n    rows: {\n      type: [Number, String],\n      default: 5,\n      validator: (v: any) => !isNaN(parseFloat(v)),\n    },\n    maxRows: {\n      type: [Number, String],\n      validator: (v: any) => !isNaN(parseFloat(v)),\n    },\n    suffix: String,\n\n    ...makeVInputProps(),\n    ...makeVFieldProps(),\n  },\n\n  emits: {\n    'click:control': (e: MouseEvent) => true,\n    'update:modelValue': (val: string) => true,\n  },\n\n  setup (props, { attrs, emit, slots }) {\n    const model = useProxiedModel(props, 'modelValue')\n    const counterValue = computed(() => {\n      return typeof props.counterValue === 'function'\n        ? props.counterValue(model.value)\n        : (model.value || '').toString().length\n    })\n    const max = computed(() => {\n      if (attrs.maxlength) return attrs.maxlength as undefined\n\n      if (\n        !props.counter ||\n        (typeof props.counter !== 'number' &&\n        typeof props.counter !== 'string')\n      ) return undefined\n\n      return props.counter\n    })\n\n    function onIntersect (\n      isIntersecting: boolean,\n      entries: IntersectionObserverEntry[]\n    ) {\n      if (!props.autofocus || !isIntersecting) return\n\n      (entries[0].target as HTMLInputElement)?.focus?.()\n    }\n\n    const vInputRef = ref<VInput>()\n    const vFieldRef = ref<VInput>()\n    const isFocused = ref(false)\n    const controlHeight = ref('')\n    const textareaRef = ref<HTMLInputElement>()\n    const isActive = computed(() => (\n      isFocused.value ||\n      props.persistentPlaceholder\n    ))\n\n    const messages = computed(() => {\n      return props.messages.length\n        ? props.messages\n        : (isActive.value || props.persistentHint) ? props.hint : ''\n    })\n\n    function onFocus () {\n      if (textareaRef.value !== document.activeElement) {\n        textareaRef.value?.focus()\n      }\n\n      if (!isFocused.value) isFocused.value = true\n    }\n    function onControlClick (e: MouseEvent) {\n      onFocus()\n\n      emit('click:control', e)\n    }\n    function onClear (e: MouseEvent) {\n      e.stopPropagation()\n\n      onFocus()\n\n      nextTick(() => {\n        model.value = ''\n\n        callEvent(props['onClick:clear'], e)\n      })\n    }\n    function onInput (e: Event) {\n      model.value = (e.target as HTMLTextAreaElement).value\n    }\n\n    const sizerRef = ref<HTMLTextAreaElement>()\n    function calculateInputHeight () {\n      if (!props.autoGrow) return\n\n      nextTick(() => {\n        if (!sizerRef.value || !vFieldRef.value) return\n\n        const style = getComputedStyle(sizerRef.value)\n        const fieldStyle = getComputedStyle(vFieldRef.value.$el)\n\n        const padding = parseFloat(style.getPropertyValue('--v-field-padding-top')) +\n          parseFloat(style.getPropertyValue('--v-input-padding-top')) +\n          parseFloat(style.getPropertyValue('--v-field-padding-bottom'))\n\n        const height = sizerRef.value.scrollHeight\n        const lineHeight = parseFloat(style.lineHeight)\n        const minHeight = Math.max(\n          parseFloat(props.rows) * lineHeight + padding,\n          parseFloat(fieldStyle.getPropertyValue('--v-input-control-height'))\n        )\n        const maxHeight = parseFloat(props.maxRows!) * lineHeight + padding || Infinity\n\n        controlHeight.value = convertToUnit(clamp(height ?? 0, minHeight, maxHeight))\n      })\n    }\n\n    onMounted(calculateInputHeight)\n    watch(model, calculateInputHeight)\n    watch(() => props.rows, calculateInputHeight)\n    watch(() => props.maxRows, calculateInputHeight)\n    watch(() => props.density, calculateInputHeight)\n\n    let observer: ResizeObserver | undefined\n    watch(sizerRef, val => {\n      if (val) {\n        observer = new ResizeObserver(calculateInputHeight)\n        observer.observe(sizerRef.value!)\n      } else {\n        observer?.disconnect()\n      }\n    })\n    onBeforeUnmount(() => {\n      observer?.disconnect()\n    })\n\n    useRender(() => {\n      const hasCounter = !!(slots.counter || props.counter || props.counterValue)\n      const hasDetails = !!(hasCounter || slots.details)\n      const [rootAttrs, inputAttrs] = filterInputAttrs(attrs)\n      const [{ modelValue: _, ...inputProps }] = filterInputProps(props)\n      const [fieldProps] = filterFieldProps(props)\n\n      return (\n        <VInput\n          ref={ vInputRef }\n          v-model={ model.value }\n          class={[\n            'v-textarea v-text-field',\n            {\n              'v-textarea--prefixed': props.prefix,\n              'v-textarea--suffixed': props.suffix,\n              'v-text-field--prefixed': props.prefix,\n              'v-text-field--suffixed': props.suffix,\n              'v-textarea--auto-grow': props.autoGrow,\n              'v-textarea--no-resize': props.noResize || props.autoGrow,\n            },\n          ]}\n          onClick:prepend={ props['onClick:prepend'] }\n          onClick:append={ props['onClick:append'] }\n          { ...rootAttrs }\n          { ...inputProps }\n          messages={ messages.value }\n        >\n          {{\n            ...slots,\n            default: ({\n              isDisabled,\n              isDirty,\n              isReadonly,\n              isValid,\n            }) => (\n              <VField\n                ref={ vFieldRef }\n                style={{\n                  '--v-textarea-control-height': controlHeight.value,\n                }}\n                onClick:control={ onControlClick }\n                onClick:clear={ onClear }\n                onClick:prependInner={ props['onClick:prependInner'] }\n                onClick:appendInner={ props['onClick:appendInner'] }\n                role=\"textbox\"\n                { ...fieldProps }\n                active={ isActive.value || isDirty.value }\n                dirty={ isDirty.value || props.dirty }\n                focused={ isFocused.value }\n                error={ isValid.value === false }\n              >\n                {{\n                  ...slots,\n                  default: ({\n                    props: { class: fieldClass, ...slotProps },\n                  }) => (\n                    <>\n                      { props.prefix && (\n                        <span class=\"v-text-field__prefix\">\n                          { props.prefix }\n                        </span>\n                      ) }\n\n                      <textarea\n                        ref={ textareaRef }\n                        class={ fieldClass }\n                        value={ model.value }\n                        onInput={ onInput }\n                        v-intersect={[{\n                          handler: onIntersect,\n                        }, null, ['once']]}\n                        autofocus={ props.autofocus }\n                        readonly={ isReadonly.value }\n                        disabled={ isDisabled.value }\n                        placeholder={ props.placeholder }\n                        rows={ props.rows }\n                        name={ props.name }\n                        onFocus={ onFocus }\n                        onBlur={ () => (isFocused.value = false) }\n                        { ...slotProps }\n                        { ...inputAttrs }\n                      />\n\n                      { props.autoGrow && (\n                        <textarea\n                          class={[\n                            fieldClass,\n                            'v-textarea__sizer',\n                          ]}\n                          v-model={ model.value }\n                          ref={ sizerRef }\n                          readonly\n                          aria-hidden=\"true\"\n                        />\n                      )}\n\n                      { props.suffix && (\n                        <span class=\"v-text-field__suffix\">\n                          { props.suffix }\n                        </span>\n                      ) }\n                    </>\n                  ),\n                }}\n              </VField>\n            ),\n            details: hasDetails ? slotProps => (\n              <>\n                { slots.details?.(slotProps) }\n\n                { hasCounter && (\n                  <>\n                    <span />\n\n                    <VCounter\n                      active={ props.persistentCounter || isFocused.value }\n                      value={ counterValue.value }\n                      max={ max.value }\n                      v-slots={ slots.counter }\n                    />\n                  </>\n                ) }\n              </>\n            ) : undefined,\n          }}\n        </VInput>\n      )\n    })\n\n    return forwardRefs({}, vInputRef, vFieldRef, textareaRef)\n  },\n})\n\nexport type VTextarea = InstanceType<typeof VTextarea>\n"]},"metadata":{},"sourceType":"module"}