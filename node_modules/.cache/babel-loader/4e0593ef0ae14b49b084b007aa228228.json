{"ast":null,"code":"// Utilities\nimport { onBeforeUnmount, ref, shallowRef, watch } from 'vue';\nimport { SUPPORTS_INTERSECTION } from \"../util/index.mjs\";\nexport function useIntersectionObserver(callback, options) {\n  const intersectionRef = ref();\n  const isIntersecting = shallowRef(false);\n\n  if (SUPPORTS_INTERSECTION) {\n    const observer = new IntersectionObserver(entries => {\n      callback?.(entries, observer);\n      isIntersecting.value = !!entries.find(entry => entry.isIntersecting);\n    }, options);\n    onBeforeUnmount(() => {\n      observer.disconnect();\n    });\n    watch(intersectionRef, (newValue, oldValue) => {\n      if (oldValue) {\n        observer.unobserve(oldValue);\n        isIntersecting.value = false;\n      }\n\n      if (newValue) observer.observe(newValue);\n    }, {\n      flush: 'post'\n    });\n  }\n\n  return {\n    intersectionRef,\n    isIntersecting\n  };\n}","map":{"version":3,"mappings":"AAAA;AACA,SAASA,eAAT,EAA0BC,GAA1B,EAA+BC,UAA/B,EAA2CC,KAA3C,QAAwD,KAAxD;AAA6D,SACpDC,qBADoD,QAC/B,mBAD+B;AAG7D,OAAO,SAASC,uBAAT,CAAkCC,QAAlC,EAA2EC,OAA3E,EAA+G;EACpH,MAAMC,eAAe,GAAGP,GAAG,EAA3B;EACA,MAAMQ,cAAc,GAAGP,UAAU,CAAC,KAAD,CAAjC;;EAEA,IAAIE,qBAAJ,EAA2B;IACzB,MAAMM,QAAQ,GAAG,IAAIC,oBAAJ,CAA0BC,OAAoC,IAAK;MAClFN,QAAQ,GAAGM,OAAH,EAAYF,QAAZ,CAARJ;MAEAG,cAAc,CAACI,KAAfJ,GAAuB,CAAC,CAACG,OAAO,CAACE,IAARF,CAAaG,KAAK,IAAIA,KAAK,CAACN,cAA5BG,CAAzBH;IACD,CAJgB,EAIdF,OAJc,CAAjB;IAMAP,eAAe,CAAC,MAAM;MACpBU,QAAQ,CAACM,UAATN;IACD,CAFc,CAAfV;IAIAG,KAAK,CAACK,eAAD,EAAkB,CAACS,QAAD,EAAWC,QAAX,KAAwB;MAC7C,IAAIA,QAAJ,EAAc;QACZR,QAAQ,CAACS,SAATT,CAAmBQ,QAAnBR;QACAD,cAAc,CAACI,KAAfJ,GAAuB,KAAvBA;MACF;;MAEA,IAAIQ,QAAJ,EAAcP,QAAQ,CAACU,OAATV,CAAiBO,QAAjBP;IACf,CAPI,EAOF;MACDW,KAAK,EAAE;IADN,CAPE,CAALlB;EAUF;;EAEA,OAAO;IAAEK,eAAF;IAAmBC;EAAnB,CAAP;AACF","names":["onBeforeUnmount","ref","shallowRef","watch","SUPPORTS_INTERSECTION","useIntersectionObserver","callback","options","intersectionRef","isIntersecting","observer","IntersectionObserver","entries","value","find","entry","disconnect","newValue","oldValue","unobserve","observe","flush"],"sources":["../../src/composables/intersectionObserver.ts"],"sourcesContent":["// Utilities\nimport { onBeforeUnmount, ref, shallowRef, watch } from 'vue'\nimport { SUPPORTS_INTERSECTION } from '@/util'\n\nexport function useIntersectionObserver (callback?: IntersectionObserverCallback, options?: IntersectionObserverInit) {\n  const intersectionRef = ref<HTMLElement>()\n  const isIntersecting = shallowRef(false)\n\n  if (SUPPORTS_INTERSECTION) {\n    const observer = new IntersectionObserver((entries: IntersectionObserverEntry[]) => {\n      callback?.(entries, observer)\n\n      isIntersecting.value = !!entries.find(entry => entry.isIntersecting)\n    }, options)\n\n    onBeforeUnmount(() => {\n      observer.disconnect()\n    })\n\n    watch(intersectionRef, (newValue, oldValue) => {\n      if (oldValue) {\n        observer.unobserve(oldValue)\n        isIntersecting.value = false\n      }\n\n      if (newValue) observer.observe(newValue)\n    }, {\n      flush: 'post',\n    })\n  }\n\n  return { intersectionRef, isIntersecting }\n}\n"]},"metadata":{},"sourceType":"module"}