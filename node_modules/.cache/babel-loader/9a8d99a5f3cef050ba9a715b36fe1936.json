{"ast":null,"code":"import { Fragment as _Fragment, withDirectives as _withDirectives, createVNode as _createVNode, mergeProps as _mergeProps, resolveDirective as _resolveDirective } from \"vue\"; // Styles\n\nimport \"./VTextField.css\"; // Components\n\nimport { VCounter } from \"../VCounter/VCounter.mjs\";\nimport { filterFieldProps, makeVFieldProps, VField } from \"../VField/VField.mjs\";\nimport { makeVInputProps, VInput } from \"../VInput/VInput.mjs\"; // Composables\n\nimport { useFocus } from \"../../composables/focus.mjs\";\nimport { forwardRefs } from \"../../composables/forwardRefs.mjs\";\nimport { useProxiedModel } from \"../../composables/proxiedModel.mjs\"; // Directives\n\nimport Intersect from \"../../directives/intersect/index.mjs\"; // Utilities\n\nimport { cloneVNode, computed, nextTick, ref } from 'vue';\nimport { callEvent, filterInputAttrs, genericComponent, propsFactory, useRender } from \"../../util/index.mjs\"; // Types\n\nconst activeTypes = ['color', 'file', 'time', 'date', 'datetime-local', 'week', 'month'];\nexport const makeVTextFieldProps = propsFactory({\n  autofocus: Boolean,\n  counter: [Boolean, Number, String],\n  counterValue: [Number, Function],\n  prefix: String,\n  placeholder: String,\n  persistentPlaceholder: Boolean,\n  persistentCounter: Boolean,\n  suffix: String,\n  role: String,\n  type: {\n    type: String,\n    default: 'text'\n  },\n  modelModifiers: Object,\n  ...makeVInputProps(),\n  ...makeVFieldProps()\n}, 'VTextField');\nexport const VTextField = genericComponent()({\n  name: 'VTextField',\n  directives: {\n    Intersect\n  },\n  inheritAttrs: false,\n  props: makeVTextFieldProps(),\n  emits: {\n    'click:control': e => true,\n    'mousedown:control': e => true,\n    'update:focused': focused => true,\n    'update:modelValue': val => true\n  },\n\n  setup(props, _ref) {\n    let {\n      attrs,\n      emit,\n      slots\n    } = _ref;\n    const model = useProxiedModel(props, 'modelValue');\n    const {\n      isFocused,\n      focus,\n      blur\n    } = useFocus(props);\n    const counterValue = computed(() => {\n      return typeof props.counterValue === 'function' ? props.counterValue(model.value) : typeof props.counterValue === 'number' ? props.counterValue : (model.value ?? '').toString().length;\n    });\n    const max = computed(() => {\n      if (attrs.maxlength) return attrs.maxlength;\n      if (!props.counter || typeof props.counter !== 'number' && typeof props.counter !== 'string') return undefined;\n      return props.counter;\n    });\n    const isPlainOrUnderlined = computed(() => ['plain', 'underlined'].includes(props.variant));\n\n    function onIntersect(isIntersecting, entries) {\n      if (!props.autofocus || !isIntersecting) return;\n      entries[0].target?.focus?.();\n    }\n\n    const vInputRef = ref();\n    const vFieldRef = ref();\n    const inputRef = ref();\n    const isActive = computed(() => activeTypes.includes(props.type) || props.persistentPlaceholder || isFocused.value || props.active);\n\n    function onFocus() {\n      if (inputRef.value !== document.activeElement) {\n        inputRef.value?.focus();\n      }\n\n      if (!isFocused.value) focus();\n    }\n\n    function onControlMousedown(e) {\n      emit('mousedown:control', e);\n      if (e.target === inputRef.value) return;\n      onFocus();\n      e.preventDefault();\n    }\n\n    function onControlClick(e) {\n      onFocus();\n      emit('click:control', e);\n    }\n\n    function onClear(e) {\n      e.stopPropagation();\n      onFocus();\n      nextTick(() => {\n        model.value = null;\n        callEvent(props['onClick:clear'], e);\n      });\n    }\n\n    function onInput(e) {\n      const el = e.target;\n      model.value = el.value;\n\n      if (props.modelModifiers?.trim && ['text', 'search', 'password', 'tel', 'url'].includes(props.type)) {\n        const caretPosition = [el.selectionStart, el.selectionEnd];\n        nextTick(() => {\n          el.selectionStart = caretPosition[0];\n          el.selectionEnd = caretPosition[1];\n        });\n      }\n    }\n\n    useRender(() => {\n      const hasCounter = !!(slots.counter || props.counter !== false && props.counter != null);\n      const hasDetails = !!(hasCounter || slots.details);\n      const [rootAttrs, inputAttrs] = filterInputAttrs(attrs);\n      const {\n        modelValue: _,\n        ...inputProps\n      } = VInput.filterProps(props);\n      const fieldProps = filterFieldProps(props);\n      return _createVNode(VInput, _mergeProps({\n        \"ref\": vInputRef,\n        \"modelValue\": model.value,\n        \"onUpdate:modelValue\": $event => model.value = $event,\n        \"class\": ['v-text-field', {\n          'v-text-field--prefixed': props.prefix,\n          'v-text-field--suffixed': props.suffix,\n          'v-input--plain-underlined': isPlainOrUnderlined.value\n        }, props.class],\n        \"style\": props.style\n      }, rootAttrs, inputProps, {\n        \"centerAffix\": !isPlainOrUnderlined.value,\n        \"focused\": isFocused.value\n      }), { ...slots,\n        default: _ref2 => {\n          let {\n            id,\n            isDisabled,\n            isDirty,\n            isReadonly,\n            isValid\n          } = _ref2;\n          return _createVNode(VField, _mergeProps({\n            \"ref\": vFieldRef,\n            \"onMousedown\": onControlMousedown,\n            \"onClick\": onControlClick,\n            \"onClick:clear\": onClear,\n            \"onClick:prependInner\": props['onClick:prependInner'],\n            \"onClick:appendInner\": props['onClick:appendInner'],\n            \"role\": props.role\n          }, fieldProps, {\n            \"id\": id.value,\n            \"active\": isActive.value || isDirty.value,\n            \"dirty\": isDirty.value || props.dirty,\n            \"disabled\": isDisabled.value,\n            \"focused\": isFocused.value,\n            \"error\": isValid.value === false\n          }), { ...slots,\n            default: _ref3 => {\n              let {\n                props: {\n                  class: fieldClass,\n                  ...slotProps\n                }\n              } = _ref3;\n\n              const inputNode = _withDirectives(_createVNode(\"input\", _mergeProps({\n                \"ref\": inputRef,\n                \"value\": model.value,\n                \"onInput\": onInput,\n                \"autofocus\": props.autofocus,\n                \"readonly\": isReadonly.value,\n                \"disabled\": isDisabled.value,\n                \"name\": props.name,\n                \"placeholder\": props.placeholder,\n                \"size\": 1,\n                \"type\": props.type,\n                \"onFocus\": onFocus,\n                \"onBlur\": blur\n              }, slotProps, inputAttrs), null), [[_resolveDirective(\"intersect\"), {\n                handler: onIntersect\n              }, null, {\n                once: true\n              }]]);\n\n              return _createVNode(_Fragment, null, [props.prefix && _createVNode(\"span\", {\n                \"class\": \"v-text-field__prefix\"\n              }, [_createVNode(\"span\", {\n                \"class\": \"v-text-field__prefix__text\"\n              }, [props.prefix])]), slots.default ? _createVNode(\"div\", {\n                \"class\": fieldClass,\n                \"data-no-activator\": \"\"\n              }, [slots.default(), inputNode]) : cloneVNode(inputNode, {\n                class: fieldClass\n              }), props.suffix && _createVNode(\"span\", {\n                \"class\": \"v-text-field__suffix\"\n              }, [_createVNode(\"span\", {\n                \"class\": \"v-text-field__suffix__text\"\n              }, [props.suffix])])]);\n            }\n          });\n        },\n        details: hasDetails ? slotProps => _createVNode(_Fragment, null, [slots.details?.(slotProps), hasCounter && _createVNode(_Fragment, null, [_createVNode(\"span\", null, null), _createVNode(VCounter, {\n          \"active\": props.persistentCounter || isFocused.value,\n          \"value\": counterValue.value,\n          \"max\": max.value,\n          \"disabled\": props.disabled\n        }, slots.counter)])]) : undefined\n      });\n    });\n    return forwardRefs({}, vInputRef, vFieldRef, inputRef);\n  }\n\n});","map":{"version":3,"mappings":"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","names":["VCounter","filterFieldProps","makeVFieldProps","VField","makeVInputProps","VInput","useFocus","forwardRefs","useProxiedModel","Intersect","cloneVNode","computed","nextTick","ref","callEvent","filterInputAttrs","genericComponent","propsFactory","useRender","activeTypes","makeVTextFieldProps","autofocus","Boolean","counter","Number","String","counterValue","Function","prefix","placeholder","persistentPlaceholder","persistentCounter","suffix","role","type","default","modelModifiers","Object","VTextField","name","directives","inheritAttrs","props","emits","e","focused","val","setup","_ref","attrs","emit","slots","model","isFocused","focus","blur","value","toString","length","max","maxlength","undefined","isPlainOrUnderlined","includes","variant","onIntersect","isIntersecting","entries","target","vInputRef","vFieldRef","inputRef","isActive","active","onFocus","document","activeElement","onControlMousedown","preventDefault","onControlClick","onClear","stopPropagation","onInput","el","trim","caretPosition","selectionStart","selectionEnd","hasCounter","hasDetails","details","rootAttrs","inputAttrs","modelValue","_","inputProps","filterProps","fieldProps","$event","class","style","_ref2","id","isDisabled","isDirty","isReadonly","isValid","dirty","_ref3","fieldClass","slotProps","inputNode","handler","once","_createVNode","disabled"],"sources":["../../../src/components/VTextField/VTextField.tsx"],"sourcesContent":["// Styles\nimport './VTextField.sass'\n\n// Components\nimport { VCounter } from '@/components/VCounter/VCounter'\nimport { filterFieldProps, makeVFieldProps, VField } from '@/components/VField/VField'\nimport { makeVInputProps, VInput } from '@/components/VInput/VInput'\n\n// Composables\nimport { useFocus } from '@/composables/focus'\nimport { forwardRefs } from '@/composables/forwardRefs'\nimport { useProxiedModel } from '@/composables/proxiedModel'\n\n// Directives\nimport Intersect from '@/directives/intersect'\n\n// Utilities\nimport { cloneVNode, computed, nextTick, ref } from 'vue'\nimport { callEvent, filterInputAttrs, genericComponent, propsFactory, useRender } from '@/util'\n\n// Types\nimport type { PropType } from 'vue'\nimport type { VCounterSlot } from '@/components/VCounter/VCounter'\nimport type { VFieldSlots } from '@/components/VField/VField'\nimport type { VInputSlots } from '@/components/VInput/VInput'\n\nconst activeTypes = ['color', 'file', 'time', 'date', 'datetime-local', 'week', 'month']\n\nexport const makeVTextFieldProps = propsFactory({\n  autofocus: Boolean,\n  counter: [Boolean, Number, String],\n  counterValue: [Number, Function] as PropType<number | ((value: any) => number)>,\n  prefix: String,\n  placeholder: String,\n  persistentPlaceholder: Boolean,\n  persistentCounter: Boolean,\n  suffix: String,\n  role: String,\n  type: {\n    type: String,\n    default: 'text',\n  },\n  modelModifiers: Object as PropType<Record<string, boolean>>,\n\n  ...makeVInputProps(),\n  ...makeVFieldProps(),\n}, 'VTextField')\n\nexport type VTextFieldSlots = Omit<VInputSlots & VFieldSlots, 'default'> & {\n  default: never\n  counter: VCounterSlot\n}\n\nexport const VTextField = genericComponent<VTextFieldSlots>()({\n  name: 'VTextField',\n\n  directives: { Intersect },\n\n  inheritAttrs: false,\n\n  props: makeVTextFieldProps(),\n\n  emits: {\n    'click:control': (e: MouseEvent) => true,\n    'mousedown:control': (e: MouseEvent) => true,\n    'update:focused': (focused: boolean) => true,\n    'update:modelValue': (val: string) => true,\n  },\n\n  setup (props, { attrs, emit, slots }) {\n    const model = useProxiedModel(props, 'modelValue')\n    const { isFocused, focus, blur } = useFocus(props)\n    const counterValue = computed(() => {\n      return typeof props.counterValue === 'function' ? props.counterValue(model.value)\n        : typeof props.counterValue === 'number' ? props.counterValue\n        : (model.value ?? '').toString().length\n    })\n    const max = computed(() => {\n      if (attrs.maxlength) return attrs.maxlength as unknown as undefined\n\n      if (\n        !props.counter ||\n        (typeof props.counter !== 'number' &&\n        typeof props.counter !== 'string')\n      ) return undefined\n\n      return props.counter\n    })\n\n    const isPlainOrUnderlined = computed(() => ['plain', 'underlined'].includes(props.variant))\n\n    function onIntersect (\n      isIntersecting: boolean,\n      entries: IntersectionObserverEntry[]\n    ) {\n      if (!props.autofocus || !isIntersecting) return\n\n      (entries[0].target as HTMLInputElement)?.focus?.()\n    }\n\n    const vInputRef = ref<VInput>()\n    const vFieldRef = ref<VField>()\n    const inputRef = ref<HTMLInputElement>()\n    const isActive = computed(() => (\n      activeTypes.includes(props.type) ||\n      props.persistentPlaceholder ||\n      isFocused.value ||\n      props.active\n    ))\n    function onFocus () {\n      if (inputRef.value !== document.activeElement) {\n        inputRef.value?.focus()\n      }\n\n      if (!isFocused.value) focus()\n    }\n    function onControlMousedown (e: MouseEvent) {\n      emit('mousedown:control', e)\n\n      if (e.target === inputRef.value) return\n\n      onFocus()\n      e.preventDefault()\n    }\n    function onControlClick (e: MouseEvent) {\n      onFocus()\n\n      emit('click:control', e)\n    }\n    function onClear (e: MouseEvent) {\n      e.stopPropagation()\n\n      onFocus()\n\n      nextTick(() => {\n        model.value = null\n\n        callEvent(props['onClick:clear'], e)\n      })\n    }\n    function onInput (e: Event) {\n      const el = e.target as HTMLInputElement\n      model.value = el.value\n      if (\n        props.modelModifiers?.trim &&\n        ['text', 'search', 'password', 'tel', 'url'].includes(props.type)\n      ) {\n        const caretPosition = [el.selectionStart, el.selectionEnd]\n        nextTick(() => {\n          el.selectionStart = caretPosition[0]\n          el.selectionEnd = caretPosition[1]\n        })\n      }\n    }\n\n    useRender(() => {\n      const hasCounter = !!(slots.counter || (props.counter !== false && props.counter != null))\n      const hasDetails = !!(hasCounter || slots.details)\n      const [rootAttrs, inputAttrs] = filterInputAttrs(attrs)\n      const { modelValue: _, ...inputProps } = VInput.filterProps(props)\n      const fieldProps = filterFieldProps(props)\n\n      return (\n        <VInput\n          ref={ vInputRef }\n          v-model={ model.value }\n          class={[\n            'v-text-field',\n            {\n              'v-text-field--prefixed': props.prefix,\n              'v-text-field--suffixed': props.suffix,\n              'v-input--plain-underlined': isPlainOrUnderlined.value,\n            },\n            props.class,\n          ]}\n          style={ props.style }\n          { ...rootAttrs }\n          { ...inputProps }\n          centerAffix={ !isPlainOrUnderlined.value }\n          focused={ isFocused.value }\n        >\n          {{\n            ...slots,\n            default: ({\n              id,\n              isDisabled,\n              isDirty,\n              isReadonly,\n              isValid,\n            }) => (\n              <VField\n                ref={ vFieldRef }\n                onMousedown={ onControlMousedown }\n                onClick={ onControlClick }\n                onClick:clear={ onClear }\n                onClick:prependInner={ props['onClick:prependInner'] }\n                onClick:appendInner={ props['onClick:appendInner'] }\n                role={ props.role }\n                { ...fieldProps }\n                id={ id.value }\n                active={ isActive.value || isDirty.value }\n                dirty={ isDirty.value || props.dirty }\n                disabled={ isDisabled.value }\n                focused={ isFocused.value }\n                error={ isValid.value === false }\n              >\n                {{\n                  ...slots,\n                  default: ({\n                    props: { class: fieldClass, ...slotProps },\n                  }) => {\n                    const inputNode = (\n                      <input\n                        ref={ inputRef }\n                        value={ model.value }\n                        onInput={ onInput }\n                        v-intersect={[{\n                          handler: onIntersect,\n                        }, null, ['once']]}\n                        autofocus={ props.autofocus }\n                        readonly={ isReadonly.value }\n                        disabled={ isDisabled.value }\n                        name={ props.name }\n                        placeholder={ props.placeholder }\n                        size={ 1 }\n                        type={ props.type }\n                        onFocus={ onFocus }\n                        onBlur={ blur }\n                        { ...slotProps }\n                        { ...inputAttrs }\n                      />\n                    )\n\n                    return (\n                      <>\n                        { props.prefix && (\n                          <span class=\"v-text-field__prefix\">\n                            <span class=\"v-text-field__prefix__text\">\n                              { props.prefix }\n                            </span>\n                          </span>\n                        )}\n\n                        { slots.default ? (\n                          <div\n                            class={ fieldClass }\n                            data-no-activator=\"\"\n                          >\n                            { slots.default() }\n                            { inputNode }\n                          </div>\n                        ) : cloneVNode(inputNode, { class: fieldClass })}\n\n                        { props.suffix && (\n                          <span class=\"v-text-field__suffix\">\n                            <span class=\"v-text-field__suffix__text\">\n                              { props.suffix }\n                            </span>\n                          </span>\n                        )}\n                      </>\n                    )\n                  },\n                }}\n              </VField>\n            ),\n            details: hasDetails ? slotProps => (\n              <>\n                { slots.details?.(slotProps) }\n\n                { hasCounter && (\n                  <>\n                    <span />\n\n                    <VCounter\n                      active={ props.persistentCounter || isFocused.value }\n                      value={ counterValue.value }\n                      max={ max.value }\n                      disabled={ props.disabled }\n                      v-slots:default={ slots.counter }\n                    />\n                  </>\n                )}\n              </>\n            ) : undefined,\n          }}\n        </VInput>\n      )\n    })\n\n    return forwardRefs({}, vInputRef, vFieldRef, inputRef)\n  },\n})\n\nexport type VTextField = InstanceType<typeof VTextField>\n"]},"metadata":{},"sourceType":"module"}