{"ast":null,"code":"import { withDirectives as _withDirectives, vShow as _vShow, createVNode as _createVNode } from \"vue\"; // Components\n\nimport { VDefaultsProvider } from \"../VDefaultsProvider/index.mjs\";\nimport { VExpandTransition } from \"../transitions/index.mjs\"; // Composables\n\nimport { useList } from \"./list.mjs\";\nimport { IconValue } from \"../../composables/icons.mjs\";\nimport { makeTagProps } from \"../../composables/tag.mjs\";\nimport { useNestedGroupActivator, useNestedItem } from \"../../composables/nested/nested.mjs\"; // Utilities\n\nimport { computed, toRef } from 'vue';\nimport { defineComponent, genericComponent, pick, propsFactory, useRender } from \"../../util/index.mjs\"; // Types\n\nconst VListGroupActivator = defineComponent({\n  name: 'VListGroupActivator',\n\n  setup(_, _ref) {\n    let {\n      slots\n    } = _ref;\n    useNestedGroupActivator();\n    return () => {\n      var _slots$default;\n\n      return (_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots);\n    };\n  }\n\n});\nexport const makeVListGroupProps = propsFactory({\n  activeColor: String,\n  color: String,\n  collapseIcon: {\n    type: IconValue,\n    default: '$collapse'\n  },\n  expandIcon: {\n    type: IconValue,\n    default: '$expand'\n  },\n  prependIcon: IconValue,\n  appendIcon: IconValue,\n  fluid: Boolean,\n  subgroup: Boolean,\n  value: null,\n  ...makeTagProps()\n});\nexport const VListGroup = genericComponent()({\n  name: 'VListGroup',\n  props: {\n    title: String,\n    ...makeVListGroupProps()\n  },\n\n  setup(props, _ref2) {\n    let {\n      slots\n    } = _ref2;\n    const {\n      isOpen,\n      open\n    } = useNestedItem(toRef(props, 'value'), true);\n    const list = useList();\n\n    const onClick = e => {\n      open(!isOpen.value, e);\n    };\n\n    const activatorProps = computed(() => ({\n      onClick,\n      class: 'v-list-group__header'\n    }));\n    const toggleIcon = computed(() => isOpen.value ? props.collapseIcon : props.expandIcon);\n    useRender(() => {\n      var _slots$default2;\n\n      return _createVNode(props.tag, {\n        \"class\": ['v-list-group', {\n          'v-list-group--prepend': list == null ? void 0 : list.hasPrepend.value,\n          'v-list-group--fluid': props.fluid,\n          'v-list-group--subgroup': props.subgroup\n        }]\n      }, {\n        default: () => [slots.activator && _createVNode(VDefaultsProvider, {\n          \"defaults\": {\n            VListItem: {\n              active: isOpen.value,\n              activeColor: props.activeColor,\n              color: props.color,\n              prependIcon: props.prependIcon || props.subgroup && toggleIcon.value,\n              appendIcon: props.appendIcon || !props.subgroup && toggleIcon.value,\n              title: props.title,\n              value: props.value\n            }\n          }\n        }, {\n          default: () => [_createVNode(VListGroupActivator, null, {\n            default: () => [slots.activator({\n              props: activatorProps.value,\n              isOpen\n            })]\n          })]\n        }), _createVNode(VExpandTransition, null, {\n          default: () => [_withDirectives(_createVNode(\"div\", {\n            \"class\": \"v-list-group__items\"\n          }, [(_slots$default2 = slots.default) == null ? void 0 : _slots$default2.call(slots)]), [[_vShow, isOpen.value]])]\n        })]\n      });\n    });\n    return {};\n  }\n\n});\nexport function filterListGroupProps(props) {\n  return pick(props, Object.keys(VListGroup.props));\n}","map":{"version":3,"mappings":"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","names":["VDefaultsProvider","VExpandTransition","useList","IconValue","makeTagProps","useNestedGroupActivator","useNestedItem","computed","toRef","defineComponent","genericComponent","pick","propsFactory","useRender","VListGroupActivator","name","setup","_","slots","_ref","default","_slots$default","makeVListGroupProps","activeColor","String","color","collapseIcon","type","expandIcon","prependIcon","appendIcon","fluid","Boolean","subgroup","value","VListGroup","props","title","_ref2","isOpen","open","list","onClick","e","activatorProps","class","toggleIcon","hasPrepend","activator","VListItem","active","_slots$default2","filterListGroupProps","Object","keys"],"sources":["../../../src/components/VList/VListGroup.tsx"],"sourcesContent":["// Components\nimport { VDefaultsProvider } from '@/components/VDefaultsProvider'\nimport { VExpandTransition } from '@/components/transitions'\n\n// Composables\nimport { useList } from './list'\nimport { IconValue } from '@/composables/icons'\nimport { makeTagProps } from '@/composables/tag'\nimport { useNestedGroupActivator, useNestedItem } from '@/composables/nested/nested'\n\n// Utilities\nimport { computed, toRef } from 'vue'\nimport { defineComponent, genericComponent, pick, propsFactory, useRender } from '@/util'\n\n// Types\nimport type { InternalListItem } from './VList'\nimport type { MakeSlots } from '@/util'\nimport type { ExtractPropTypes, Ref } from 'vue'\n\nexport type ListGroupActivatorSlot = {\n  props: {\n    onClick: (e: Event) => void\n    class: string\n  }\n}\n\nconst VListGroupActivator = defineComponent({\n  name: 'VListGroupActivator',\n\n  setup (_, { slots }) {\n    useNestedGroupActivator()\n\n    return () => slots.default?.()\n  },\n})\n\nexport const makeVListGroupProps = propsFactory({\n  activeColor: String,\n  color: String,\n  collapseIcon: {\n    type: IconValue,\n    default: '$collapse',\n  },\n  expandIcon: {\n    type: IconValue,\n    default: '$expand',\n  },\n  prependIcon: IconValue,\n  appendIcon: IconValue,\n  fluid: Boolean,\n  subgroup: Boolean,\n  value: null,\n\n  ...makeTagProps(),\n})\n\nexport const VListGroup = genericComponent<new <T extends InternalListItem>() => {\n  $props: {\n    items?: T[]\n  }\n  $slots: MakeSlots<{\n    activator: [ListGroupActivatorSlot]\n    default: []\n  }>\n}>()({\n  name: 'VListGroup',\n\n  props: {\n    title: String,\n\n    ...makeVListGroupProps(),\n  },\n\n  setup (props, { slots }) {\n    const { isOpen, open } = useNestedItem(toRef(props, 'value'), true)\n    const list = useList()\n\n    const onClick = (e: Event) => {\n      open(!isOpen.value, e)\n    }\n\n    const activatorProps: Ref<ListGroupActivatorSlot['props']> = computed(() => ({\n      onClick,\n      class: 'v-list-group__header',\n    }))\n\n    const toggleIcon = computed(() => isOpen.value ? props.collapseIcon : props.expandIcon)\n\n    useRender(() => (\n      <props.tag\n        class={[\n          'v-list-group',\n          {\n            'v-list-group--prepend': list?.hasPrepend.value,\n            'v-list-group--fluid': props.fluid,\n            'v-list-group--subgroup': props.subgroup,\n          },\n        ]}\n      >\n        { slots.activator && (\n          <VDefaultsProvider\n            defaults={{\n              VListItem: {\n                active: isOpen.value,\n                activeColor: props.activeColor,\n                color: props.color,\n                prependIcon: props.prependIcon || (props.subgroup && toggleIcon.value),\n                appendIcon: props.appendIcon || (!props.subgroup && toggleIcon.value),\n                title: props.title,\n                value: props.value,\n              },\n            }}\n          >\n            <VListGroupActivator>\n              { slots.activator({ props: activatorProps.value, isOpen }) }\n            </VListGroupActivator>\n          </VDefaultsProvider>\n        ) }\n\n        <VExpandTransition>\n          <div class=\"v-list-group__items\" v-show={ isOpen.value }>\n            { slots.default?.() }\n          </div>\n        </VExpandTransition>\n      </props.tag>\n    ))\n\n    return {}\n  },\n})\n\nexport function filterListGroupProps (props: ExtractPropTypes<ReturnType<typeof makeVListGroupProps>>) {\n  return pick(props, Object.keys(VListGroup.props) as any)\n}\n"]},"metadata":{},"sourceType":"module"}