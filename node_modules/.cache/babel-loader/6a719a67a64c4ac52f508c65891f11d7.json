{"ast":null,"code":"// Styles\nimport \"./VGrid.css\"; // Composables\n\nimport { makeComponentProps } from \"../../composables/component.mjs\";\nimport { breakpoints } from \"../../composables/display.mjs\";\nimport { makeTagProps } from \"../../composables/tag.mjs\"; // Utilities\n\nimport { capitalize, computed, h } from 'vue';\nimport { genericComponent, propsFactory } from \"../../util/index.mjs\"; // Types\n\nconst breakpointProps = (() => {\n  return breakpoints.reduce((props, val) => {\n    props[val] = {\n      type: [Boolean, String, Number],\n      default: false\n    };\n    return props;\n  }, {});\n})();\n\nconst offsetProps = (() => {\n  return breakpoints.reduce((props, val) => {\n    const offsetKey = 'offset' + capitalize(val);\n    props[offsetKey] = {\n      type: [String, Number],\n      default: null\n    };\n    return props;\n  }, {});\n})();\n\nconst orderProps = (() => {\n  return breakpoints.reduce((props, val) => {\n    const orderKey = 'order' + capitalize(val);\n    props[orderKey] = {\n      type: [String, Number],\n      default: null\n    };\n    return props;\n  }, {});\n})();\n\nconst propMap = {\n  col: Object.keys(breakpointProps),\n  offset: Object.keys(offsetProps),\n  order: Object.keys(orderProps)\n};\n\nfunction breakpointClass(type, prop, val) {\n  let className = type;\n\n  if (val == null || val === false) {\n    return undefined;\n  }\n\n  if (prop) {\n    const breakpoint = prop.replace(type, '');\n    className += `-${breakpoint}`;\n  }\n\n  if (type === 'col') {\n    className = 'v-' + className;\n  } // Handling the boolean style prop when accepting [Boolean, String, Number]\n  // means Vue will not convert <v-col sm></v-col> to sm: true for us.\n  // Since the default is false, an empty string indicates the prop's presence.\n\n\n  if (type === 'col' && (val === '' || val === true)) {\n    // .v-col-md\n    return className.toLowerCase();\n  } // .order-md-6\n\n\n  className += `-${val}`;\n  return className.toLowerCase();\n}\n\nconst ALIGN_SELF_VALUES = ['auto', 'start', 'end', 'center', 'baseline', 'stretch'];\nexport const makeVColProps = propsFactory({\n  cols: {\n    type: [Boolean, String, Number],\n    default: false\n  },\n  ...breakpointProps,\n  offset: {\n    type: [String, Number],\n    default: null\n  },\n  ...offsetProps,\n  order: {\n    type: [String, Number],\n    default: null\n  },\n  ...orderProps,\n  alignSelf: {\n    type: String,\n    default: null,\n    validator: str => ALIGN_SELF_VALUES.includes(str)\n  },\n  ...makeComponentProps(),\n  ...makeTagProps()\n}, 'VCol');\nexport const VCol = genericComponent()({\n  name: 'VCol',\n  props: makeVColProps(),\n\n  setup(props, _ref) {\n    let {\n      slots\n    } = _ref;\n    const classes = computed(() => {\n      const classList = []; // Loop through `col`, `offset`, `order` breakpoint props\n\n      let type;\n\n      for (type in propMap) {\n        propMap[type].forEach(prop => {\n          const value = props[prop];\n          const className = breakpointClass(type, prop, value);\n          if (className) classList.push(className);\n        });\n      }\n\n      const hasColClasses = classList.some(className => className.startsWith('v-col-'));\n      classList.push({\n        // Default to .v-col if no other col-{bp}-* classes generated nor `cols` specified.\n        'v-col': !hasColClasses || !props.cols,\n        [`v-col-${props.cols}`]: props.cols,\n        [`offset-${props.offset}`]: props.offset,\n        [`order-${props.order}`]: props.order,\n        [`align-self-${props.alignSelf}`]: props.alignSelf\n      });\n      return classList;\n    });\n    return () => h(props.tag, {\n      class: [classes.value, props.class],\n      style: props.style\n    }, slots.default?.());\n  }\n\n});","map":{"version":3,"mappings":"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","names":["makeComponentProps","breakpoints","makeTagProps","capitalize","computed","h","genericComponent","propsFactory","breakpointProps","reduce","props","val","type","Boolean","String","Number","default","offsetProps","offsetKey","orderProps","orderKey","propMap","col","Object","keys","offset","order","breakpointClass","prop","className","undefined","breakpoint","replace","toLowerCase","ALIGN_SELF_VALUES","makeVColProps","cols","alignSelf","validator","str","includes","VCol","name","setup","_ref","slots","classes","classList","forEach","value","push","hasColClasses","some","startsWith","tag","class","style"],"sources":["../../../src/components/VGrid/VCol.ts"],"sourcesContent":["// Styles\nimport './VGrid.sass'\n\n// Composables\nimport { makeComponentProps } from '@/composables/component'\nimport { breakpoints } from '@/composables/display'\nimport { makeTagProps } from '@/composables/tag'\n\n// Utilities\nimport { capitalize, computed, h } from 'vue'\nimport { genericComponent, propsFactory } from '@/util'\n\n// Types\nimport type { Prop, PropType } from 'vue'\nimport type { Breakpoint } from '@/composables/display'\n\ntype BreakpointOffset = `offset${Capitalize<Breakpoint>}`\ntype BreakpointOrder = `order${Capitalize<Breakpoint>}`\n\nconst breakpointProps = (() => {\n  return breakpoints.reduce((props, val) => {\n    props[val] = {\n      type: [Boolean, String, Number],\n      default: false,\n    }\n    return props\n  }, {} as Record<Breakpoint, Prop<boolean | string | number, false>>)\n})()\n\nconst offsetProps = (() => {\n  return breakpoints.reduce((props, val) => {\n    const offsetKey = ('offset' + capitalize(val)) as BreakpointOffset\n    props[offsetKey] = {\n      type: [String, Number],\n      default: null,\n    }\n    return props\n  }, {} as Record<BreakpointOffset, Prop<string | number, null>>)\n})()\n\nconst orderProps = (() => {\n  return breakpoints.reduce((props, val) => {\n    const orderKey = ('order' + capitalize(val)) as BreakpointOrder\n    props[orderKey] = {\n      type: [String, Number],\n      default: null,\n    }\n    return props\n  }, {} as Record<BreakpointOrder, Prop<string | number, null>>)\n})()\n\nconst propMap = {\n  col: Object.keys(breakpointProps),\n  offset: Object.keys(offsetProps),\n  order: Object.keys(orderProps),\n}\n\nfunction breakpointClass (type: keyof typeof propMap, prop: string, val: boolean | string | number) {\n  let className: string = type\n  if (val == null || val === false) {\n    return undefined\n  }\n  if (prop) {\n    const breakpoint = prop.replace(type, '')\n    className += `-${breakpoint}`\n  }\n  if (type === 'col') {\n    className = 'v-' + className\n  }\n  // Handling the boolean style prop when accepting [Boolean, String, Number]\n  // means Vue will not convert <v-col sm></v-col> to sm: true for us.\n  // Since the default is false, an empty string indicates the prop's presence.\n  if (type === 'col' && (val === '' || val === true)) {\n    // .v-col-md\n    return className.toLowerCase()\n  }\n  // .order-md-6\n  className += `-${val}`\n  return className.toLowerCase()\n}\n\nconst ALIGN_SELF_VALUES = ['auto', 'start', 'end', 'center', 'baseline', 'stretch'] as const\n\nexport const makeVColProps = propsFactory({\n  cols: {\n    type: [Boolean, String, Number],\n    default: false,\n  },\n  ...breakpointProps,\n  offset: {\n    type: [String, Number],\n    default: null,\n  },\n  ...offsetProps,\n  order: {\n    type: [String, Number],\n    default: null,\n  },\n  ...orderProps,\n  alignSelf: {\n    type: String as PropType<typeof ALIGN_SELF_VALUES[number]>,\n    default: null,\n    validator: (str: any) => ALIGN_SELF_VALUES.includes(str),\n  },\n\n  ...makeComponentProps(),\n  ...makeTagProps(),\n}, 'VCol')\n\nexport const VCol = genericComponent()({\n  name: 'VCol',\n\n  props: makeVColProps(),\n\n  setup (props, { slots }) {\n    const classes = computed(() => {\n      const classList: any[] = []\n\n      // Loop through `col`, `offset`, `order` breakpoint props\n      let type: keyof typeof propMap\n      for (type in propMap) {\n        propMap[type].forEach(prop => {\n          const value: string | number | boolean = (props as any)[prop]\n          const className = breakpointClass(type, prop, value)\n          if (className) classList!.push(className)\n        })\n      }\n\n      const hasColClasses = classList.some(className => className.startsWith('v-col-'))\n\n      classList.push({\n        // Default to .v-col if no other col-{bp}-* classes generated nor `cols` specified.\n        'v-col': !hasColClasses || !props.cols,\n        [`v-col-${props.cols}`]: props.cols,\n        [`offset-${props.offset}`]: props.offset,\n        [`order-${props.order}`]: props.order,\n        [`align-self-${props.alignSelf}`]: props.alignSelf,\n      })\n\n      return classList\n    })\n\n    return () => h(props.tag, {\n      class: [\n        classes.value,\n        props.class,\n      ],\n      style: props.style,\n    }, slots.default?.())\n  },\n})\n\nexport type VCol = InstanceType<typeof VCol>\n"]},"metadata":{},"sourceType":"module"}