{"ast":null,"code":"// Styles\nimport \"./VGrid.css\"; // Composables\n\nimport { makeComponentProps } from \"../../composables/component.mjs\";\nimport { breakpoints } from \"../../composables/display.mjs\";\nimport { makeTagProps } from \"../../composables/tag.mjs\"; // Utilities\n\nimport { capitalize, computed, h } from 'vue';\nimport { genericComponent, propsFactory } from \"../../util/index.mjs\"; // Types\n\nconst ALIGNMENT = ['start', 'end', 'center'];\nconst SPACE = ['space-between', 'space-around', 'space-evenly'];\n\nfunction makeRowProps(prefix, def) {\n  return breakpoints.reduce((props, val) => {\n    const prefixKey = prefix + capitalize(val);\n    props[prefixKey] = def();\n    return props;\n  }, {});\n}\n\nconst ALIGN_VALUES = [...ALIGNMENT, 'baseline', 'stretch'];\n\nconst alignValidator = str => ALIGN_VALUES.includes(str);\n\nconst alignProps = makeRowProps('align', () => ({\n  type: String,\n  default: null,\n  validator: alignValidator\n}));\nconst JUSTIFY_VALUES = [...ALIGNMENT, ...SPACE];\n\nconst justifyValidator = str => JUSTIFY_VALUES.includes(str);\n\nconst justifyProps = makeRowProps('justify', () => ({\n  type: String,\n  default: null,\n  validator: justifyValidator\n}));\nconst ALIGN_CONTENT_VALUES = [...ALIGNMENT, ...SPACE, 'stretch'];\n\nconst alignContentValidator = str => ALIGN_CONTENT_VALUES.includes(str);\n\nconst alignContentProps = makeRowProps('alignContent', () => ({\n  type: String,\n  default: null,\n  validator: alignContentValidator\n}));\nconst propMap = {\n  align: Object.keys(alignProps),\n  justify: Object.keys(justifyProps),\n  alignContent: Object.keys(alignContentProps)\n};\nconst classMap = {\n  align: 'align',\n  justify: 'justify',\n  alignContent: 'align-content'\n};\n\nfunction breakpointClass(type, prop, val) {\n  let className = classMap[type];\n\n  if (val == null) {\n    return undefined;\n  }\n\n  if (prop) {\n    // alignSm -> Sm\n    const breakpoint = prop.replace(type, '');\n    className += `-${breakpoint}`;\n  } // .align-items-sm-center\n\n\n  className += `-${val}`;\n  return className.toLowerCase();\n}\n\nexport const makeVRowProps = propsFactory({\n  dense: Boolean,\n  noGutters: Boolean,\n  align: {\n    type: String,\n    default: null,\n    validator: alignValidator\n  },\n  ...alignProps,\n  justify: {\n    type: String,\n    default: null,\n    validator: justifyValidator\n  },\n  ...justifyProps,\n  alignContent: {\n    type: String,\n    default: null,\n    validator: alignContentValidator\n  },\n  ...alignContentProps,\n  ...makeComponentProps(),\n  ...makeTagProps()\n}, 'VRow');\nexport const VRow = genericComponent()({\n  name: 'VRow',\n  props: makeVRowProps(),\n\n  setup(props, _ref) {\n    let {\n      slots\n    } = _ref;\n    const classes = computed(() => {\n      const classList = []; // Loop through `align`, `justify`, `alignContent` breakpoint props\n\n      let type;\n\n      for (type in propMap) {\n        propMap[type].forEach(prop => {\n          const value = props[prop];\n          const className = breakpointClass(type, prop, value);\n          if (className) classList.push(className);\n        });\n      }\n\n      classList.push({\n        'v-row--no-gutters': props.noGutters,\n        'v-row--dense': props.dense,\n        [`align-${props.align}`]: props.align,\n        [`justify-${props.justify}`]: props.justify,\n        [`align-content-${props.alignContent}`]: props.alignContent\n      });\n      return classList;\n    });\n    return () => h(props.tag, {\n      class: ['v-row', classes.value, props.class],\n      style: props.style\n    }, slots.default?.());\n  }\n\n});","map":{"version":3,"mappings":"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","names":["makeComponentProps","breakpoints","makeTagProps","capitalize","computed","h","genericComponent","propsFactory","ALIGNMENT","SPACE","makeRowProps","prefix","def","reduce","props","val","prefixKey","ALIGN_VALUES","alignValidator","str","includes","alignProps","type","String","default","validator","JUSTIFY_VALUES","justifyValidator","justifyProps","ALIGN_CONTENT_VALUES","alignContentValidator","alignContentProps","propMap","align","Object","keys","justify","alignContent","classMap","breakpointClass","prop","className","undefined","breakpoint","replace","toLowerCase","makeVRowProps","dense","Boolean","noGutters","VRow","name","setup","_ref","slots","classes","classList","forEach","value","push","tag","class","style"],"sources":["../../../src/components/VGrid/VRow.ts"],"sourcesContent":["// Styles\nimport './VGrid.sass'\n\n// Composables\nimport { makeComponentProps } from '@/composables/component'\nimport { breakpoints } from '@/composables/display'\nimport { makeTagProps } from '@/composables/tag'\n\n// Utilities\nimport { capitalize, computed, h } from 'vue'\nimport { genericComponent, propsFactory } from '@/util'\n\n// Types\nimport type { Prop, PropType } from 'vue'\nimport type { Breakpoint } from '@/composables/display'\n\nconst ALIGNMENT = ['start', 'end', 'center'] as const\n\ntype BreakpointAlign = `align${Capitalize<Breakpoint>}`\ntype BreakpointJustify = `justify${Capitalize<Breakpoint>}`\ntype BreakpointAlignContent = `alignContent${Capitalize<Breakpoint>}`\n\nconst SPACE = ['space-between', 'space-around', 'space-evenly'] as const\n\nfunction makeRowProps <\n  Name extends BreakpointAlign | BreakpointJustify | BreakpointAlignContent,\n  Type,\n> (prefix: string, def: () => Prop<Type, null>) {\n  return breakpoints.reduce((props, val) => {\n    const prefixKey = prefix + capitalize(val) as Name\n    props[prefixKey] = def()\n    return props\n  }, {} as Record<Name, Prop<Type, null>>)\n}\n\nconst ALIGN_VALUES = [...ALIGNMENT, 'baseline', 'stretch'] as const\ntype AlignValue = typeof ALIGN_VALUES[number]\nconst alignValidator = (str: any) => ALIGN_VALUES.includes(str)\nconst alignProps = makeRowProps<BreakpointAlign, AlignValue>('align', () => ({\n  type: String as PropType<AlignValue>,\n  default: null,\n  validator: alignValidator,\n}))\n\nconst JUSTIFY_VALUES = [...ALIGNMENT, ...SPACE] as const\ntype JustifyValue = typeof JUSTIFY_VALUES[number]\nconst justifyValidator = (str: any) => JUSTIFY_VALUES.includes(str)\nconst justifyProps = makeRowProps<BreakpointJustify, JustifyValue>('justify', () => ({\n  type: String as PropType<JustifyValue>,\n  default: null,\n  validator: justifyValidator,\n}))\n\nconst ALIGN_CONTENT_VALUES = [...ALIGNMENT, ...SPACE, 'stretch'] as const\ntype AlignContentValue = typeof ALIGN_CONTENT_VALUES[number]\nconst alignContentValidator = (str: any) => ALIGN_CONTENT_VALUES.includes(str)\nconst alignContentProps = makeRowProps<BreakpointAlignContent, AlignContentValue>('alignContent', () => ({\n  type: String as PropType<AlignContentValue>,\n  default: null,\n  validator: alignContentValidator,\n}))\n\nconst propMap = {\n  align: Object.keys(alignProps),\n  justify: Object.keys(justifyProps),\n  alignContent: Object.keys(alignContentProps),\n}\n\nconst classMap = {\n  align: 'align',\n  justify: 'justify',\n  alignContent: 'align-content',\n}\n\nfunction breakpointClass (type: keyof typeof propMap, prop: string, val: string) {\n  let className = classMap[type]\n  if (val == null) {\n    return undefined\n  }\n  if (prop) {\n    // alignSm -> Sm\n    const breakpoint = prop.replace(type, '')\n    className += `-${breakpoint}`\n  }\n  // .align-items-sm-center\n  className += `-${val}`\n  return className.toLowerCase()\n}\n\nexport const makeVRowProps = propsFactory({\n  dense: Boolean,\n  noGutters: Boolean,\n  align: {\n    type: String as PropType<typeof ALIGN_VALUES[number]>,\n    default: null,\n    validator: alignValidator,\n  },\n  ...alignProps,\n  justify: {\n    type: String as PropType<typeof ALIGN_CONTENT_VALUES[number]>,\n    default: null,\n    validator: justifyValidator,\n  },\n  ...justifyProps,\n  alignContent: {\n    type: String as PropType<typeof ALIGN_CONTENT_VALUES[number]>,\n    default: null,\n    validator: alignContentValidator,\n  },\n\n  ...alignContentProps,\n  ...makeComponentProps(),\n  ...makeTagProps(),\n}, 'VRow')\n\nexport const VRow = genericComponent()({\n  name: 'VRow',\n\n  props: makeVRowProps(),\n\n  setup (props, { slots }) {\n    const classes = computed(() => {\n      const classList: any[] = []\n\n      // Loop through `align`, `justify`, `alignContent` breakpoint props\n      let type: keyof typeof propMap\n      for (type in propMap) {\n        propMap[type].forEach(prop => {\n          const value: string = (props as any)[prop]\n          const className = breakpointClass(type, prop, value)\n          if (className) classList!.push(className)\n        })\n      }\n\n      classList.push({\n        'v-row--no-gutters': props.noGutters,\n        'v-row--dense': props.dense,\n        [`align-${props.align}`]: props.align,\n        [`justify-${props.justify}`]: props.justify,\n        [`align-content-${props.alignContent}`]: props.alignContent,\n      })\n\n      return classList\n    })\n\n    return () => h(props.tag, {\n      class: [\n        'v-row',\n        classes.value,\n        props.class,\n      ],\n      style: props.style,\n    }, slots.default?.())\n  },\n})\n\nexport type VRow = InstanceType<typeof VRow>\n"]},"metadata":{},"sourceType":"module"}